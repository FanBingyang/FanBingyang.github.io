<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>范秉洋的博客</title>
  
  <subtitle>It&#39;s not hard ro give up &lt;br&gt; but it&#39;s cool to stick with it</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-07T04:33:44.826Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>范秉洋</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信小程序-数据操作</title>
    <link href="http://yoursite.com/2020/02/06/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2020/02/06/微信小程序-数据操作/</id>
    <published>2020-02-06T05:23:17.000Z</published>
    <updated>2020-02-07T04:33:44.826Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;微信小程序的前端的开发和我们开发网页一样，也是想通过自定的<code>js</code>方法请后台请求到数据，然后渲染到页面上进行显示，不过微信小程序对于数据的操作和网页前端不一样，像数据的赋值、页面之间数据的传递等具体的数据操作是怎么样实现的呢？这篇文章就来简单的介绍一下。</p><a id="more"></a><h1 id="小程序-数据操作"><a href="#小程序-数据操作" class="headerlink" title="小程序-数据操作"></a>小程序-数据操作</h1><h2 id="1-变量的取值与赋值"><a href="#1-变量的取值与赋值" class="headerlink" title="1. 变量的取值与赋值"></a>1. 变量的取值与赋值</h2><h3 id="1-1-单一变量"><a href="#1-1-单一变量" class="headerlink" title="1.1 单一变量"></a>1.1 单一变量</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;先简单说一下什么是单一变量，就是一个变量只保存一个值，比如字符串、整型这种变量。对于小程序来说，页面显示的所有数据都是来自页面<code>js</code>文件进行提供的。首先看一下怎么在页面的<code>js</code>文件里为小程序变量赋值呢。示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">    <span class="comment">//data存放全局变量数据的地方，是一个json字符串，存放变量的初始值</span></span><br><span class="line">    data: &#123;</span><br><span class="line">        <span class="comment">//变量a是一个字符串</span></span><br><span class="line">        a: <span class="string">'hello word'</span>,</span><br><span class="line">        <span class="comment">//变量b是一个整型</span></span><br><span class="line">        b: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//自定义方法，为变量进行赋值</span></span><br><span class="line">    toSetDatas:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//方法一：直接赋值，对原数值本身进行操作</span></span><br><span class="line">        <span class="comment">//但是要注意一点，这种方法虽然能给变量重新赋值，但是不会同步更新到页面，</span></span><br><span class="line">        <span class="keyword">this</span>.data.a = <span class="string">'Hello word!'</span>,</span><br><span class="line">        <span class="keyword">this</span>.data.b = <span class="number">3</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法二：使用setData方法进行变量赋值</span></span><br><span class="line">        <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">            a: <span class="string">'Hello Word!'</span>,</span><br><span class="line">            b:<span class="number">3</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上述代码中提供了两种赋值方法，但是常用的还是第二种通过<code>setData</code>方法进行赋值，因为第一种方法只能在后台将数据进行修改，不会实时更新页面的数据，所以不实用，第二种方法可以既可以修改变量数据，也可以进行页面数据的实时同步。在页面获取数据的方法其实也很简单，只需要用两个大括号<strong>&#123;&#123;&#125;&#125;</strong>括住变量即可将数据显示在页面上，示例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--test.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>变量a的值为：&#123;&#123;a&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 变量a的值为：Hello Word! --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>变量b的值为：&#123;&#123;b&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  变量b的值为：3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上只是页面获取数据一个简单的数据绑定，其他渲染数据的方法对于数据获取的方法是一样，更多渲染数据请参考<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/" target="_blank" rel="noopener">WXML语法</a>。</p><h3 id="1-2-复合变量"><a href="#1-2-复合变量" class="headerlink" title="1.2 复合变量"></a>1.2 复合变量</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;微信小程序中的复合变量主要有数组和<code>json</code>格式的数据。对这种数据的赋值使用的还是<code>setData</code>方法，但是和单一变量的赋值略有不同，这次在赋值的之后不能直接写变量名了，编译会包错。示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        list: [<span class="number">1</span>,<span class="number">2</span>,<span class="string">'a'</span>,<span class="string">'b'</span>],</span><br><span class="line">    person: &#123;</span><br><span class="line">            name:<span class="string">'张三'</span>,</span><br><span class="line">            age: <span class="number">18</span>,</span><br><span class="line">            sex: <span class="string">'男'</span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//错误的赋值方法，</span></span><br><span class="line">    <span class="comment">//下面对数据的赋值，编译时就是错的，会报错unknown: Unexpected token, expected</span></span><br><span class="line">    <span class="built_in">Error</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">            list[<span class="number">0</span>]: <span class="number">4</span>,</span><br><span class="line">            person.name: <span class="string">'李四'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//正确的赋值方法一：直接赋值，用引号包括变量</span></span><br><span class="line">     Right_1:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">            <span class="string">'list[0]'</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="string">'person.name'</span>: <span class="string">'李四'</span></span><br><span class="line">        &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//正确的赋值方法二：拼接赋值</span></span><br><span class="line">    <span class="comment">//首先获取数据变量的字符串格式，然后通过中括号[]包括变量，进行赋值</span></span><br><span class="line">    <span class="comment">//因为先获取的变量的字符串形式，所以可以动态赋值</span></span><br><span class="line">    Right_2:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> list_1 = <span class="string">'list['</span> + i + <span class="string">']'</span></span><br><span class="line">        <span class="keyword">var</span> personName = <span class="string">'person.name'</span></span><br><span class="line">        <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">            [list_1]: <span class="number">4</span>,</span><br><span class="line">            [personName]: <span class="string">'李四'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>页面取值和单一变量一下，也是用两个大括号<strong>&#123;&#123;&#125;&#125;</strong>包括起来，示例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--test.wxml--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- wx:for:绑定要遍历的列表；wx:for-index:指定数组当前下标的变量名，默认是index；wx:for-item:指定数组当前元素的变量名，默认是item。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;list&#125;&#125;"</span> <span class="attr">wx:for-index</span>=<span class="string">"index"</span> <span class="attr">wx:for-item</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>数组第&#123;&#123;index&#125;&#125;的值为：&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  数组第0的值为：1 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  数组第1的值为：4 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  数组第2的值为：a --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  数组第3的值为：b --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>person的姓名为：&#123;&#123;person.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  person的姓名为：李四 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>person的年龄为：&#123;&#123;person.age&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  person的年龄为：18 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>person的性别为：&#123;&#123;person.sex&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  person的性别为：男 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-页面之间数据的传递"><a href="#2-页面之间数据的传递" class="headerlink" title="2. 页面之间数据的传递"></a>2. 页面之间数据的传递</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般在页面跳转的时候，需要从当前页面给下一级页面进行数据的传递，传递的数据格式有单一变量、对象、对象数组三种。</p><h3 id="2-1-单一变量"><a href="#2-1-单一变量" class="headerlink" title="2.1 单一变量"></a>2.1 单一变量</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;单一变量不是就只是一个变量，也有可能是多个，只是单个传递过去的，没有封装在在一起，传递方式就是<code>URL</code>后面加参数的方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//indes.js</span></span><br><span class="line"><span class="comment">//向下一级页面传递单一变量</span></span><br><span class="line">testFunction:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>):</span>&#123; </span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">        url: <span class="string">'../tets/test?name='</span> + name +<span class="string">'&amp;age='</span> + age,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test.js</span></span><br><span class="line"><span class="comment">//在下一级页面的onload方法中获取</span></span><br><span class="line">onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = options.name</span><br><span class="line">    <span class="keyword">var</span> age = options.age</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'name='</span>+name)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'age='</span>+age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-传递对象"><a href="#2-2-传递对象" class="headerlink" title="2.2 传递对象"></a>2.2 传递对象</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;传递对象也是将数据附加在<code>URL</code>后面进行传递，只不过传递之前要先改变一下格式，将<code>JSON</code>格式的数据转换成<code>string</code>类型，这样才能进行传递。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="comment">//向下一级页面传递对象参数</span></span><br><span class="line"><span class="comment">// 通过JSON.stringify(obj) 方法将对象转化为字符串进行传递</span></span><br><span class="line">testFunction: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    person = &#123;</span><br><span class="line">        name: <span class="string">'张三'</span>,</span><br><span class="line">        sex: <span class="string">'男'</span>,</span><br><span class="line">        age: <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="built_in">JSON</span>.stringify(person);</span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">        url: <span class="string">'../test/test?data='</span> + data,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test.js</span></span><br><span class="line"><span class="comment">//在下一级页面的onload中获取,</span></span><br><span class="line">onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> person = options.data;</span><br><span class="line">    <span class="built_in">console</span>.log(person)</span><br><span class="line">    <span class="comment">//&#123;"name":"张三","sex":"男","age":18&#125;           json格式的json字符串</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="2-3-传递数组对象"><a href="#2-3-传递数组对象" class="headerlink" title="2.3 传递数组对象"></a>2.3 传递数组对象</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;传递对象也是将数据附加在<code>URL</code>后面进行传递，只不过传递之前要先改变一下格式，将<code>list</code>格式的数据转换成<code>string</code>类型，这样才能进行传递，然后在下一级页面再把接收到的数据转换成<code>list</code>格式就行了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="comment">//向下一级页面传递数组对象参数</span></span><br><span class="line"><span class="comment">// 通过JSON.stringify(obj) 方法将对象转化为字符串进行传递</span></span><br><span class="line">testFunction: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    lsit = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">    <span class="keyword">var</span> data = <span class="built_in">JSON</span>.stringify(list);</span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">        url: <span class="string">'../test/test?data='</span> + data,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test.js</span></span><br><span class="line"><span class="comment">//在下一级页面的onload中获取,</span></span><br><span class="line">onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(options.data)</span><br><span class="line">    <span class="comment">//[1,2,3,4]    字符串格式</span></span><br><span class="line">    <span class="comment">//将接收到的字符串数据转换成数组格式</span></span><br><span class="line">    <span class="keyword">var</span> list = <span class="built_in">JSON</span>.parse(options.data);</span><br><span class="line">    <span class="built_in">console</span>.log(list)</span><br><span class="line">    <span class="comment">// 1,2,3,4     object格式</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本篇主要就是讲述了一下在小程序中对于数据的操作，也是我一步一步踩过的坑。说多了都是泪啊~最主要的就是复合变量的赋值以及后面的对象参数进行传递数据，牵涉到格式转换的问题。不多说了，在这算是把这些坑填上了，下次就不用再踩了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;微信小程序的前端的开发和我们开发网页一样，也是想通过自定的&lt;code&gt;js&lt;/code&gt;方法请后台请求到数据，然后渲染到页面上进行显示，不过微信小程序对于数据的操作和网页前端不一样，像数据的赋值、页面之间数据的传递等具体的数据操作是怎么样实现的呢？这篇文章就来简单的介绍一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="微信小程序" scheme="http://yoursite.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-项目目录结构</title>
    <link href="http://yoursite.com/2020/02/05/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2020/02/05/微信小程序-项目目录结构/</id>
    <published>2020-02-05T04:20:13.000Z</published>
    <updated>2020-02-07T04:59:11.662Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们在开发项目的时候，项目创建好之后都会有一个默认的目录结构，在开发微信小程序的时候，通过官方提供的微信开发者工具创建项目之后，也会生成一个默认的目录结构，和我们开发一般项目的结构稍微有所不同，今天记录和分析一下微信小程序的目录结构。</p><a id="more"></a><h1 id="小程序-项目结构"><a href="#小程序-项目结构" class="headerlink" title="小程序-项目结构"></a>小程序-项目结构</h1><h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;打开从<a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">微信公众平台</a>下载的微信开发者工具，需要先进行登录，用你在公众平台注册的那个微信账号进行登录，在左侧项目列表中选择小程序，然后如下图所示。</p><p><img src="%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE.png" alt="新建项目"></p><p>上面一共有这么几个地方需要填写：</p><ul><li><strong>项目名称：</strong>就是你开发的项目。</li><li><strong>目录：</strong>默认是<code>C:\Users\XXX\WeChatProjects\项目名</code>，可以手动选择代码的存放路径；</li><li><strong>AppID：</strong>如果是注册用户，需要到公共平台在菜单“开发”—“开发设置”可以看到小程序AppID，这相当于是给开发人员的通行证，复制下来填入即可。如果是未注册的用户也可以使用<em>测试号</em>，不过测试号不可以选择后端服务(反正暂时也用不到)。</li><li><strong>开发模式：</strong>小程序(默认)，插件。我们选择小程序。</li><li><strong>后端服务：</strong>小程序·云开发(默认)，不使用云服务。我们选择不使用云服务。</li><li><strong>语言：</strong>如果后端服务选择不使用云服务的话，会多一个语言选择，分别有<code>JavaScript</code>和<code>TypeScript</code>两者，在这选择<code>Javascript</code>。</li></ul><p>上面的选项选择完毕之后，点击右下角的<strong>新建</strong>即可创建项目。</p><h2 id="2-目录结构"><a href="#2-目录结构" class="headerlink" title="2. 目录结构"></a>2. 目录结构</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;新创建出的项目的目录结构如下，包括两个文件夹和5个文件。文件夹分别是<code>pages</code>文件夹和<code>utils</code>文件夹；文件分别是<code>app.js</code>，<code>app.json</code>，<code>app.wxss</code>，<code>project.config.json</code>，<code>sitemap.json</code>。</p><p><img src="%E6%80%BB%E7%9B%AE%E5%BD%95.png" alt="总目录"></p><h2 id="3-文件分析"><a href="#3-文件分析" class="headerlink" title="3. 文件分析"></a>3. 文件分析</h2><h3 id="3-1-app-js"><a href="#3-1-app-js" class="headerlink" title="3.1 app.js"></a>3.1 app.js</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该文件是小程序的逻辑文件，是项目必须要有的一个文件，里面的App是用于启动时做一下内容加载请求使用，是小程序进入首页之前调用的，里面的<strong>globalData</strong>存放的是全局变量，可以在任何一个<code>.js</code>文件里面被调用。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每个小程序都需要在 <code>app.js</code> 中调用 <code>App</code> 方法注册小程序实例，绑定生命周期回调函数、错误监听和页面不存在监听函数等。详细的参数含义和使用请参考 <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html" target="_blank" rel="noopener">App 参考文档</a> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line">App(&#123;</span><br><span class="line">  onLaunch (options) &#123;</span><br><span class="line">    <span class="comment">// Do something initial when launch.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onShow (options) &#123;</span><br><span class="line">    <span class="comment">// Do something when show.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onHide () &#123;</span><br><span class="line">    <span class="comment">// Do something when hide.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onError (msg) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg)</span><br><span class="line">  &#125;,</span><br><span class="line">  globalData: <span class="string">'I am global data'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>整个小程序只有一个App实例，是全部页面共享的，。开发者可以通过<code>getApp</code>方法获取全局唯一的App实例，获取App上的数据或者电调用开发者注册在App上的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// xxx.js</span></span><br><span class="line"><span class="keyword">const</span> appInstance = getApp()</span><br><span class="line"><span class="built_in">console</span>.log(appInstance.globalData) <span class="comment">// I am global data</span></span><br></pre></td></tr></table></figure><h3 id="3-2-app-json"><a href="#3-2-app-json" class="headerlink" title="3.2 app.json"></a>3.2 app.json</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在小程序根目录下的 <code>app.json</code> 文件用来对微信小程序进行全局配置，该文件也是项目必须要有的，它决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。完整配置项说明请参考<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html" target="_blank" rel="noopener">小程序全局配置</a>。以下是一个包含了部分常用配置选项的 <code>app.json</code> ：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"pages"</span>: [</span><br><span class="line">    <span class="string">"pages/index/index"</span>,</span><br><span class="line">    <span class="string">"pages/logs/index"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"window"</span>: &#123;</span><br><span class="line">    <span class="attr">"navigationBarTitleText"</span>: <span class="string">"Demo"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"tabBar"</span>: &#123;</span><br><span class="line">    <span class="attr">"list"</span>: [&#123;</span><br><span class="line">      <span class="attr">"pagePath"</span>: <span class="string">"pages/index/index"</span>,</span><br><span class="line">      <span class="attr">"text"</span>: <span class="string">"首页"</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">"pagePath"</span>: <span class="string">"pages/logs/logs"</span>,</span><br><span class="line">      <span class="attr">"text"</span>: <span class="string">"日志"</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"networkTimeout"</span>: &#123;</span><br><span class="line">    <span class="attr">"request"</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="attr">"downloadFile"</span>: <span class="number">10000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"debug"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"navigateToMiniProgramAppIdList"</span>: [</span><br><span class="line">    <span class="string">"wxe5f52902cf4de896"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span id="app.wxss"></span></p><h3 id="3-3-app-wxss"><a href="#3-3-app-wxss" class="headerlink" title="3.3 app.wxss"></a>3.3 app.wxss</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该文件是小程序的公共样式，不是项目所必须有的，定义在 app.wxss 中的样式为全局样式，作用于每一个页面。在 page 的 wxss 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 app.wxss 中相同的选择器。WXSS (WeiXin Style Sheets)是一套样式语言，用于描述 WXML 的组件样式。WXSS 用来决定 WXML 的组件应该怎么显示。WXSS 具有 CSS 大部分特性。为了更适合开发微信小程序，WXSS 对 CSS 进行了扩充以及修改。与 CSS 相比，WXSS 扩展的特性有<strong>尺寸单位</strong>和<strong>样式导入</strong>。</p><p><strong>尺寸单位：</strong>rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。</p><table><thead><tr><th align="left">设备</th><th align="left">rpx换算px (屏幕宽度/750)</th><th align="left">px换算rpx (750/屏幕宽度)</th></tr></thead><tbody><tr><td align="left">iPhone5</td><td align="left">1rpx = 0.42px</td><td align="left">1px = 2.34rpx</td></tr><tr><td align="left">iPhone6</td><td align="left">1rpx = 0.5px</td><td align="left">1px = 2rpx</td></tr><tr><td align="left">iPhone6 Plus</td><td align="left">1rpx = 0.552px</td><td align="left"><strong>1px = 1.81rpx</strong></td></tr></tbody></table><blockquote><p><strong>建议：</strong>在开发微信小程序的时候可以用iPhon作为视觉稿的标准，也就是<strong>1px=2rpx</strong>。</p><p><strong>注意：</strong>在较小的屏幕上不可避免的会有一些毛刺。</p></blockquote><p><strong>样式导入：</strong>使用<code>@import</code>语句可以导入外联样式表，<code>@import</code>后跟需要导入的外联样式表的相对路径，用<code>;</code>表示语句结束。示例代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** common.wxss **/</span></span><br><span class="line"><span class="selector-class">.small-p</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** app.wxss **/</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"common.wxss"</span>;</span><br><span class="line"><span class="selector-class">.middle-p</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>内联样式：</strong>框架组件上支持使用 style、class 属性来控制组件的样式。</p><ul><li><strong>style：</strong>静态的样式统一写到 class 中。style 接收动态的样式，在运行时会进行解析，请尽量避免将静态的样式写进 style 中，以免影响渲染速度。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view style="color:&#123;&#123;color&#125;&#125;;" /&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>class：</strong>用于指定样式规则，其属性值是样式规则中类选择器名(样式类名)的集合，样式类名不需要带上<code>.</code>，样式类名之间用空格分隔。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class="normal_view" /&gt;</span><br></pre></td></tr></table></figure><p><strong>选择器：</strong>目前支持的选择器有：</p><table><thead><tr><th align="left">选择器</th><th align="left">样例</th><th align="left">样例描述</th></tr></thead><tbody><tr><td align="left">.class</td><td align="left"><code>.intro</code></td><td align="left">选择所有拥有 class=”intro” 的组件</td></tr><tr><td align="left">#id</td><td align="left"><code>#firstname</code></td><td align="left">选择拥有 id=”firstname” 的组件</td></tr><tr><td align="left">element</td><td align="left"><code>view</code></td><td align="left">选择所有 view 组件</td></tr><tr><td align="left">element, element</td><td align="left"><code>view, checkbox</code></td><td align="left">选择所有文档的 view 组件和所有的 checkbox 组件</td></tr><tr><td align="left">::after</td><td align="left"><code>view::after</code></td><td align="left">在 view 组件后边插入内容</td></tr><tr><td align="left">::before</td><td align="left"><code>view::before</code></td><td align="left">在 view 组件前边插入内容</td></tr></tbody></table><h3 id="3-4-project-config-json"><a href="#3-4-project-config-json" class="headerlink" title="3.4 project.config.json"></a>3.4 project.config.json</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该文件是一个工具配置文件，通常大家在使用一个工具的时候，都会针对各自喜好做一些个性化配置，例如界面颜色、编译配置等等，当你换了另外一台电脑重新安装工具的时候，你还要重新配置。考虑到这点，小程序开发者工具在每个项目的根目录都会生成一个 project.config.json，你在工具上做的任何配置都会写入到这个文件，当你重新安装工具或者换电脑工作时，你只要载入同一个项目的代码包，开发者工具就自动会帮你恢复到当时你开发项目时的个性化配置，其中会包括编辑器的颜色、代码上传时自动压缩等等一系列选项。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"description"</span>: <span class="string">"项目配置文件"</span>,</span><br><span class="line"><span class="attr">"packOptions"</span>: &#123;</span><br><span class="line"><span class="attr">"ignore"</span>: []</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"setting"</span>: &#123;</span><br><span class="line"><span class="attr">"urlCheck"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"es6"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"postcss"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"minified"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"newFeature"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"autoAudits"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"coverView"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"showShadowRootInWxmlPanel"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"scopeDataCheck"</span>: <span class="literal">false</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"compileType"</span>: <span class="string">"miniprogram"</span>,</span><br><span class="line"><span class="attr">"libVersion"</span>: <span class="string">"2.10.1"</span>,</span><br><span class="line"><span class="attr">"appid"</span>: <span class="string">"wxd837a802c37e57a0"</span>,</span><br><span class="line"><span class="attr">"projectname"</span>: <span class="string">"test"</span>,</span><br><span class="line"><span class="attr">"debugOptions"</span>: &#123;</span><br><span class="line"><span class="attr">"hidedInDevtools"</span>: []</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"isGameTourist"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"simulatorType"</span>: <span class="string">"wechat"</span>,</span><br><span class="line"><span class="attr">"simulatorPluginLibVersion"</span>: &#123;&#125;,</span><br><span class="line"><span class="attr">"condition"</span>: &#123;</span><br><span class="line"><span class="attr">"search"</span>: &#123;</span><br><span class="line"><span class="attr">"current"</span>: <span class="number">-1</span>,</span><br><span class="line"><span class="attr">"list"</span>: []</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"conversation"</span>: &#123;</span><br><span class="line"><span class="attr">"current"</span>: <span class="number">-1</span>,</span><br><span class="line"><span class="attr">"list"</span>: []</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"game"</span>: &#123;</span><br><span class="line"><span class="attr">"currentL"</span>: <span class="number">-1</span>,</span><br><span class="line"><span class="attr">"list"</span>: []</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"miniprogram"</span>: &#123;</span><br><span class="line"><span class="attr">"current"</span>: <span class="number">-1</span>,</span><br><span class="line"><span class="attr">"list"</span>: []</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-sitemap-json"><a href="#3-5-sitemap-json" class="headerlink" title="3.5 sitemap.json"></a>3.5 sitemap.json</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;小程序根目录下的 <code>sitemap.json</code> 文件用来配置小程序及其页面是否允许被微信索引。默认是所有页面都会被微信索引。在此就不过多解释，完整配置项说明请参考<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/sitemap.html" target="_blank" rel="noopener">小程序 sitemap 配置</a>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"rules"</span>:[&#123;</span><br><span class="line">    <span class="attr">"action"</span>: <span class="string">"disallow"</span>,</span><br><span class="line">    <span class="attr">"page"</span>: <span class="string">"*"</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注：</strong><code>sitemap</code> 的索引提示是默认开启的，如需要关闭 <code>sitemap</code> 的索引提示，可在小程序项目配置文件 <code>project.config.json</code> 的 <code>setting</code> 中配置字段 <code>checkSiteMap</code> 为 <code>false</code>。</p><p>*<em>注: *</em><code>sitemap</code> 文件内容最大为 5120 个 UTF8 字符。</p></blockquote><h2 id="4-文件夹分析"><a href="#4-文件夹分析" class="headerlink" title="4. 文件夹分析"></a>4. 文件夹分析</h2><h3 id="4-1-pages"><a href="#4-1-pages" class="headerlink" title="4.1 pages"></a>4.1 pages</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该文件夹是存放小程序页面的文件夹，下面每一个子文件夹都是一个小程序页面，一个小程序页面由四个文件组成，分别是：</p><table><thead><tr><th align="left">文件类型</th><th align="left">必需</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><a href="#js">js</a></td><td align="left">是</td><td align="left">页面逻辑</td></tr><tr><td align="left"><a href="#wxml">wxml</a></td><td align="left">是</td><td align="left">页面结构</td></tr><tr><td align="left"><a href="#json">json</a></td><td align="left">否</td><td align="left">页面配置</td></tr><tr><td align="left"><a href="#wxss">wxss</a></td><td align="left">否</td><td align="left">页面样式表</td></tr></tbody></table><p><span id="js"></span></p><h4 id="4-1-1-js"><a href="#4-1-1-js" class="headerlink" title="4.1.1 js"></a>4.1.1 js</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于小程序中的每个页面，都需要在页面对应的js文件中进行注册，指定页面的初始数据、生命周期回调、事件处理函数等。使用<strong>Page()</strong>构造器注册页面。详细的参数含义和使用请参考 <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html" target="_blank" rel="noopener">Page 参考文档</a> 。</p><p>代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    text: <span class="string">"This is page data."</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面创建时执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面出现在前台时执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面首次渲染完毕时执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onHide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面从前台变为后台时执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onUnload: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面销毁时执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onPullDownRefresh: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 触发下拉刷新时执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onReachBottom: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面触底时执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onShareAppMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面被用户分享时执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onPageScroll: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面滚动时执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onResize: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面尺寸变化时执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onTabItemTap(item) &#123;</span><br><span class="line">    <span class="comment">// tab 点击时执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(item.index)</span><br><span class="line">    <span class="built_in">console</span>.log(item.pagePath)</span><br><span class="line">    <span class="built_in">console</span>.log(item.text)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 事件响应函数</span></span><br><span class="line">  viewTap: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      text: <span class="string">'Set some data for updating view.'</span></span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// this is setData callback</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 自由数据</span></span><br><span class="line">  customData: &#123;</span><br><span class="line">    hi: <span class="string">'MINA'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><span id="wxml"></span></p><h4 id="4-1-2-wxml"><a href="#4-1-2-wxml" class="headerlink" title="4.1.2 wxml"></a>4.1.2 wxml</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该文件是编写小程序页面的文件，WXML（WeiXin Markup Language）是框架设计的一套标签语言，结合基础组件、事件系统，可以构建出页面的结构。要完整了解 WXML 语法，请参考<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/" target="_blank" rel="noopener">WXML 语法参考</a>。下面是一些wxml使用的简单的例子。</p><p><strong>数据绑定：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// page.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'Hello MINA!'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>列表渲染：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;array&#125;&#125;"</span>&gt;</span> &#123;&#123;item&#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// page.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    array: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>条件渲染：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;view == 'WEBVIEW'&#125;&#125;"</span>&gt;</span> WEBVIEW <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">"&#123;&#123;view == 'APP'&#125;&#125;"</span>&gt;</span> APP <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>=<span class="string">"&#123;&#123;view == 'MINA'&#125;&#125;"</span>&gt;</span> MINA <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// page.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    view: <span class="string">'MINA'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><span id="json"></span></p><h4 id="4-1-3-json"><a href="#4-1-3-json" class="headerlink" title="4.1.3 json"></a>4.1.3 json</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该文件是当前页面的配置文件，每一个小程序页面也可以使用同名 <code>.json</code> 文件来对本页面的窗口表现进行配置，页面中配置项会覆盖 <code>app.json</code> 的 <code>window</code> 中相同的配置项。完整配置项说明请参考<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/page.html" target="_blank" rel="noopener">小程序页面配置</a>。</p><p>配置示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"navigationBarBackgroundColor"</span>: <span class="string">"#ffffff"</span>,</span><br><span class="line">  <span class="attr">"navigationBarTextStyle"</span>: <span class="string">"black"</span>,</span><br><span class="line">  <span class="attr">"navigationBarTitleText"</span>: <span class="string">"微信接口功能演示"</span>,</span><br><span class="line">  <span class="attr">"backgroundColor"</span>: <span class="string">"#eeeeee"</span>,</span><br><span class="line">  <span class="attr">"backgroundTextStyle"</span>: <span class="string">"light"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的配置分别是导航栏背景颜色、导航栏标题颜色、导航栏标题文字内容、窗口背景色、下拉 loading 的样式。</p><p><span id="wxss"></span></p><h4 id="4-1-4-wxss"><a href="#4-1-4-wxss" class="headerlink" title="4.1.4 wxss"></a>4.1.4 wxss</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该文件是对当前页面元素的样式进行渲染，和<code>app.wxss</code>一样，只不过是作用范围不一样，可以参看<a href="#app.wxss">app.wxss</a>。</p><h3 id="4-2-utils"><a href="#4-2-utils" class="headerlink" title="4.2 utils"></a>4.2 utils</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是一个工具包，里面的<code>js</code>文件是一个工具类，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> formatTime = <span class="function"><span class="params">date</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> year = date.getFullYear()</span><br><span class="line">  <span class="keyword">const</span> month = date.getMonth() + <span class="number">1</span></span><br><span class="line">  <span class="keyword">const</span> day = date.getDate()</span><br><span class="line">  <span class="keyword">const</span> hour = date.getHours()</span><br><span class="line">  <span class="keyword">const</span> minute = date.getMinutes()</span><br><span class="line">  <span class="keyword">const</span> second = date.getSeconds()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [year, month, day].map(formatNumber).join(<span class="string">'/'</span>) + <span class="string">' '</span> + [hour, minute, second].map(formatNumber).join(<span class="string">':'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> formatNumber = <span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">  n = n.toString()</span><br><span class="line">  <span class="keyword">return</span> n[<span class="number">1</span>] ? n : <span class="string">'0'</span> + n</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将方法暴露出去，供别人调用</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  formatTime: formatTime</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在其他页面的js文件里通过<code>require</code>进行引入该工具类，即可进行方法的调用。示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//xxx.js</span></span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'../../utils/util.js'</span>)</span><br><span class="line">Page(&#123;</span><br><span class="line">    getTime:funnction()&#123;</span><br><span class="line">    <span class="keyword">var</span> time = util.formatTime(<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line"><span class="built_in">console</span>.log(time)          <span class="comment">//  2020/02/05 18:40 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以上就是对小程序开发的目录结构介绍，还是很好了解的，具体里面的一些语法和用法，可以去微信公众平台查看<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/" target="_blank" rel="noopener">官方文档</a>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外在说一下怎么快速创建页面文件，一个页面需要有<code>.js</code>，<code>.json</code>，<code>.wxss</code>，<code>wxml</code>四个文件，如果一个一个的创建会很麻烦，说一个简单的方法，首先在<code>pages</code>上<strong>右键—&gt;新建目录</strong>，然后输入目录名称，接着在刚创建的目录上<strong>右键—&gt;新建Page</strong>，这样会直接在该目录下创建出与目录同名的四个相应的文件，是不是很便捷？还有一种更便捷的方法，就是在<code>app.json</code>文件中的<code>pages</code>里，直接按格式添加上要创建的目录，例如<code>&quot;pages/test/test&quot;</code>，保存之后，会直接创建出<code>test</code>文件夹以及下面的四个子文件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"pages"</span>: [</span><br><span class="line">        <span class="string">"pages/index/index"</span>,</span><br><span class="line">        <span class="string">"pages/logs/logs"</span>,</span><br><span class="line">        <span class="string">"pages/test/test"</span></span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;就写这么多吧，感觉整理的也还算详细，收工收工<del>~</del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;我们在开发项目的时候，项目创建好之后都会有一个默认的目录结构，在开发微信小程序的时候，通过官方提供的微信开发者工具创建项目之后，也会生成一个默认的目录结构，和我们开发一般项目的结构稍微有所不同，今天记录和分析一下微信小程序的目录结构。&lt;/p&gt;
    
    </summary>
    
    
      <category term="微信小程序" scheme="http://yoursite.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-登录操作</title>
    <link href="http://yoursite.com/2020/02/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E7%99%BB%E5%BD%95%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2020/02/03/微信小程序-登录操作/</id>
    <published>2020-02-03T08:58:24.000Z</published>
    <updated>2020-02-04T12:37:24.537Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之前没事写了一个微信小程序玩，刚起步就碰壁，因为要获取用户授权，然后请求用户的个人信息，由于微信官方api的更改,<code>wx.getUserInfo()</code>方法无法在无授权的情况下直接使用，而且只能获取到基本的一些微信用户的信息，不包含我们需要的<code>openId</code>以及<code>unionId</code>。几经折腾，才把这个第一步给迈过去，来记录一下。</p><a id="more"></a><h1 id="小程序-登录操作"><a href="#小程序-登录操作" class="headerlink" title="小程序-登录操作"></a>小程序-登录操作</h1><h2 id="1-登录流程"><a href="#1-登录流程" class="headerlink" title="1. 登录流程"></a>1. 登录流程</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;想要获取用户的登录信息，首先要先知道小程序的登录流程是什么，下面是官方给出的流程图。</p><p><img src="%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="登录流程图"></p><h3 id="1-1-第一步：获取code"><a href="#1-1-第一步：获取code" class="headerlink" title="1.1 第一步：获取code"></a>1.1 第一步：获取code</h3><p>1、小程序调用wx.login() 获取<strong>临时登录凭证code</strong>，并回传到开发者服务器。</p><p>2、开发者服务器以code换取<strong>用户唯一标识openid</strong>和<strong>会话密钥session_key</strong>。</p><p>3、之后开发者服务器可以根据用户标识来生成自定义登录态，用于后续业务逻辑中前后端交互时识别用户身份。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关于unionId，这里需要说明一下，如果应用只限于小程序内则不需要unionId,直接通过openId可以确定用户身份，但是如果需要跨应用，如：网页应用，app应用时则需要使用到unionId作为身份标识。</p><p>UnionID获取途径：绑定了开发者帐号的小程序，可以通过下面3种途径获取UnionID。</p><p>1、调用接口wx.getUserInfo，从解密数据中获取UnionID。注意本接口需要用户授权，请开发者妥善处理用户拒绝授权后的情况。</p><p>2、如果开发者帐号下存在同主体的公众号，并且该用户已经关注了该公众号。开发者可以直接通过wx.login获取到该用户UnionID，无须用户再次授权。</p><p>3、如果开发者帐号下存在同主体的公众号或移动应用，并且该用户已经授权登录过该公众号或移动应用。开发者也可以直接通过wx.login获取到该用户UnionID，无须用户再次授权。</p><h3 id="1-2-第二步：通过code换取个人信息"><a href="#1-2-第二步：通过code换取个人信息" class="headerlink" title="1.2 第二步：通过code换取个人信息"></a>1.2 第二步：通过code换取个人信息</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前台获得了用户的授权后，我们就可以获得用户的个人信息以及unionId。</p><p>前台接口：<strong>wx.getUserInfo(Object)</strong>。</p><p><strong>注意：</strong>此接口现在经果调整之后，使用该接口将不再出现授权弹窗，需要使用<code>&lt;button open-type=&quot;getUserInfo&quot;&gt;&lt;/button&gt;</code>引导用户主动进行授权操作。详情见、查看<a href="https://developers.weixin.qq.com/community/develop/doc/000aee01f98fc0cbd4b6ce43b56c01" target="_blank" rel="noopener">官方文档</a>。</p><p><strong>Object参数说明：</strong></p><table><thead><tr><th align="center">参数名</th><th align="center">类型</th><th align="center">必填</th><th>说明</th><th align="center">最低版本</th></tr></thead><tbody><tr><td align="center">withCredentials</td><td align="center">Boolean</td><td align="center">否</td><td>是否带上登录信息</td><td align="center">1.1.0</td></tr><tr><td align="center">lang</td><td align="center">String</td><td align="center">否</td><td>指定返回用户信息的语言，zh_CN：简体中文，zh_TW：繁体中文，en：英文。默认en</td><td align="center">1.3.0</td></tr><tr><td align="center">timeout</td><td align="center">Number</td><td align="center">否</td><td>超时时间，单位ms</td><td align="center">1.9.90</td></tr><tr><td align="center">success</td><td align="center">Function</td><td align="center">否</td><td>接口调用成功的回调函数</td><td align="center"></td></tr><tr><td align="center">fail</td><td align="center">Function</td><td align="center">否</td><td>接口调用失败的回调函数</td><td align="center"></td></tr><tr><td align="center">complete</td><td align="center">Function</td><td align="center">否</td><td>接口调用结束的回调函数(调用成功、失败都会执行)</td><td align="center"></td></tr></tbody></table><blockquote><p>注：当 withCredentials 为 true 时，要求此前有调用过 wx.login 且登录态尚未过期，此时返回的数据会包含 encryptedData, iv 等敏感信息；当 withCredentials 为 false 时，不要求有登录态，返回的数据不包含 encryptedData, iv 等敏感信息。</p></blockquote><p><strong>success返回参数说明：</strong></p><table><thead><tr><th align="center">参数</th><th align="center">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">userInfo</td><td align="center">Object</td><td align="left">用户信息对象，不包括openid等敏感信息</td></tr><tr><td align="center">rawData</td><td align="center">String</td><td align="left">不包括敏感信息的原始数据字符串，用于计算签名</td></tr><tr><td align="center">signature</td><td align="center">String</td><td align="left">使用sha1( rawData + sessionkey ) 得到字符串，用于校验用户信息。</td></tr><tr><td align="center">encryptedData</td><td align="center">String</td><td align="left">包括敏感数据在内的完整用户信息的加密数据，详细见[<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/signature.html#加密数据解密算法" target="_blank" rel="noopener">用户数据的签名验证和加解密</a></td></tr><tr><td align="center">iv</td><td align="center">String</td><td align="left">加密算法的初始向量，详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/signature.html#加密数据解密算法" target="_blank" rel="noopener">用户数据的签名验证和加解密</a></td></tr></tbody></table><h2 id="2-代码解析"><a href="#2-代码解析" class="headerlink" title="2. 代码解析"></a>2. 代码解析</h2><h3 id="2-1-微信端代码"><a href="#2-1-微信端代码" class="headerlink" title="2.1 微信端代码"></a>2.1 微信端代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义的登录方法，判断用户登录，是否授权</span></span><br><span class="line">login: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span></span><br><span class="line">    wx.login(&#123;</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//获取登录凭证</span></span><br><span class="line">            <span class="keyword">var</span> code = r.code; </span><br><span class="line">            <span class="keyword">if</span> (code) &#123;</span><br><span class="line">                <span class="comment">// 获取用户设置信息</span></span><br><span class="line">                wx.getSetting(&#123;</span><br><span class="line">                    success: <span class="function"><span class="keyword">function</span> (<span class="params">re</span>) </span>&#123;</span><br><span class="line">                        <span class="comment">// 判断用户是否授权</span></span><br><span class="line">                        <span class="keyword">if</span> (re.authSetting[<span class="string">'scope.userInfo'</span>]) &#123;</span><br><span class="line">                            <span class="comment">// 已经授权了，就进行后台用户数据写入</span></span><br><span class="line">                            that.register(code)</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">//未授权，跳转到登录页面</span></span><br><span class="line">                            wx.redirectTo(&#123;</span><br><span class="line">                                url:<span class="string">'XXX/XXX'</span>,</span><br><span class="line">                            &#125;)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"获取用户登录状态失败！"</span> + r.errMsg)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        fail: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"登录失败"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取到用户的登录授权，请求后台，进行用户信息的操作</span></span><br><span class="line">register: <span class="function"><span class="keyword">function</span> (<span class="params">code</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//2.调用获取用户信息接口</span></span><br><span class="line">    wx.getUserInfo(&#123;</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//3.请求自己的服务器，解密用户信息，获取unionld等加密信息</span></span><br><span class="line">            wx.request(&#123;</span><br><span class="line">                url: <span class="string">'XXX/login.do'</span>,<span class="comment">//自己后台服务器接口地址</span></span><br><span class="line">                method: <span class="string">'POST'</span>, <span class="comment">//请求方式</span></span><br><span class="line">                <span class="comment">// 请求头消息</span></span><br><span class="line">                header: &#123;</span><br><span class="line">                    <span class="string">'content-type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">// 请求接口时传的参数</span></span><br><span class="line">                data: &#123;</span><br><span class="line">                    encryptedData: res.encryptedData,<span class="comment">//加密数据</span></span><br><span class="line">                    iv: res.iv,<span class="comment">//加密算法的初使向量</span></span><br><span class="line">                    code: code<span class="comment">//登录凭证</span></span><br><span class="line">                &#125;,</span><br><span class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">//4.解密成功后，获取自己服务器返回的结果</span></span><br><span class="line">                    <span class="keyword">if</span> (data.data.status == <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="comment">// 解密成功之后更换登录状态</span></span><br><span class="line">                        app.globalData.checkLogin = <span class="literal">true</span></span><br><span class="line">                        <span class="comment">// 接收请求数据</span></span><br><span class="line">                        <span class="keyword">var</span> userInfo_ = data.data.userInfo;</span><br><span class="line">                        <span class="comment">// 设置用户信息</span></span><br><span class="line">                        app.globalData.userInfo = userInfo_;</span><br><span class="line">                        app.globalData.openId = userInfo_.openId</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"用户信息："</span>, userInfo_);</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">//由于这里是网络请求，可能会在 Page.onLoad 之后才返回</span></span><br><span class="line">                        <span class="comment">// 所以此处加入 callback 以防止这种情况</span></span><br><span class="line">                        <span class="keyword">if</span> (app.checkLoginReadyCallback) &#123;</span><br><span class="line">                            app.checkLoginReadyCallback(data);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"解密失败"</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                fail: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"系统错误"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        fail: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"获取用户信息失败"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="2-2-服务器端Java代码"><a href="#2-2-服务器端Java代码" class="headerlink" title="2.2 服务器端Java代码"></a>2.2 服务器端Java代码</h3><p>控制层：WXLoginController .java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> util.HttpRequest;<span class="comment">//自定义的网络请求的工具类(见下)</span></span><br><span class="line"><span class="keyword">import</span> util.RegisterUser;<span class="comment">//自定义的注册的工具类</span></span><br><span class="line"><span class="keyword">import</span> util.AesCbcUtil;<span class="comment">//自定义的AES解密工具类(见下)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>:范秉洋</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>:2019/8/25 17:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WXLoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/login.do"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">decodeUserInfo</span><span class="params">(String encryptedData,String iv,String code)</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//登录凭证不能为空</span></span><br><span class="line">        <span class="keyword">if</span>(code == <span class="keyword">null</span> || code.length() == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            map.put(<span class="string">"status"</span>,<span class="number">0</span>);</span><br><span class="line">            map.put(<span class="string">"msg"</span>,<span class="string">"code不能为空"</span>);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//小程序唯一标识(在微信小程序管理后台获取)</span></span><br><span class="line">        String wxspAppid = <span class="string">"XXXXXXXXX"</span>;</span><br><span class="line">        <span class="comment">//小程序的app secret(在微信小程序管理后台获取)</span></span><br><span class="line">        String wxspSecret = <span class="string">"XXXXXXXXX"</span>;</span><br><span class="line">        <span class="comment">//授权(必填)</span></span><br><span class="line">        String grant_type = <span class="string">"authorization_code"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//********1.向微信服务器使用登录凭证code获取session_key和openid****************//</span></span><br><span class="line">        <span class="comment">//拼接请求参数</span></span><br><span class="line">        String params = <span class="string">"appid="</span>+wxspAppid + <span class="string">"&amp;secret="</span>+wxspSecret </span><br><span class="line">            + <span class="string">"&amp;js_code="</span>+code + <span class="string">"&amp;grant_type="</span>+grant_type;</span><br><span class="line">        <span class="comment">//请求的URL</span></span><br><span class="line">        String url = <span class="string">"https://api.weixin.qq.com/sns/jscode2session"</span>;</span><br><span class="line">        <span class="comment">//通过请求工具类发送请求</span></span><br><span class="line">        String sr = HttpRequest.sendGet(url,params);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析相应内容(转换成json对象)</span></span><br><span class="line">        JSONObject json = <span class="keyword">new</span> JSONObject(sr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取会话密钥(session_key)</span></span><br><span class="line">        String session_key = json.get(<span class="string">"session_key"</span>).toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户的唯一标识(openid)</span></span><br><span class="line">        String openid = (String)json.get(<span class="string">"openid"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//*********2.对encryptedData加密数据进行AES解密***************************//</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 根据加密数据，加密算法初始向量和session_key(密钥)通过AES解密工具类进行解密</span></span><br><span class="line">            String result = AesCbcUtil.decrypt(encryptedData,session_key,iv,<span class="string">"UTF-8"</span>);</span><br><span class="line"><span class="comment">// 如果解密的结果不为空或者长度大于0，则解密成功</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">null</span> != result &amp;&amp; result.length() &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                map.put(<span class="string">"status"</span>,<span class="number">1</span>);</span><br><span class="line">                map.put(<span class="string">"msg"</span>,<span class="string">"解密成功"</span>);</span><br><span class="line"><span class="comment">// 将解密结果转换成json格式</span></span><br><span class="line">                JSONObject userInfoJSON = <span class="keyword">new</span> JSONObject(result);</span><br><span class="line">                Map userInfo = <span class="keyword">new</span> HashMap();</span><br><span class="line">                <span class="comment">//用户openId</span></span><br><span class="line">                userInfo.put(<span class="string">"openId"</span>,userInfoJSON.get(<span class="string">"openId"</span>));</span><br><span class="line">                <span class="comment">//用户昵称</span></span><br><span class="line">                userInfo.put(<span class="string">"nickName"</span>,userInfoJSON.get(<span class="string">"nickName"</span>));</span><br><span class="line">                <span class="comment">//用户性别，0：未知，1：男；2：女。</span></span><br><span class="line">                userInfo.put(<span class="string">"gender"</span>,userInfoJSON.get(<span class="string">"gender"</span>));</span><br><span class="line">                <span class="comment">//用户所在城市</span></span><br><span class="line">                userInfo.put(<span class="string">"city"</span>,userInfoJSON.get(<span class="string">"city"</span>));</span><br><span class="line">                <span class="comment">//用户所在省份</span></span><br><span class="line">                userInfo.put(<span class="string">"province"</span>,userInfoJSON.get(<span class="string">"province"</span>));</span><br><span class="line">                <span class="comment">//用户所在国家</span></span><br><span class="line">                userInfo.put(<span class="string">"country"</span>,userInfoJSON.get(<span class="string">"country"</span>));</span><br><span class="line">                <span class="comment">//用户头像地址</span></span><br><span class="line">                userInfo.put(<span class="string">"avatarUrl"</span>,userInfoJSON.get(<span class="string">"avatarUrl"</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">//注册验证，如果是首次登录，将信息通过注册工具类写入数据库，如果不是，则进行信息更新</span></span><br><span class="line">                <span class="comment">//这个就不在给出具体代码，根据个人的具体情况进行将用户信息封装好写入数据库</span></span><br><span class="line">                RegisterUser.Register(userMapper,userInfoJSON);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//解密unionId &amp; openId</span></span><br><span class="line">                <span class="comment">//这个信息是只给符合条件的用户下发,如不符合,则没有这个数据,</span></span><br><span class="line">                <span class="comment">//在调用时需要做相应的判断,否则直接取值会报错,</span></span><br><span class="line">                <span class="keyword">if</span>(!userInfoJSON.isNull(<span class="string">"unionId"</span>))&#123;</span><br><span class="line">                    userInfo.put(<span class="string">"unionID"</span>,userInfoJSON.get(<span class="string">"unionId"</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                map.put(<span class="string">"userInfo"</span>,userInfo);</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(<span class="string">"status"</span>,<span class="number">0</span>);</span><br><span class="line">                map.put(<span class="string">"msg"</span>,<span class="string">"解密失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将结果返回给微信端</span></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网络请求工具类：HttpRequest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>:范秉洋</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>:2019/8/25 17:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpRequest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向指定url发送GTE方法的请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url   发送请求的url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param   请求参数，参数形式是name1=value1&amp;name2=value2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> URL  所代表远程资源的响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sendGet</span><span class="params">(String url,String param)</span></span>&#123;</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            String urlNameString = url + <span class="string">"?"</span> + param;</span><br><span class="line">            URL realUrl = <span class="keyword">new</span> URL(urlNameString);</span><br><span class="line">            <span class="comment">//打开和URL之间的链接</span></span><br><span class="line">            URLConnection connection = realUrl.openConnection();</span><br><span class="line">            <span class="comment">//设置通用的请求属性</span></span><br><span class="line">            connection.setRequestProperty(<span class="string">"accept"</span>,<span class="string">"*/*"</span>);</span><br><span class="line">            connection.setRequestProperty(<span class="string">"connection"</span>,<span class="string">"Keep-Alive"</span>);</span><br><span class="line">            connection.setRequestProperty(<span class="string">"user-agent"</span>,<span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//建立实际的链接</span></span><br><span class="line">            connection.connect();</span><br><span class="line">            <span class="comment">//获取所用响应头字段</span></span><br><span class="line">            Map&lt;String, List&lt;String&gt;&gt; map = connection.getHeaderFields();</span><br><span class="line">            <span class="comment">//遍历所有的响应头字段</span></span><br><span class="line">            <span class="comment">//for(String key:map.keySet())&#123;</span></span><br><span class="line">            <span class="comment">//    System.out.println(key + "---&gt;" + map.get(key));</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">            <span class="comment">//定义BufferedReader输入流来读取URL的响应</span></span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(connection.getInputStream()));</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = in.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                result += line;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"发送GET请求出现异常！"</span> + e);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用finally块来关闭输入流</span></span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(in != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向指定url发送POST方法的请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url   发送请求的url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param   请求参数，参数形式是name1=value1&amp;name2=value2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> URL  所代表远程资源的响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sendPost</span><span class="params">(String url,String param)</span></span>&#123;</span><br><span class="line">        PrintWriter out = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            URL realURl = <span class="keyword">new</span> URL(url);</span><br><span class="line">            <span class="comment">//打开和URL之间的链接</span></span><br><span class="line">            URLConnection conn = realURl.openConnection();</span><br><span class="line">            <span class="comment">//设置通用的请求属性</span></span><br><span class="line">            conn.setRequestProperty(<span class="string">"accept"</span>,<span class="string">"*/*"</span>);</span><br><span class="line">            conn.setRequestProperty(<span class="string">"connection"</span>,<span class="string">"Keep-Alive"</span>);</span><br><span class="line">            conn.setRequestProperty(<span class="string">"user-agent"</span>,<span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)"</span>);</span><br><span class="line">            <span class="comment">//发送POST请求必须设置如下两行</span></span><br><span class="line">            conn.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">            conn.setDoInput(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//获取URLConnection对象对应的输入流</span></span><br><span class="line">            out = <span class="keyword">new</span> PrintWriter((conn.getOutputStream()));</span><br><span class="line">            <span class="comment">//发送请求参数</span></span><br><span class="line">            out.print(param);</span><br><span class="line">            <span class="comment">//flush输出流的缓冲</span></span><br><span class="line">            out.flush();</span><br><span class="line">            <span class="comment">//定义BufferedReader输入流来读取URL的响应</span></span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(conn.getInputStream()));</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span>((line = in.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                result += line;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"发送POST请求出现异常！"</span> + e);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(out != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(in != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException ex)&#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AES解密工具类：AesCbcUtil.java</p><blockquote><p>注意：重点标识的这个jar包commons.codec.jar，需要根据自己的jdk版本做对应的引入，我的是1.8的jdk，引入的是1.6的版本。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.BadPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.IllegalBlockSizeException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.IvParameterSpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.security.AlgorithmParameters;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidAlgorithmParameterException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.Security;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.InvalidParameterSpecException;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.jce.provider.BouncyCastleProvider;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>:范秉洋</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>:2019/8/25 17:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AesCbcUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//BouncyCastle是一个开源的加解密解决方案，主页在http://www.bouncycastle.org/</span></span><br><span class="line">        Security.addProvider(<span class="keyword">new</span> BouncyCastleProvider());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data           //密文，被加密的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key            //秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> iv             //偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encodingFormat //解密后的结果需要进行的编码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(String data, String key, String iv, String encodingFormat)</span> <span class="keyword">throws</span> Exception </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="comment">//被加密的数据</span></span></span><br><span class="line"><span class="function">        <span class="keyword">byte</span>[] dataByte </span>= Base64.decodeBase64(data);</span><br><span class="line">        <span class="comment">//加密秘钥</span></span><br><span class="line">        <span class="keyword">byte</span>[] keyByte = Base64.decodeBase64(key);</span><br><span class="line">        <span class="comment">//偏移量</span></span><br><span class="line">        <span class="keyword">byte</span>[] ivByte = Base64.decodeBase64(iv);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Cipher cipher = Cipher.getInstance(<span class="string">"AES/CBC/PKCS7Padding"</span>);</span><br><span class="line"></span><br><span class="line">            SecretKeySpec spec = <span class="keyword">new</span> SecretKeySpec(keyByte, <span class="string">"AES"</span>);</span><br><span class="line"></span><br><span class="line">            AlgorithmParameters parameters = AlgorithmParameters.getInstance(<span class="string">"AES"</span>);</span><br><span class="line">            parameters.init(<span class="keyword">new</span> IvParameterSpec(ivByte));</span><br><span class="line"></span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, spec, parameters);<span class="comment">// 初始化</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] resultByte = cipher.doFinal(dataByte);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != resultByte &amp;&amp; resultByte.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                String result = <span class="keyword">new</span> String(resultByte, encodingFormat);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidParameterSpecException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidAlgorithmParameterException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以上就是关于小程序登录过程的解析，最主要的就是通过用户授权之后获取用户的加密信息，通过加密数据、加密算法初始向量和登录凭证在后台进行解密，从而获得用户的完成信息，之后在进行开发者的逻辑操作对用户的个人信息进行操作和处理。上面提到的还有一点就是<code>wx.getUserInfo(Object)</code>方法不会在自动弹出授权窗口了，需要开发者自定义登录按钮来引导用户进行登录授权。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;之前没事写了一个微信小程序玩，刚起步就碰壁，因为要获取用户授权，然后请求用户的个人信息，由于微信官方api的更改,&lt;code&gt;wx.getUserInfo()&lt;/code&gt;方法无法在无授权的情况下直接使用，而且只能获取到基本的一些微信用户的信息，不包含我们需要的&lt;code&gt;openId&lt;/code&gt;以及&lt;code&gt;unionId&lt;/code&gt;。几经折腾，才把这个第一步给迈过去，来记录一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="微信小程序" scheme="http://yoursite.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python程序打包成exe文件</title>
    <link href="http://yoursite.com/2020/02/03/Python%E7%A8%8B%E5%BA%8F%E6%89%93%E5%8C%85%E6%88%90exe%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2020/02/03/Python程序打包成exe文件/</id>
    <published>2020-02-03T02:45:31.000Z</published>
    <updated>2020-02-03T05:32:24.251Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Python作为现在一门很火的编程语言，无论是不是计算机专业的都有爱好者在学习。我们一般写的Python程序，都是只能在我们自己电脑上进行运行，有时候想分享给小伙伴用一下，但是不是每个小伙伴电脑上都安装有运行Pythonde环境。这个时候我们可以将我们的写好的Python程序打包成exe文件发送给小伙伴，无论对方电脑是有没有Python环境，都可以直接双击运行。下面以Windows环境记录一下打包过程。</p><a id="more"></a><h1 id="Python程序打包成exe文件"><a href="#Python程序打包成exe文件" class="headerlink" title="Python程序打包成exe文件"></a>Python程序打包成exe文件</h1><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>PyInstaller</strong> 是一个十分有用的第三方库，可以用来打包 python 应用程序，打包完的程序就可以在没有安装 Python 解释器的机器上运行了。它能够在 Windows、Linux、 Mac OS X 等操作系统下将 Python 源文件打包，通过对源文件打包， Python 程序可以在没有安装 Python 的环境中运行，也可以作为一个 独立文件方便传递和管理。PyInstaller 支持 Python 2.7 / 3.4-3.7。可以在 Windows、Mac OS X 和 Linux 上使用，但是并不是跨平台的，而是说你要是希望打包成 .exe 文件，需要在 Windows 系统上运行 PyInstaller 进行打包工作。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装PyInstaller</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install pyintaller</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">python -m pip install pyinstaller</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装成功如下。</p><p><img src="%E5%AE%89%E8%A3%85pyinstaller.png" alt="安装成功"></p><h2 id="2-打包EXE"><a href="#2-打包EXE" class="headerlink" title="2. 打包EXE"></a>2. 打包EXE</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先进入cmd，进入到你的python文件的目录下,执行命令如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller [参数] xxx.py</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;参数说明</p><ul><li><strong>-i：</strong>添加一个应用图标，ico文件。(只对Windows系统有效)。</li><li><strong>-F：</strong>打包成单独的<code>.exe</code>文件。</li><li><strong>-W：</strong>无控制台运行界面。</li><li><strong>-D：</strong>创建一个目录，里面包含exe以及其他一下依赖性文件</li><li>注：<strong>pyinstaller -h</strong>：查看参数。</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我的是hello.py程序，执行下面操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F hello.py</span><br></pre></td></tr></table></figure><p><img src="%E6%89%93%E5%8C%85exe.png" alt="打包exe"></p><p><strong>PyInstaller</strong>会对脚本进行解析，解析过程如下：</p><p>1、在脚本目录生成hello.spec文件；</p><p>2、创建一个build目录；</p><p>3、写入一个日志文件和中间流程文件到build目录；</p><p>4、创建dist目录；</p><p>5、生成可执行文件到dist目录。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;执行完成之后就可以在dist目录下找到我们打包好的<code>exe</code>文件，双击就可以直接运行了。</p><p><img src="%E8%BF%90%E8%A1%8C.png" alt="运行"></p><h2 id="3-引入外部文件"><a href="#3-引入外部文件" class="headerlink" title="3. 引入外部文件"></a>3. 引入外部文件</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;按照以上步骤打包exe的话，当你的代码中需要调用一些图片和资源文件的，这是不会自动导入的，需要你自己手动复制进去才行。不然 exe 文件运行时命令窗口会报错找不到这个文件。</p><p>导入方法：假设<code>hello.py</code>程序中需要引入一个<code>test.txt</code>文件，<code>test.txt</code>文件和<code>hello.py</code>文件位于同一路径下。首先我们运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyi-makespaec -F hello.py</span><br></pre></td></tr></table></figure><p>此时会生成一个<code>.spec</code>，这个文件会告诉pyinstaller如何处理你的脚本，pyinstaller创建一个exe的文件就是依靠它里面的内容进行执行的。正常情况下是不需要修改这个<code>.spec</code>文件的，除非你需要打包一个 dll 或者 so 文件或者其他数据文件。</p><p>接下来我们就修改这个<code>.spec</code>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = Analysis([&apos;hello.py&apos;],</span><br><span class="line">             pathex=[&apos;G:\\CodeSpace&apos;],</span><br><span class="line">             binaries=[],</span><br><span class="line">             datas=[],   ### &lt;------ 修改</span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = Analysis([&apos;hello.py&apos;],</span><br><span class="line">             pathex=[&apos;G:\\CodeSpace&apos;],</span><br><span class="line">             binaries=[],</span><br><span class="line">             datas=[(&apos;test.txt&apos;,&apos;.&apos;),],  ### &lt;-----修改此处添加外部文件</span><br></pre></td></tr></table></figure><p>然后再生成<code>exe</code>文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller hello.spec</span><br></pre></td></tr></table></figure><p>这样生成的<code>exe</code>文件就可以正常引入外部文件了。</p><h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、直接运行最终的 .exe 程序，可能会出现<strong>一闪而过</strong>的情况，这种情况下要么是程序运行结束（比如直接打印的 helloWorld），要么程序出现错误退出了。这种情况下，建议在命令行 cmd 下运行 .exe 文件，这时就会有文本输出到窗口。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、<code>-i</code> 是改变图标的，图标在不同情况下(比如资源管理器文件列表前面的图标、桌面、开始菜单等)需要不一样尺寸的图标。如果尺寸不合适的话，可能出现有的地方显示正确有的显示不正确的情况。Windows的图标大小尺寸有128<em>128、64</em>64、48<em>48、32</em>32、16*16，请正确选用。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3、写代码的时候应当有个良好的习惯，用什么函数导什么函数，不要上来 import 整个库，不然最后你会发现你一个 100KB 的代码打包出来有 500MB；</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4、在引入外部文件时，如果需要引入多个文件，<code>.spec</code>文件修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = Analysis([&apos;hello.py&apos;],</span><br><span class="line">             pathex=[&apos;G:\\CodeSpace&apos;],</span><br><span class="line">             binaries=[],</span><br><span class="line">             datas=[(&apos;test_1.txt&apos;,&apos;.&apos;),(&apos;test_2.txt&apos;,&apos;.&apos;),(&apos;XXX/test_3.txt,&apos;.&apos;),],</span><br></pre></td></tr></table></figure><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以上就是使用PyInstaller打包流程进行简单的介绍和使用，更多内容可以参见官方文档：<a href="https://pyinstaller.readthedocs.io" target="_blank" rel="noopener">https://pyinstaller.readthedocs.io</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Python作为现在一门很火的编程语言，无论是不是计算机专业的都有爱好者在学习。我们一般写的Python程序，都是只能在我们自己电脑上进行运行，有时候想分享给小伙伴用一下，但是不是每个小伙伴电脑上都安装有运行Pythonde环境。这个时候我们可以将我们的写好的Python程序打包成exe文件发送给小伙伴，无论对方电脑是有没有Python环境，都可以直接双击运行。下面以Windows环境记录一下打包过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot项目部署到服务器</title>
    <link href="http://yoursite.com/2019/12/23/SpringBoot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2019/12/23/SpringBoot项目部署到服务器/</id>
    <published>2019-12-23T06:20:01.000Z</published>
    <updated>2019-12-23T08:31:12.596Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在之前的博客当中，写了一些关于SpringBoot的使用，今天主要写的就是怎么样将自己写的SpringBoot项目部署到云服务器上。只有将项目部署到了服务器上，项目才能一直运行，并且只要在有互联网就能随时随地的的访问项目。</p><h1 id="SpringBoot项目部署到服务器"><a href="#SpringBoot项目部署到服务器" class="headerlink" title="SpringBoot项目部署到服务器"></a>SpringBoot项目部署到服务器</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在部署之前呢，先要再简单了解一下SpringBoot项目的运行。因为SpringBoot框架默认自带了一个嵌入式的Tomcat服务器，所以可以通过自带的服务器以jar包的方法运行，也可以将SpringBoot项目打包成一个war包，部署到服务器的Tomcat上运行。以下是对两种运行方式部署到服务器上进行详解，需要注意的时，这个项目时一个maven项目。</p><h2 id="1-使用War包部署"><a href="#1-使用War包部署" class="headerlink" title="1 使用War包部署"></a>1 使用War包部署</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 使用war包部署，就只需要将项目打包，部署到服务器Tomcat下即可运行，不过在打包之前，需要对项目做一些简单的修改，步骤如下。</p><h3 id="1-1-修改pom-xml文件"><a href="#1-1-修改pom-xml文件" class="headerlink" title="1.1 修改pom.xml文件"></a>1.1 修改pom.xml文件</h3><p>打开项目的pom.xml配置文件，SpringBoot默认的打包方式是jar包，将打包方式设置为war。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-修改启动类"><a href="#1-2-修改启动类" class="headerlink" title="1.2 修改启动类"></a>1.2 修改启动类</h3><p>对于启动类，需要重写初始化方法：继承SpringBootServletInitializer，重写configure函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilmManageApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.configure(builder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(FilmManageApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-去除自带的Tomcat"><a href="#1-3-去除自带的Tomcat" class="headerlink" title="1.3 去除自带的Tomcat"></a>1.3 去除自带的Tomcat</h3><p>方法：需要将嵌入的Tomcat依赖方式改成provide(编译、测试时将依赖的包加入本工程的classpath，运行时不加入。可以理解成运行时不适使用SpringBoot自带的Tomcat)。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-加入servlet-api依赖"><a href="#1-4-加入servlet-api依赖" class="headerlink" title="1.4 加入servlet-api依赖"></a>1.4 加入servlet-api依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-打包"><a href="#1-5-打包" class="headerlink" title="1.5 打包"></a>1.5 打包</h3><p>点击IDEA右侧的Maven，双击package打包，注意打包时跳过测试，再target目录下生成war包文件。</p><p><img src="%E6%89%93%E5%8C%85war.png" alt="打包war"></p><h3 id="1-6-部署"><a href="#1-6-部署" class="headerlink" title="1.6 部署"></a>1.6 部署</h3><p>将打包好的war包文件放到云服务器<strong>Tomcat的webapps目录</strong>下，启动Tomcat(在bin目录下执行./startup.sh)，即可自动解压部署。</p><h3 id="1-7-测试"><a href="#1-7-测试" class="headerlink" title="1.7 测试"></a>1.7 测试</h3><p>项目部署好之后，打开浏览器输入服务器地址:端口号/项目jar包名/主页。</p><p><img src="%E6%B5%8B%E8%AF%95war.png" alt="测试"></p><h3 id="1-8-说明"><a href="#1-8-说明" class="headerlink" title="1.8 说明"></a>1.8 说明</h3><ol><li><p>由于war包部署不使用SpringBoot自带的Tomcat，所以application.yml文件下的server配置将不会再起作用，故服务器默认Tomcat端口号时<strong>8080</strong>。想要修改端口号可以到Tomcat下的<strong>server.xml</strong>文件进行修改。路径输入的是项目war包的名称。</p></li><li><p>默认情况下，项目路径是war包或jar包的名称，如果想要修改的话，可以再Tomcat里的<strong>server.xml</strong>文件中加上</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">"MyProject.war"</span> <span class="attr">path</span>=<span class="string">"/demo"</span> <span class="attr">reloadable</span>=<span class="string">"true"</span> <span class="attr">debug</span>=<span class="string">"0"</span> <span class="attr">privileged</span>=<span class="string">"true"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输入地址时就可以直接用demo代替MyProject。</p></li><li><p>注意：如果在server.xml中加了以上语句的话，那么需要特别注意的就是，该项目的war包不能被删除，否则Tomcat将无法启动。</p></li></ol><h2 id="2-使用Jar包部署"><a href="#2-使用Jar包部署" class="headerlink" title="2 使用Jar包部署"></a>2 使用Jar包部署</h2><h3 id="2-1-打包"><a href="#2-1-打包" class="headerlink" title="2.1 打包"></a>2.1 打包</h3><p>​        首先，如果没有在pom.xml文件中修改默认的package的话，默认的就是以jar方式打包。然后点击IDEA右侧的Maven，跳过测试，package打包。</p><p><img src="%E6%89%93%E5%8C%85jar.png" alt="打包jar"></p><h3 id="2-2-部署"><a href="#2-2-部署" class="headerlink" title="2.2 部署"></a>2.2 部署</h3><p>​        之后在target目录下找到打包之后的jar文件，然后通过工具上传至云服务器。</p><h3 id="2-3-运行"><a href="#2-3-运行" class="headerlink" title="2.3 运行"></a>2.3 运行</h3><p>​        如果服务器是windows server桌面版的，将jar包上传之后，可以直接双击jar包运行，不过关闭时需要到任务管理器关闭改任务。</p><p>​         如果是Linux版本的服务器，那么上传之后，在jar包所在的目录下，输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar XXX.jar</span><br></pre></td></tr></table></figure><p>​        如果想指定运行端口也可以，输入以下命令。不过个人觉得没有必要，因为已经在配置文件里指定项目端口了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar XXX.jar --server.port=8088</span><br></pre></td></tr></table></figure><p>​        输入命令回车，就会出现如图所示，程序已经启动。</p><p><img src="%E8%BF%90%E8%A1%8Cjar.png" alt="运行jar"></p><h3 id="2-4-测试"><a href="#2-4-测试" class="headerlink" title="2.4 测试"></a>2.4 测试</h3><p>​        之后在浏览器中输入服务器地址:在application.yml中设置的端口号/jar包名称/主页。</p><p><img src="%E6%B5%8B%E8%AF%95jar.png" alt="测试jar"></p><h3 id="2-5-说明"><a href="#2-5-说明" class="headerlink" title="2.5 说明"></a>2.5 说明</h3><p>​        利用上面所说的方式，关闭远程端口程序就会自动退出，如果需要后台运行，可以使用下列命令进行部署。</p><p><strong>&lt;1&gt;首次部署</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar XXX.jar &gt;temp.text &amp;</span><br><span class="line">//退出 ctrl+c</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>nohup：当账户退出或者终端关闭时，程序仍然运行。</li><li>&amp;：客户端关闭，后台停止运行。</li><li>temp.text 是存控制台文件。缺省情况下该作业的所有的输出内容被重定向到nohup.out的文件中。</li><li>使用tail -f temp.text实时查看控制台文件。ctrl+z返回命令行。</li></ul><p>可通过<code>jobs</code>命令列出所有后台运行任务，并且每个作业前面都有编号，如果想将某个作业调回前台控制，只需要<code>fg + 编号</code>即可。</p><p><strong>&lt;2&gt;非首次部署</strong></p><p>非首次部署当前程序需要在对应的文件夹中执行以下命令：</p><p>a.捕获上一个版本程序的进程 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep XXX.jar</span><br></pre></td></tr></table></figure><p>b.杀死对应的进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill 进程号</span><br></pre></td></tr></table></figure><p>c.启动程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar XXX.jar &gt;temp.text &amp;</span><br></pre></td></tr></table></figure><p>d.退出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl + c</span><br></pre></td></tr></table></figure><p>e.查看日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -500f temp.text</span><br></pre></td></tr></table></figure><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以上就是将SpringBoot项目部署到云服务器的全部过程，简单总结就是jar包部署方式使用SpringBoot自带的Tomcta，所以可以直接在服务器运行jar文件。war包部署方式则使用云服务器里的Tomcat，此时需要将SpringBoot自带的Tomcat移除，并在打包时对项目进行一点小的修改。同时要注意的就是两种部署方式的访问路径的差异，就是端口的不同，一个使用application.yml里配置的端口，一个使用Tomcat默认的端口号。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在之前的博客当中，写了一些关于SpringBoot的使用，今天主要写的就是怎么样将自己写的SpringBoot项目部署到云服务器上。只有将项目部署到了服务器上，项目才能一直运行，并且只要在有
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="服务器" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Docker初使用</title>
    <link href="http://yoursite.com/2019/11/11/Docker%E5%88%9D%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/11/11/Docker初使用/</id>
    <published>2019-11-11T14:41:06.000Z</published>
    <updated>2020-02-05T04:19:26.847Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近准备入坑docker，被各种安利说好用，我也准备亲自尝试一下了，但是网上那些零零散散的东西并不是一个完整的教程，官方文档看的也晕晕乎乎的，那就自以一点点踩坑，然后自己做个详细的入门笔记吧。</p><a id="more"></a><h1 id="Docker初使用"><a href="#Docker初使用" class="headerlink" title="Docker初使用"></a>Docker初使用</h1><h2 id="1-Dcoker"><a href="#1-Dcoker" class="headerlink" title="1. Dcoker"></a>1. Dcoker</h2><h3 id="1-1-什么是Docker"><a href="#1-1-什么是Docker" class="headerlink" title="1.1 什么是Docker"></a>1.1 什么是Docker</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Docker</strong>是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p><h3 id="1-2-Docker的应用场景"><a href="#1-2-Docker的应用场景" class="headerlink" title="1.2 Docker的应用场景"></a>1.2 Docker的应用场景</h3><ul><li>Web 应用的自动化打包和发布。</li><li>自动化测试和持续集成、发布。</li><li>在服务型环境中部署和调整数据库或其他的后台应用。</li><li>从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。</li></ul><h3 id="1-3-Docker的优势"><a href="#1-3-Docker的优势" class="headerlink" title="1.3 Docker的优势"></a>1.3 Docker的优势</h3><ul><li>快速，一致地交付您的应用程序</li><li>响应式部署和扩展</li><li>在同一硬件上运行更多工作负载</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们可以从下面这张表格很清楚地看到容器相比于传统虚拟机的特性的优势所在：</p><table><thead><tr><th align="center">特性</th><th align="center">容器</th><th align="center">虚拟机</th></tr></thead><tbody><tr><td align="center">启动</td><td align="center">秒级</td><td align="center">分钟级</td></tr><tr><td align="center">硬盘使用</td><td align="center">一般为MB</td><td align="center">一般为GB</td></tr><tr><td align="center">性能</td><td align="center">接近原生</td><td align="center">弱于</td></tr><tr><td align="center">系统支持量</td><td align="center">单机支持上千个容器</td><td align="center">一般是几十个</td></tr></tbody></table><h3 id="1-4-Docker架构"><a href="#1-4-Docker架构" class="headerlink" title="1.4 Docker架构"></a>1.4 Docker架构</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Docker包括三个基本概念分别是<strong>Image</strong>(镜像)、<strong>Container</strong>(容器)和<strong>Repository</strong>(仓库)。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Image(镜像)</strong>：Docker镜像就相当于是一个root文件系统，就是一堆只读层(read-only layer)的统一视角。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。<br><img src="Docker%E9%95%9C%E5%83%8F.png" alt="镜像"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Container(容器)</strong>：容器(container)的定义和镜像(image)几乎一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的。由于容器的定义并没有提及是否要运行容器，所以实际上，容器 = 镜像 + 读写层。<br>镜像(Image)和容器(Container)的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。<br><img src="Docker%E5%AE%B9%E5%99%A8.png" alt="容器"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Repository(仓库)</strong>：仓库可看着一个代码控制中心，用来保存镜像。通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本 。我们可以通过&lt;仓库名&gt;:&lt;标签&gt;的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以latest作为默认标签。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Docker使用客户端-服务器(C/S)架构模式，使用远程API来管理和创建Docker容器。Docker容器通过Docker镜像来创建。容器与镜像的关系类似于面向对象编程中的对象与类。Docker 客户端与 Docker 服务器进行交互，Docker服务端负责构建、运行和分发Docker镜像。Docker客户端和服务端可以运行在一台机器上，也可以通过RESTful、stock或网络接口与远程Docker服务端进行通信。</p><table><thead><tr><th align="left">Docker</th><th>面向对象</th></tr></thead><tbody><tr><td align="left">容器</td><td>对象</td></tr><tr><td align="left">镜像</td><td>类</td></tr></tbody></table><p><img src="Docker%E6%9E%B6%E6%9E%84.png" alt="架构"></p><table><thead><tr><th align="left">概念</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Docker 镜像(Images)</td><td align="left">Docker 镜像是用于创建 Docker 容器的模板，比如 Ubuntu 系统。</td></tr><tr><td align="left">Docker 容器(Container)</td><td align="left">容器是独立运行的一个或一组应用，是镜像运行时的实体。</td></tr><tr><td align="left">Docker 客户端(Client)</td><td align="left">Docker 客户端通过命令行或者其他工具使用 <a href="https://docs.docker.com/develop/sdk/" target="_blank" rel="noopener" title="Docker SDK">Docker SDK</a> 与 Docker 的守护进程通信。</td></tr><tr><td align="left">Docker 主机(Host)</td><td align="left">一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。</td></tr><tr><td align="left">Docker 仓库(Registry)</td><td align="left">Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。<a href="https://hub.docker.com" target="_blank" rel="noopener" title="Docker Hub">Docker Hub</a> 提供了庞大的镜像集合供使用。一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 &lt;仓库名&gt;:&lt;标签&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。</td></tr><tr><td align="left">Docker Machine</td><td align="left">Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。</td></tr></tbody></table><h2 id="2-安装Docker"><a href="#2-安装Docker" class="headerlink" title="2. 安装Docker"></a>2. 安装Docker</h2><h3 id="2-1-开始安装"><a href="#2-1-开始安装" class="headerlink" title="2.1 开始安装"></a>2.1 开始安装</h3><p>由于apt官方库的docker版本可能比较旧，所以先卸载可能存在的旧版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove docker docker-engine docker-ce docker.io</span><br></pre></td></tr></table></figure><p>更新apt包索引：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure><p>安装以下包以使apt可以通过HTTPS使用存储库(repository):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure><p>添加Docker软件源的官方GPG密钥:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 国内源</span></span><br><span class="line"><span class="comment"># $ curl -fsSL https://mirrors.ustc.edu.cn/linux/ubuntu/gpg | sudo apt-key add -</span></span><br></pre></td></tr></table></figure><p>使用下面命令来设置stable存储库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 国内源</span></span><br><span class="line"><span class="comment"># $ sudo add-apt-repository "deb [arch=amd64] https://mirrors.ustc.edu.cn/linux/ubuntu $(lsb_release -cs) stable"</span></span><br></pre></td></tr></table></figure><p>再更新一下apt包索引：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure><p>安装最新版本的Docker CE：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install -y docker-ce</span><br></pre></td></tr></table></figure><blockquote><p>因为对docker操作需要的是管理员权限,所以普通用户操作时需要加上sudo命令,如果是管理员,,则正常输入命令,不用带sudo。</p></blockquote><h3 id="2-2-验证docker"><a href="#2-2-验证docker" class="headerlink" title="2.2 验证docker"></a>2.2 验证docker</h3><p>查看docker版本:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker version</span><br></pre></td></tr></table></figure><p><img src="docker%E7%89%88%E6%9C%AC.png" alt="版本"></p><p>启动docker服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>查看docker服务是否启动:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl status docker</span><br></pre></td></tr></table></figure><p><img src="docker%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81.png" alt="运行状态"></p><h2 id="3-使用Docker"><a href="#3-使用Docker" class="headerlink" title="3. 使用Docker"></a>3. 使用Docker</h2><h3 id="3-1-MySql镜像"><a href="#3-1-MySql镜像" class="headerlink" title="3.1 MySql镜像"></a>3.1 MySql镜像</h3><p>查看现有镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure><p><span id="search"></span></p><p><img src="searchMysql.png" alt="serachMysql"></p><blockquote><p><strong>name：</strong>表示名称</p><p><strong>Description：</strong>介绍说明</p><p><strong>Stars：</strong>关注度</p><p><strong>Official：</strong>是不是官方的</p><p><strong>Automated：</strong>是不是私有创建的</p></blockquote><p>拉取mysql 5.7版本的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><blockquote><p>冒号后面跟的是要拉取的版本号，如果不标明版本号，则默认拉取最新版本的。</p></blockquote><p>运行镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7</span><br></pre></td></tr></table></figure><blockquote><p><strong>-d：</strong>标识是让docker容器在后台运行。</p><p><strong>-p：</strong>标识端口映射，前面是主机对外服务端口，后面是映射到docker容器的端口。</p><p><strong>–name：</strong>定义一个容器的名字，方便后面执行操作。如果没有指定name，那么deamon会自动生成一个随机数字符串当作UUID。</p><p><strong>-e：</strong>设置环境变量或者覆盖已存在的环境变量。在此设置的是mysql的密码。</p></blockquote><p>这样就已经在docker里运行了一个mysql，可以在主机上通过可视化工具进行远程连接了。</p><h3 id="3-2-Tomcat镜像"><a href="#3-2-Tomcat镜像" class="headerlink" title="3.2 Tomcat镜像"></a>3.2 Tomcat镜像</h3><p>查询现有镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search tomcat</span><br></pre></td></tr></table></figure><p><img src="searchTomcat.png" alt="searchTomcat"></p><p>拉取tomcat 8.5版本的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docket pull tomcat:8.5</span><br></pre></td></tr></table></figure><p>查看拉取的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="images.png" alt="images"></p><p>运行tomcat镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:8080 --name mytomcat tomcat:8.5</span><br></pre></td></tr></table></figure><p>将目录下的war包部署到tomcat镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp hello.war mytomcat:/usr/<span class="built_in">local</span>/tomcat/webapps/</span><br></pre></td></tr></table></figure><blockquote><p>将war包部署到tomcat镜像就是将war包放到镜像里的wabapps文件夹里。</p><p>docker cp [war包路径] [镜像名称或镜像ID]:/usr/local/tomcat/wabapps/</p></blockquote><p>重启镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart mytomcat</span><br></pre></td></tr></table></figure><p>进入容器内部：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mytomcat /bin/bash</span><br></pre></td></tr></table></figure><blockquote><p>通过以上命令就已经进入到容器内部，进行一个交互操作，退出时执行<strong>exit</strong>就行。</p></blockquote><h2 id="4-一些常用命令"><a href="#4-一些常用命令" class="headerlink" title="4. 一些常用命令"></a>4. 一些常用命令</h2><h3 id="创建容器并运行"><a href="#创建容器并运行" class="headerlink" title="创建容器并运行"></a>创建容器并运行</h3><p><strong>语法：</strong>docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</p><p>OPTIONS说明：</p><ul><li><strong>-d：</strong>后台运行容器，并返回容器ID</li><li><strong>-i：</strong>以交互模式运行容器，通常与 -t 同时使用</li><li><strong>-P：</strong>随机端口映射，容器内部端口<strong>随机</strong>映射到主机的高端口</li><li><strong>-p：</strong>指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></li><li><strong>-t：</strong>为容器重新分配一个伪输入终端，通常与 -i 同时使用</li><li><strong>–name=“XXX”：</strong>为容器指定一个名称</li><li><strong>-h：</strong>指定容器的hostname</li><li><strong>-e：</strong>设置环境变量</li><li><strong>-m：</strong>设置容器使用内存的最大值</li><li><strong>–v：</strong>绑定一个卷</li></ul><p><strong>实例：</strong></p><p>使用docker镜像tomcat:latest以后台模式运行一个容器，将容器的8080端口映射到主机8081端口，主机目录/webapps映射到容器的/webapps目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -d -p 8081:8080/tcp --name mytomcat -v /webapps:/usr/<span class="built_in">local</span>/tomcat/webapps tomcat:latest</span><br></pre></td></tr></table></figure><h3 id="查看运行的容器："><a href="#查看运行的容器：" class="headerlink" title="查看运行的容器："></a>查看运行的容器：</h3><p><strong>语法：</strong>docker ps [OPTIONS]</p><p>OPTIONS说明：</p><ul><li><p><strong>-a：</strong>显示所有的容器，包括未运行的。</p></li><li><p><strong>-l：</strong>显示最近创建的容器</p></li><li><p><strong>-n：</strong>列出最近创建的n个容器。例：<code>docker ps -n 5</code></p></li></ul><p><strong>实例：</strong></p><p>列出所有容器信息。</p><p><img src="ps-a.png" alt="ps-a"></p><p>输出详情介绍：</p><p><strong>CONTAINER ID：</strong>容器ID</p><p><strong>IMAGE：</strong>使用的镜像</p><p><strong>COMMAND：</strong>启动镜像时运行的命令</p><p><strong>CREATED：</strong>容器的创建时间</p><p><strong>STATUS：</strong>容器状态</p><p>状态一共有7种：</p><ul><li>created (已创建)</li><li>restarting (运行中)</li><li>running (迁移中)</li><li>paused (暂停)</li><li>exited (停止)</li><li>dead (死亡)</li></ul><p><strong>PORTS：</strong>容器的端口信息和使用的连接类型(tcp\udp)</p><p><strong>NAMES：</strong>容器的名称</p><h3 id="查询现有镜像"><a href="#查询现有镜像" class="headerlink" title="查询现有镜像"></a>查询现有镜像</h3><p><strong>语法：</strong>docker search [OPTIONS] TERM</p><p>OPTIONS说明：</p><ul><li><p><strong>–automated：</strong>只列出automated build类型的镜像。</p></li><li><p><strong>–no-trunc：</strong>显示完整的镜像描述。</p></li><li><p><strong>-s：</strong>列出收藏数不小于指定值的镜像。</p></li></ul><p><strong>实例：</strong></p><p>从Docker Hub查找所有镜像名包含mysql，并且收藏数大于10的镜像。(docker search -s 10 mysql)</p><p><img src="search-s.png" alt="search-s"></p><p>具体各个<a href="#search">参数含义</a>，参看上面写的内容。</p><h3 id="启动-关闭-重启容器"><a href="#启动-关闭-重启容器" class="headerlink" title="启动/关闭/重启容器"></a>启动/关闭/重启容器</h3><p><strong>语法：</strong></p><ul><li><p><strong>启动：</strong>docker start [容器名称/容器ID]</p></li><li><p><strong>关闭：</strong>docker stop [容器名称/容器ID]</p></li><li><p><strong>重启：</strong>docker restart [容器名称/容器ID]</p></li></ul><blockquote><p>容器ID可以只写前四位，docker会自动去寻找，因为ID是随机的，所以前四位重复的就几乎没有。</p></blockquote><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p><strong>语法：</strong>docker rm [OPTIONS] CONTAINER [CONTAINER…]</p><p>OPTIONS说明：</p><ul><li><strong>-f：</strong>通过 SIGKILL 信号强制删除一个运行中的容器。</li><li><strong>-l：</strong>移除容器间的网络连接，而非容器本身。</li><li><strong>-v：</strong>删除与容器关联的卷。</li></ul><p><strong>实例：</strong></p><p>强制删除容器db01、db02</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f db01 db02</span><br></pre></td></tr></table></figure><p>删除所有已经停止的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -a -q)</span><br></pre></td></tr></table></figure><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p><strong>语法：</strong>docker rmi [OPTIONS] IMAGE [IMAGE…]</p><p>OPTIONS说明：</p><ul><li><strong>-f：</strong>强制删除</li><li><strong>-no-prune：</strong>不移除该镜像的过程镜像，默认移除</li></ul><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>​        本篇主要讲的就是Docker的初步使用，具体的部署项目阶段和将自己的项目打包成Docker镜像进行运行将在以后进行具体说明。以上的给出的只是部分常用的命令和常用参数，具体更多命令和用法请参考<a href="https://www.runoob.com/docker/docker-command-manual.html" target="_blank" rel="noopener">菜鸟教程</a>。(ps：不是打广告，只是觉得整理的比较全)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近准备入坑docker，被各种安利说好用，我也准备亲自尝试一下了，但是网上那些零零散散的东西并不是一个完整的教程，官方文档看的也晕晕乎乎的，那就自以一点点踩坑，然后自己做个详细的入门笔记吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="服务器" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot-整合SpringDataJPA</title>
    <link href="http://yoursite.com/2019/10/27/SpringBoot-%E6%95%B4%E5%90%88SpringDataJPA/"/>
    <id>http://yoursite.com/2019/10/27/SpringBoot-整合SpringDataJPA/</id>
    <published>2019-10-27T02:36:04.000Z</published>
    <updated>2020-02-07T04:56:03.438Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JPA的全称是<strong>Java Persistence API</strong>，Persistence 是持久化的意思。所以，中文全称是【JAVA对象持久化的 API】。简单来说，可以理解为是一种JAVA的标准规范，这个规范为JAVA对象的持久化制定了一些标准的接口。要注意的是，JPA只是一个接口规范，而不是实现。具体实现由各供应商来完成，例如Hibernate，TopLink,OpenJPA都很好地实现了JPA接口。</p><a id="more"></a><h1 id="SpringBoot整合SpringDataJPA"><a href="#SpringBoot整合SpringDataJPA" class="headerlink" title="SpringBoot整合SpringDataJPA"></a>SpringBoot整合SpringDataJPA</h1><h2 id="1-SpringBootDataJPA"><a href="#1-SpringBootDataJPA" class="headerlink" title="1. SpringBootDataJPA"></a>1. SpringBootDataJPA</h2><h3 id="1-1-简述"><a href="#1-1-简述" class="headerlink" title="1.1 简述"></a>1.1 简述</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringDataJPA是较大的SpringData系列的一部分，可轻松实现基于JPA的存储库。该模块处理对基于JPA的数据访问层的增强支持。它使构建使用数据访问技术的Spring支持的应用程序变得更加容易。默认底层是Hibernate，使用JPA的Repository能极大的减少对数据库的访问的代码量，仅仅使用内部接口就可以完成简单的CRUD等操作。</p><h3 id="1-2-特征"><a href="#1-2-特征" class="headerlink" title="1.2 特征"></a>1.2 特征</h3><ul><li>基于Spring和JPA构建存储库的先进支持。</li><li>支持Querydsl谓词，从而支持类型安全的JPA查询。</li><li>域类的透明审核。</li><li>分页支持，动态查询支持，集成自定义数据访问代码的能力。</li><li><code>@Query</code>引导时验证带注释的查询。</li><li>支持基于XML的实体映射。</li><li>通过引入JavaConfig的存储库配置<code>@EnableJpaReposituries</code>。</li></ul><h2 id="2-搭建项目"><a href="#2-搭建项目" class="headerlink" title="2. 搭建项目"></a>2. 搭建项目</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该项目是一个完整的开发项目，所有的逻辑代码都放在了Controller层，数据源使用alibaba的<em>Druid</em>数据源。</p><h3 id="2-1-导入依赖-修改配置文件"><a href="#2-1-导入依赖-修改配置文件" class="headerlink" title="2.1 导入依赖/修改配置文件"></a>2.1 导入依赖/修改配置文件</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先在pom.xml文件原来的基础中添加依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后再修改application配置文件，添加关于Druid和SpringBootJPA的依赖。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 配置视图解析</span></span><br><span class="line"><span class="attr">  mvc:</span></span><br><span class="line"><span class="attr">    view:</span></span><br><span class="line"><span class="attr">      prefix:</span> <span class="string">/WEB-INF/views/</span></span><br><span class="line"><span class="attr">      suffix:</span> <span class="string">.jsp</span></span><br><span class="line">  <span class="comment"># 配置数据源</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3306/test?characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="comment">#最大活跃数</span></span><br><span class="line"><span class="attr">    maxaActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="comment">#初始化数量</span></span><br><span class="line"><span class="attr">    InitialSize:</span> <span class="number">1</span></span><br><span class="line">    <span class="comment">#最大连接等待时间</span></span><br><span class="line"><span class="attr">    maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="comment">#打开PSCache，并指定大小</span></span><br><span class="line"><span class="attr">    poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">    minIdle:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span></span><br><span class="line"><span class="attr">    timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">    minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line"><span class="attr">    validationQuery:</span> <span class="string">select</span> <span class="number">1</span> <span class="string">from</span> <span class="string">dual</span></span><br><span class="line"><span class="attr">    testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    testOnReturn:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    filters:</span> <span class="string">stat,</span> <span class="string">wall,</span> <span class="string">log4j</span></span><br><span class="line">  <span class="comment"># 配置JPA</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    database:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span>                 <span class="comment"># 是否打印sql</span></span><br><span class="line"><span class="attr">    generate-ddl:</span> <span class="literal">true</span>             <span class="comment"># 是否生成ddl</span></span><br><span class="line"><span class="attr">    hibernate:</span>                     <span class="comment"># 数据库表的创建方式:更新 </span></span><br><span class="line"><span class="attr">        ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="attr">    properties:</span></span><br><span class="line">        <span class="comment">### 数据库方言,告诉hibernate这是mysql</span></span><br><span class="line">        <span class="string">hibernate.dialect:</span> <span class="string">com.demo.mysql.MySQLDialectUTF8</span></span><br><span class="line">        <span class="comment">### 控制条打印sql格式化输出</span></span><br><span class="line">        <span class="string">hibernate.format_sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据库方言设置，新建<code>mysql</code>包，创建<code>MySQLDialectUTF8</code>类。将默认的字符集编码设置为UTF8。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.mysql;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.dialect.MySQL5Dialect;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重写数据库方言，设置默认字符集为utf8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLDialectUTF8</span> <span class="keyword">extends</span> <span class="title">MySQL5Dialect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTableTypeString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">" ENGINE=InnoDB DEFAULT CHARSET=utf8"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong><br>配置数据库连接，8.0以上的版本再写法上有些不一样，以下是新版写法。8.0以下版本的写法不变。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3306/test?characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>这时候mysql驱动也需要是8.0以上版本的。pom.xml依赖如下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-使用JpaRepository"><a href="#2-2-使用JpaRepository" class="headerlink" title="2.2 使用JpaRepository"></a>2.2 使用JpaRepository</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为JPA的底层就是Hibernate，所以需要一个实体类对数据库表表结构进行映射，在启动项目时，会自动根据实体类创建相应的表结构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: FBY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/10/27 14:26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"stu"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"age"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"address"</span>)</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*getter and setter*/</span>    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面对该类中用到的注解做一个简单说明：使用<code>@Entity</code>会对实体类进行持久化操作，当JPA检测到实体类中有<code>@Entity</code>注解时，会在数据库中生成相对应的表结构信息。<code>@Table</code>用来指定该实体类对应的表明。<code>@Id</code>用来指定主键，配合<code>@GeneratedValue(strategy = GenerationType.IDENTITY)</code>指定主键的自增策略，这里将主键自增交给数据库去做，所以使用<code>IDENTITY</code>。<code>@Column</code>用来指定对应表中的字段名。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之后创建一个<code>jpa</code>包，然后在下面创建<code>StudentJPA</code>接口，继承<strong>JpaRepository</strong>，需要两个参数，一个时实体类对象，一个是主键类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jpa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.domain.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: FBY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/10/27 14:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentJPA</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Student</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查看<code>JpaRepository</code>源码可以之后该接口又继承了<code>PagingAndSortingRepository</code>和<code>QueryByExampleExecutor</code>这两个接口，<code>PagingAndSortingRepository</code>又继承了<code>CrudRepository</code>接口。这些接口基本上看名字就知道这个接口大概实现了什么方法，这就是命名规范的好处啊。</p><h4 id="2-2-1-CrudRepository"><a href="#2-2-1-CrudRepository" class="headerlink" title="2.2.1 CrudRepository"></a>2.2.1 CrudRepository</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看名字可以知道，该接口包含饿了crud等操作，也就是<code>creat</code>、<code>select</code>、<code>delete</code>、<code>update</code>、<code>exist</code>、<code>count</code>。如果继承了该接口，就会拥有该接口所有的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CrudRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line">    &lt;S extends T&gt; <span class="function">S <span class="title">save</span><span class="params">(S var1)</span></span>;</span><br><span class="line">    &lt;S extends T&gt; <span class="function">Iterable&lt;S&gt; <span class="title">saveAll</span><span class="params">(Iterable&lt;S&gt; var1)</span></span>;</span><br><span class="line">    <span class="function">Optional&lt;T&gt; <span class="title">findById</span><span class="params">(ID var1)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">existsById</span><span class="params">(ID var1)</span></span>;</span><br><span class="line">    <span class="function">Iterable&lt;T&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Iterable&lt;T&gt; <span class="title">findAllById</span><span class="params">(Iterable&lt;ID&gt; var1)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(ID var1)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(T var1)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">(Iterable&lt;? extends T&gt; var1)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-PagingAndSortingRepository"><a href="#2-2-2-PagingAndSortingRepository" class="headerlink" title="2.2.2 PagingAndSortingRepository"></a>2.2.2 PagingAndSortingRepository</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该接口时分页和排序，，而且继承了<code>CrudRepository</code>接口，拥有其所有的接口实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Iterable&lt;T&gt; <span class="title">findAll</span><span class="params">(Sort var1)</span></span>;</span><br><span class="line">    <span class="function">Page&lt;T&gt; <span class="title">findAll</span><span class="params">(Pageable var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-QueryByExampleExecutor"><a href="#2-2-3-QueryByExampleExecutor" class="headerlink" title="2.2.3 QueryByExampleExecutor"></a>2.2.3 QueryByExampleExecutor</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个接口实现了条件查询和复杂查询，可以使用exmple的方式查询。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QueryByExampleExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    &lt;S extends T&gt; <span class="function">Optional&lt;S&gt; <span class="title">findOne</span><span class="params">(Example&lt;S&gt; var1)</span></span>;</span><br><span class="line">    &lt;S extends T&gt; <span class="function">Iterable&lt;S&gt; <span class="title">findAll</span><span class="params">(Example&lt;S&gt; var1)</span></span>;</span><br><span class="line">    &lt;S extends T&gt; <span class="function">Iterable&lt;S&gt; <span class="title">findAll</span><span class="params">(Example&lt;S&gt; var1, Sort var2)</span></span>;</span><br><span class="line">    &lt;S extends T&gt; <span class="function">Page&lt;S&gt; <span class="title">findAll</span><span class="params">(Example&lt;S&gt; var1, Pageable var2)</span></span>;</span><br><span class="line">    &lt;S extends T&gt; <span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">(Example&lt;S&gt; var1)</span></span>;</span><br><span class="line">    &lt;S extends T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(Example&lt;S&gt; var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-4-JpaRepository"><a href="#2-2-4-JpaRepository" class="headerlink" title="2.2.4 JpaRepository"></a>2.2.4 JpaRepository</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们用的就是这个接口，它拥有以上所有接口的方法实现，并且添加了条件查询和保存集合数据的方法，实现了该接口基本上简单的数据库操作就不需要我们自己写SQL语句了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; <span class="keyword">extends</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt;, <span class="title">QueryByExampleExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Sort var1)</span></span>;</span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">findAllById</span><span class="params">(Iterable&lt;ID&gt; var1)</span></span>;</span><br><span class="line">    &lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">saveAll</span><span class="params">(Iterable&lt;S&gt; var1)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>;</span><br><span class="line">    &lt;S extends T&gt; <span class="function">S <span class="title">saveAndFlush</span><span class="params">(S var1)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteInBatch</span><span class="params">(Iterable&lt;T&gt; var1)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAllInBatch</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">getOne</span><span class="params">(ID var1)</span></span>;</span><br><span class="line">    &lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">findAll</span><span class="params">(Example&lt;S&gt; var1)</span></span>;</span><br><span class="line">    &lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">findAll</span><span class="params">(Example&lt;S&gt; var1, Sort var2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-使用JPA"><a href="#3-使用JPA" class="headerlink" title="3. 使用JPA"></a>3. 使用JPA</h2><h3 id="3-1-创建Service层"><a href="#3-1-创建Service层" class="headerlink" title="3.1 创建Service层"></a>3.1 创建Service层</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;新建<code>jpa</code>包，在该包下创建<code>StudentuJpa</code>接口，并让其继承<code>JpaRepository</code>，这样该接口就拥有了它的所有方法实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.jpa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.domain.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: FBY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/10/27 16:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentJpa</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Student</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;新建<code>service</code>包，在该包<code>StudentService</code>接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.domain.Student;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: FBY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/10/27 16:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 增加/修改</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Student student)</span></span>;</span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="comment">// id查询</span></span><br><span class="line">    <span class="function">Student <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="comment">// 查询所有</span></span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在<code>service</code>包下新建<code>Impl</code>包，在该包下创建<code>StudentServiceImpl</code>实现类。注入<code>StudentJpa</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.service.Impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.domain.Student;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.jpa.StudentJpa;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: FBY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/10/27 16:04</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentJpa studentJpa;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        studentJpa.save(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        studentJpa.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        Optional&lt;Student&gt; optional = studentJpa.findById(id);</span><br><span class="line">         <span class="keyword">if</span>(optional.isPresent())&#123;</span><br><span class="line">            <span class="keyword">return</span> optional.get();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentJpa.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>关于根据主键进行查找，<code>findById(Integer id)</code>返回封装后的对象<code>Optional&lt;T&gt;</code>，在Optional类中有很多内置的方法，其中<code>isPresen()</code>方法返回Optional对象是否为null的结果，如果当前对象有值就返回<code>true</code>，否则返回<code>false</code>，当结果有值时，然后调用它的<code>get()</code>方法，会返回一个<T>类型的实体类对象，即我们要查询的对象。</p></blockquote><blockquote><p>根据主键查找提供的还有另一个方法，就是<code>getOne(Integer id)</code>，这个方法返回的时代理对象，无法直接操作，还有可能会出现<code>hibernate lazyxxx  no session</code>的错误，在测试方法上加上<code>@Transactional</code>注解可以解决报错的问题。</p></blockquote><h3 id="3-2-创建Controller层"><a href="#3-2-创建Controller层" class="headerlink" title="3.2 创建Controller层"></a>3.2 创建Controller层</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在<code>controller</code>包下创建<code>StudentJPAController</code>类，这次测试就不再使用页面了，只需要看到返回数据即可，所以注解使用<code>@RestControlle</code>，并注入<code>StudentService</code>。返回json格式验证数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: FBY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/10/27 21:34</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentJPAController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService service;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-测试"><a href="#3-3-测试" class="headerlink" title="3.3 测试"></a>3.3 测试</h3><h4 id="3-3-1-增加-修改"><a href="#3-3-1-增加-修改" class="headerlink" title="3.3.1 增加/修改"></a>3.3.1 增加/修改</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;往数据库里添加数据只需要将实体类当作参数，调用JPA的<code>save</code>方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">    stu.setName(<span class="string">"fanfan"</span>);</span><br><span class="line">    stu.setAge(<span class="number">19</span>);</span><br><span class="line">    stu.setAddress(<span class="string">"郑州轻工业大学"</span>);</span><br><span class="line">    service.save(stu);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"添加成功"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>save方法不仅仅用于增加，如果传入的实体类中设置了主键，那么save方法就会变为根据主键更新数据库的操作。要注意的是save用于更新时，更新的是实体类里的所有字段，不设置值的字段会被更新成null。</p></blockquote><h4 id="3-3-2-删除"><a href="#3-3-2-删除" class="headerlink" title="3.3.2 删除"></a>3.3.2 删除</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>JpaRepository</code>提供的有根据主键删除的方法<code>deleteById</code>，直接在底层调用即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/delete.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">    service.deleteById(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"删除成功"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-4-查询"><a href="#3-3-4-查询" class="headerlink" title="3.3.4 查询"></a>3.3.4 查询</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查询全部直接在底层使用JpaRepository内部实现的<code>findAll</code>方法。在浏览器进行访问就可以看到数据库准备的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/findAll.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> service.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="%E6%B5%8B%E8%AF%95%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89.png" alt="测试查询所有"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据id查询一个也是调用底层方法<code>findById</code>就可以实现，具体上面已经详细介绍去了，在这里就不演示了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于实例查询,需要用到这个<strong>ExampleMatcher</strong>——匹配器。</p><blockquote><p><strong>ExampleMatcher</strong>实例查询三要素：</p><ul><li>实体对象：在ORM框架中与Table对应的域对象，一个对象代表数据库表中的一条记录，如上例中User对象，对应user表。在构建查询条件时，一个实体对象代表的是查询条件中的“数值”部分。如：要查询姓“X”的客户，实体对象只需要存储条件值“X”。</li><li>ExampleMatcher对象：它是匹配“实体对象”的，表示了如何使用“实体对象”中的“值”进行查询，它代表的是“查询方式”，解释了如何去查的问题。如：要查询姓“X”的客户，即姓名以“X”开头的客户，该对象就表示了“以某某开头的”这个查询方式，如上例中:withMatcher(“userName”, GenericPropertyMatchers.startsWith())</li><li>实例：即Example对象，代表的是完整的查询条件。由实体对象（查询条件值）和匹配器（查询方式）共同创建。最终根据实例来findAll即可。</li></ul></blockquote><p>示例：根据姓名、年龄、地址模糊查询。首先在<code>StudentService</code>接口里添加方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例查询</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">findByExample</span><span class="params">(Student student)</span></span>;</span><br></pre></td></tr></table></figure><p>然后在<code>StudentServiceImpl</code>类中添加实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">findByExample</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建匹配器，即如何使用查询条件</span></span><br><span class="line">    ExampleMatcher matcher = ExampleMatcher.matching()      <span class="comment">//构建对象</span></span><br><span class="line">            .withMatcher(<span class="string">"name"</span>,ExampleMatcher.GenericPropertyMatchers.startsWith())       <span class="comment">// "姓名"采用模糊查询匹配开头，即&#123;name&#125;%</span></span><br><span class="line">            .withMatcher(<span class="string">"age"</span>,ExampleMatcher.GenericPropertyMatchers.contains())       <span class="comment">// "年龄"采用模糊查询，即%&#123;age&#125;%</span></span><br><span class="line">            .withMatcher(<span class="string">"address"</span>,ExampleMatcher.GenericPropertyMatchers.contains())  <span class="comment">// "地址"采用模糊查询，即%&#123;address&#125;%</span></span><br><span class="line">            .withIgnorePaths(<span class="string">"id"</span>,<span class="string">"xxx"</span>)    <span class="comment">// 忽略id和xxx字段，不管是什么值都不加入查询条件</span></span><br><span class="line">            .withIgnoreCase()               <span class="comment">// 忽略大小写</span></span><br><span class="line">            .withIgnoreNullValues();        <span class="comment">// 忽略空字段</span></span><br><span class="line">    <span class="comment">// 创建实例</span></span><br><span class="line">    Example&lt;Student&gt; example = Example.of(student,matcher);</span><br><span class="line">    <span class="keyword">return</span> studentJpa.findAll(example);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后在<code>StudentJPAController</code>类编写逻辑代码，打开浏览器访问即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/findByExample.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">findByExample</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> service.findByExample(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ExampleMatcher.GenericPropertyMatcher方法</strong></p><ul><li>caseSensitive(): 字符串区分大小写。</li><li>contains(): 全字符模糊匹配。</li><li>endsWith(): 结尾模糊匹配。</li><li>starsWith(): 开头模糊匹配</li><li>exact(): 精准匹配，也就是相等。</li><li>ignoreCase(): 字符串不区分大小写</li><li>storeDefaultMatching(): 默认匹配。</li><li>regex(): 正则表达式匹配</li></ul><p><strong>StringMatcher参数</strong></p><!-- Matching|生成语句|说明 --><table><thead><tr><th>Matching</th><th align="center">生成语句</th><th align="right">说明</th></tr></thead><tbody><tr><td>DEFAULT (case-sensitive)</td><td align="center">firstname = ?0</td><td align="right">默认（大小写敏感）</td></tr><tr><td>DEFAULT (case-insensitive)</td><td align="center">LOWER(firstname) = LOWER(?0)</td><td align="right">默认（忽略大小写）</td></tr><tr><td>EXACT (case-sensitive)</td><td align="center">firstname = ?0</td><td align="right">精确匹配（大小写敏感）</td></tr><tr><td>EXACT (case-insensitive)</td><td align="center">LOWER(firstname) = LOWER(?0)</td><td align="right">精确匹配（忽略大小写）</td></tr><tr><td>STARTING (case-sensitive)</td><td align="center">firstname like ?0 + ‘%’</td><td align="right">前缀匹配（大小写敏感）</td></tr><tr><td>STARTING (case-insensitive)</td><td align="center">LOWER(firstname) like LOWER(?0) + ‘%’</td><td align="right">前缀匹配（忽略大小写）</td></tr><tr><td>ENDING (case-sensitive)</td><td align="center">firstname like ‘%’ + ?0</td><td align="right">后缀匹配（大小写敏感）</td></tr><tr><td>ENDING (case-insensitive)</td><td align="center">LOWER(firstname) like ‘%’ + LOWER(?0)</td><td align="right">后缀匹配（忽略大小写）</td></tr><tr><td>CONTAINING (case-sensitive)</td><td align="center">firstname like ‘%’ + ?0 + ‘%’</td><td align="right">模糊查询（大小写敏感）</td></tr><tr><td>CONTAINING (case-insensitive)</td><td align="center">LOWER(firstname) like ‘%’ + LOWER(?0) + ‘%’</td><td align="right">模糊查询（忽略大小写）</td></tr></tbody></table><p>补充：官方创建ExampleMatcher例子(1.8 lambda)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ExampleMatcher matcher = ExampleMatcher.matching()</span><br><span class="line">  .withMatcher(<span class="string">"firstname"</span>, match -&gt; match.endsWith())</span><br><span class="line">  .withMatcher(<span class="string">"firstname"</span>, match -&gt; match.startsWith());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除此之外，只要继承了<code>JpaRepository</code>接口，我们还能使用方法规则进行查询。举个例子，我在<code>StudentJpa</code>接口中定义一个<code>Student findByNameAndAge(String name,Integer age);</code>方法，那么它就可以直接被解析成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> stu <span class="keyword">where</span> <span class="keyword">name</span>=? <span class="keyword">and</span> age=?</span><br></pre></td></tr></table></figure><p>是不是感觉很book思议？我第一次见也是感觉很神奇，一个简单的查询就这么在底层写个方法就被实现了，完全不用多写其他的东西，在这里提供了好多方法规则查询idea自带的方法提示，超级方便。只不过它的弊端就是对于复杂的操作语句，方法名会会变得很长，而且很难精准解析。<br><img src="%E8%A7%84%E5%88%99%E6%9F%A5%E8%AF%A2.png" alt="规则查询"></p><h4 id="3-3-5-自定义语句"><a href="#3-3-5-自定义语句" class="headerlink" title="3.3.5 自定义语句"></a>3.3.5 自定义语句</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果想对SQL语句进行细致优化，我们还可以使用<code>@Query</code>注解自定义SQL语句。在<code>StudentJpa</code>接口中添加以下方法，并且自定义SQL语句。<code>nativeQuery</code>这个设置为true表明使用原生SQL，否则默认启用HQL。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(value = <span class="string">"select * from stu where age&gt;=?"</span>,nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">SelectByAge</span><span class="params">(Integer age)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Modifying</span></span><br><span class="line"><span class="meta">@Query</span>(value = <span class="string">"delete from stu where name=?"</span>,nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByName</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p><code>@Query</code>只能用于查询，如果想用该注解实现其他操作类型就需要配合<code>@Modifying</code>注解一起使用，但是只是这么写的话会抛出一个<code>TranscationRequiredException</code>异常，意思就是当前操作需要开启事务，所以需要在这个前加上<code>@Transactional</code>注解开启自动化管理事务。</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如同<code>@Query</code>注解一样，增删改查都可以使用原生SQL对数据库进行操作，所需要的注解分别是<code>@Insert</code>，<code>@Delete</code>，<code>@Update</code>，<code>@Select</code>。可以使用对应操作的注解，也可以使用<code>@Quey</code>加上另外两个注解配合使用。</p><h4 id="3-3-6-自定义的BaseRepository"><a href="#3-3-6-自定义的BaseRepository" class="headerlink" title="3.3.6 自定义的BaseRepository"></a>3.3.6 自定义的BaseRepository</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;正常情况下一个项目肯定不可能就继承一个<code>JpaRepository</code>接口，再使用其他模块时还需要多个接口继承，如果每一个业务数据接口都继承几个相同的接口的话也不是不可以，但是对于系统设计和代码复用性来说不是个好的选择，这是我们可与创建一个我们自定的基础Repository。新建一个<code>base</code>包，在该包下创建一个<code>BaseRepositury</code>接口，并继承<code>JpaRepository</code>，日后使用其他模块时，在该接口进行添加即可。以后再创建Jpa接口只需要继承<code>BaseRepository</code>就行了，它有了<code>JpaRepository</code>所有实现方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.NoRepositoryBean;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: FBY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/10/28 21:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseRepository</span>&lt;<span class="title">T</span>,<span class="title">PK</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">T</span>,<span class="title">PK</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@NoRepositoryBean:这个注解如果配置在继承了JpaRepository接口以及其他SpringDataJpa内部的接口的子接口时，子接口不会 被作为一个Repository创建代理类。</p></blockquote><h4 id="3-3-6-分页查询"><a href="#3-3-6-分页查询" class="headerlink" title="3.3.6 分页查询"></a>3.3.6 分页查询</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在一般的项目中，分页总是必不可少的，SpringDataJpa也内置了分页的方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;先在<code>domian</code>包下创建一个<code>PageEntity</code>实体类，添加几个字段：当前页码、每页条数、排序列和排序方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: FBY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/10/28 21:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认页码</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> page=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 默认每页数量</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> size=<span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 排序列名为id</span></span><br><span class="line">    <span class="keyword">protected</span> String sidx=<span class="string">"id"</span>;</span><br><span class="line">    <span class="comment">// 排序规则</span></span><br><span class="line">    <span class="keyword">protected</span> String sord=<span class="string">"desc"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*getter and setter*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;修改<code>Student</code>类继承<code>PageEntity</code>类，由于数据不多，这里测试就设定每页显示三条数据。在<code>StudentService</code>里面添加方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">findAllPage</span><span class="params">(PageRequest pageRequest)</span></span>;</span><br></pre></td></tr></table></figure><p>在<code>StudentServiceImpl</code>里添加实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">findAllPage</span><span class="params">(PageRequest pageRequest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> studentJpa.findAll(pageRequest).getContent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>StudentJPAController</code>中添加新的方法，并添加对应的分页逻辑，此处分页的页码是从<strong>0</strong>开是的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/page.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">page</span><span class="params">(Integer page)</span></span>&#123;</span><br><span class="line">    Student student = <span class="keyword">new</span> Student();</span><br><span class="line">    student.setSize(<span class="number">3</span>);</span><br><span class="line">    student.setPage(page);</span><br><span class="line">    <span class="keyword">return</span> service.findAllPage(PageRequest.of(student.getPage()-<span class="number">1</span>,student.getSize()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来重启项目并访问该方法。<br><img src="%E6%B5%8B%E8%AF%95%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2.png" alt="测试分页查询"></p><h4 id="3-3-7-排序"><a href="#3-3-7-排序" class="headerlink" title="3.3.7 排序"></a>3.3.7 排序</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>PageEntity</code>已经预设好了对应的排序字段，所以重新编辑page方法，将Sort对象添加在<code>PageRequest.of()</code>方法中就可以实现排序。我们现在将顺序按照id倒序排序，SpringDataJPA对排序方式添加了一个枚举类型，创建<code>Sort</code>对象时也需要枚举对象，因为我们<code>PageEntity</code>配置的是字符串，所以上面多了一步判断排序方法返回枚举对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/page.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">page</span><span class="params">(Integer page)</span></span>&#123;</span><br><span class="line">    Student student = <span class="keyword">new</span> Student();</span><br><span class="line">    student.setSize(<span class="number">3</span>);</span><br><span class="line">    student.setPage(page);</span><br><span class="line">    student.setSidx(<span class="string">"desc"</span>);</span><br><span class="line">    <span class="comment">// 获取排序对象</span></span><br><span class="line">    Sort.Direction sort_Direction = Sort.Direction.ASC.toString().equalsIgnoreCase(student.getSord()) ? Sort.Direction.ASC : Sort.Direction.DESC;</span><br><span class="line">    <span class="comment">// 设置排序对象</span></span><br><span class="line">    Sort sort = <span class="keyword">new</span> Sort(sort_Direction,student.getSidx());</span><br><span class="line">    <span class="comment">// 执行排序分页</span></span><br><span class="line">    <span class="keyword">return</span> service.findAllPage(PageRequest.of(student.getPage()-<span class="number">1</span>,student.getSize(),sort));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启项目，刷新页面即可。</p><!-- ![测试排序分页](测试排序分页.png) --><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以上就是SpringBoot整合SpringDataJPA的全部过程了，看完这篇，你就能简单使用JPA来实现项目需求了。是不是感觉很好用？对，它就是很好用。对于我们简单的数据处理真的很方便，很省事。但是大型项目中一些复杂的查询，比如一对多、多对多等，这些底层实现还是要自己动手写的，这些应该也有封装好的更方便的方法，至少对于写这篇笔记时候的我还不知道，以后慢慢了解慢慢学呗。就这么多吧，继续加油！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;JPA的全称是&lt;strong&gt;Java Persistence API&lt;/strong&gt;，Persistence 是持久化的意思。所以，中文全称是【JAVA对象持久化的 API】。简单来说，可以理解为是一种JAVA的标准规范，这个规范为JAVA对象的持久化制定了一些标准的接口。要注意的是，JPA只是一个接口规范，而不是实现。具体实现由各供应商来完成，例如Hibernate，TopLink,OpenJPA都很好地实现了JPA接口。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot-整合Thymeleaf</title>
    <link href="http://yoursite.com/2019/10/24/SpringBoot-%E6%95%B4%E5%90%88Thymeleaf/"/>
    <id>http://yoursite.com/2019/10/24/SpringBoot-整合Thymeleaf/</id>
    <published>2019-10-24T11:16:20.000Z</published>
    <updated>2020-02-07T04:57:43.394Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学习完SpringBoot之后，以后写web项目就用它了，以前开发web项目使用的还是JSP页面，但是SpringBoot官方是不支持JSP的，它默认支持的模板是Thymeleaf，既然学习了SpringBoot，怎么的也要学习一下人家的官方”原配”啊。</p><a id="more"></a><h1 id="SpringBoot整合Thymeleaf"><a href="#SpringBoot整合Thymeleaf" class="headerlink" title="SpringBoot整合Thymeleaf"></a>SpringBoot整合Thymeleaf</h1><h2 id="1-Thymeleaf"><a href="#1-Thymeleaf" class="headerlink" title="1. Thymeleaf"></a>1. Thymeleaf</h2><h3 id="1-1-模板引擎"><a href="#1-1-模板引擎" class="headerlink" title="1.1 模板引擎"></a>1.1 模板引擎</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;市面上主流的 Java 模板引擎有：JSP、Velocity、Freemarker、Thymeleaf。JSP 本质也是模板引擎，SpringBoot官方推荐使用<strong>Thymeleaf</strong>模板引擎。模板引擎原理图如下，模板引擎的作用都是将模板(页面)和数据进行整合然后输出显示，区别在于不同的模板使用不同的语法，如JSP的JSTL表达式，以及JSP自己的表达式和语法，同理Thymeleaf也有自己的语法。<br><img src="%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E.png" alt="模板引擎"></p><h3 id="1-2-简述Thymeleaf"><a href="#1-2-简述Thymeleaf" class="headerlink" title="1.2 简述Thymeleaf"></a>1.2 简述Thymeleaf</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thymeleaf是适用于Web和独立环境的现代服务器端Java模板引擎。简单说， Thymeleaf 是一个跟 Velocity、FreeMarker 类似的模板引擎，它可以完全替代JSP。Thymeleaf的主要目标是为开发工作流程带来优雅的自然模板 -HTML可以在浏览器中正确显示，也可以作为静态原型工作，从而可以在开发团队中加强协作。</p><h3 id="1-3-Thymeleaf优势"><a href="#1-3-Thymeleaf优势" class="headerlink" title="1.3 Thymeleaf优势"></a>1.3 Thymeleaf优势</h3><ul><li>1、Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。</li><li>2、Thymeleaf 开箱即用的特性。它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、该jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</li><li>3、Thymeleaf 提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</li></ul><h2 id="2-SpringBoot使用Thymeleaf"><a href="#2-SpringBoot使用Thymeleaf" class="headerlink" title="2. SpringBoot使用Thymeleaf"></a>2. SpringBoot使用Thymeleaf</h2><h3 id="2-1-配置Thymeleaf"><a href="#2-1-配置Thymeleaf" class="headerlink" title="2.1 配置Thymeleaf"></a>2.1 配置Thymeleaf</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.在pom.xml文件引入thymeleaf模板引擎依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- thymeleaf依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.在application.yml中配置thymeleaf模板解析器属性。thymeleaf配置是在spring配置下的。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">    thymeleaf:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span>                           <span class="comment"># 是否为Web框架启用Thymeleaf视图解析</span></span><br><span class="line"><span class="attr">        prefix:</span> <span class="attr">classpath:/templates/</span>           <span class="comment"># 配置视图解析器前缀</span></span><br><span class="line"><span class="attr">        suffix:</span> <span class="string">.html</span>                           <span class="comment"># 配置试图解析器后缀</span></span><br><span class="line"><span class="attr">        mode:</span> <span class="string">HTML</span>                              <span class="comment"># 应用于模板的html模式</span></span><br><span class="line"><span class="attr">        encoding:</span> <span class="string">utf-8</span>                         <span class="comment"># 编码格式 </span></span><br><span class="line">        <span class="string">servlet.content-type:</span> <span class="string">text/html</span>         <span class="comment"># 指定请求信息格式</span></span><br><span class="line"><span class="attr">        cache:</span> <span class="literal">false</span>                            <span class="comment"># 模板缓存。开发时关闭缓存,不然没法看到实时页面</span></span><br></pre></td></tr></table></figure><h3 id="2-2-使用Thymeleaf"><a href="#2-2-使用Thymeleaf" class="headerlink" title="2.2 使用Thymeleaf"></a>2.2 使用Thymeleaf</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.在templates文件夹下创建thymeleaf.html模板文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>亲爱的<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>，你好！<span class="tag">&lt;/<span class="name">h4</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.创建一个controller类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: fby</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/10/24 下午7:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/thymeleaf.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">thymeleaf</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"name"</span>,<span class="string">"fanfan"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"thymeleaf"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.然后启动项目，在浏览器中输入<a href="localhost:8080/thymeleaf.do" target="_blank" rel="noopener">localhost:8080/thymeleaf.do</a>，成功的页面显示如下。<br><img src="%E6%B5%8B%E8%AF%95.png" alt="测试"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>注意:</strong>这里需要说明一下，html5创建的模板里<code>&lt;meta&gt;</code>标签是下面这样的。这个一开始是没有结束符号的，springboot默认使用的版本是<code>thymeleaf2.0</code>，如果使用<code>3.0</code>的话需要将其改写为带有结束标语的。要么就删掉，因为在<code>yml</code>文件中已经设置了编码(一般不建议)。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">html5模板：</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">thymeleaf3.0版本改写为</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-Thymeleaf详解"><a href="#3-Thymeleaf详解" class="headerlink" title="3. Thymeleaf详解"></a>3. Thymeleaf详解</h2><h3 id="3-1-引入"><a href="#3-1-引入" class="headerlink" title="3.1 引入"></a>3.1 引入</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要想在html文件里使用thymeleaf的语法，首先要现在文件里引入<code>th</code>标签的命名空间。<code>xmlns</code>属性可以在文档里定义一个或多个可供选择的命名空间。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-常用th标签"><a href="#3-2-常用th标签" class="headerlink" title="3.2 常用th标签"></a>3.2 常用th标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">关键字          功能介绍                                           示例</span><br><span class="line">th:id           替换id                              <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:id</span>=<span class="string">"'xxx' + $&#123;collect.id&#125;"</span>/&gt;</span></span><br><span class="line">th:text         文本替换                            <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;collect.description&#125;"</span>&gt;</span>description<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">th:utext        支持html的文本替换                  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:utext</span>=<span class="string">"$&#123;htmlcontent&#125;"</span>&gt;</span>conten<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">th:object       替换对象                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">"$&#123;session.user&#125;"</span>&gt;</span></span><br><span class="line">th:value        属性赋值                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">"$&#123;user.name&#125;"</span> /&gt;</span></span><br><span class="line">th:with         变量赋值运算                         <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:with</span>=<span class="string">"isEven=$&#123;prodStat.count&#125;%2==0"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">th:style        设置样式                            <span class="tag">&lt;<span class="name">th:style="'display:'</span> + @&#123;($&#123;<span class="attr">sitrue</span>&#125; ? '<span class="attr">none</span>' <span class="attr">:</span> '<span class="attr">inline-block</span>')&#125; + ''"&gt;</span></span><br><span class="line">th:onclick      点击事件                            <span class="tag">&lt;<span class="name">th:οnclick="'getCollect()'"</span>&gt;</span></span><br><span class="line">th:each         属性赋值                            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"user,userStat:$&#123;users&#125;"</span>&gt;</span></span><br><span class="line">th:if           判断条件                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:if</span>=<span class="string">"$&#123;userId == collect.userId&#125;"</span> &gt;</span></span><br><span class="line">th:unless       和th:if判断相反                     <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/login&#125;"</span> <span class="attr">th:unless</span>=<span class="string">$&#123;session.user</span> != <span class="string">null&#125;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">th:href         链接地址                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/login&#125;"</span> <span class="attr">th:unless</span>=<span class="string">$&#123;session.user</span> != <span class="string">null&#125;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span> /&gt;</span><br><span class="line">th:switch       多路选择 配合th:case 使用            <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;user.role&#125;"</span>&gt;</span></span><br><span class="line">th:case         th:switch的一个分支                  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'admin'"</span>&gt;</span>User is an administrator<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">th:fragment     布局标签，定义一个代码片段，          <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"alert"</span>&gt;</span></span><br><span class="line">                方便其它地方引用   </span><br><span class="line">th:include      布局标签，替换内容到引入的文件        <span class="tag">&lt;<span class="name">head</span> <span class="attr">th:include</span>=<span class="string">"layout :: htmlhead"</span> <span class="attr">th:with</span>=<span class="string">"title='xx'"</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span> /&gt;</span><br><span class="line">th:replace      布局标签，替换整个标签到引入的文件     <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"fragments/header :: title"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">th:selected     selected选择框 选中                  th:selected="($&#123;xxx.id&#125; == $&#123;configObj.dd&#125;)"</span><br><span class="line">th:src          图片类地址引入                       <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"img-responsive"</span> <span class="attr">alt</span>=<span class="string">"App Logo"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/img/logo.png&#125;"</span> /&gt;</span></span><br><span class="line">th:inline       定义js脚本可以使用变量               <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">th:action       表单提交的地址                       <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"subscribe.html"</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/subscribe&#125;"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">th:attr         设置标签属性，多个属性可以用比如       <span class="tag">&lt;<span class="name">th:attr="src=@&#123;</span>/<span class="attr">image</span>/<span class="attr">aa.jpg</span>&#125;,<span class="attr">title</span>=<span class="string">#&#123;logo&#125;</span>"&gt;</span></span></span></span><br><span class="line">                逗号分隔 </span><br><span class="line"><span class="handlebars"><span class="xml">th:remove       删除某个属性                         <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:remove</span>=<span class="string">"all"</span>&gt;</span></span></span></span><br><span class="line">　　　　　　　　　　　　　　　　　　　　   1.all:删除包含标签和所有的孩子。</span><br><span class="line">　　　　　　　　　　　　　　　　　　　　   2.body:不包含标记删除,但删除其所有的孩子。</span><br><span class="line">　　　　　　　　　　　　　　　　　　　　   3.tag:包含标记的删除,但不删除它的孩子。</span><br><span class="line">　　　　　　　　　　　　　　　　　　　　   4.all-but-first:删除所有包含标签的孩子,除了第一个。</span><br><span class="line">　　　　　　　　　　　　　　　　　　　　   5.none:什么也不做。这个值是有用的动态评估。</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;还有非常多的标签，这里只列出最常用的几个,由于一个标签内可以包含多个th:x属性，其生效的优先级顺序为:<br>include,each,if/unless/switch/case,with,attr/attrprepend/attrappend,value/href,src ,etc,text/utext,fragment,remove。</p><h3 id="3-3-常用语法"><a href="#3-3-常用语法" class="headerlink" title="3.3 常用语法"></a>3.3 常用语法</h3><h4 id="3-3-1-标准表达式"><a href="#3-3-1-标准表达式" class="headerlink" title="3.3.1 标准表达式"></a>3.3.1 标准表达式</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thymeleaf语法有很多，想更深入了解的话可以去看<a href="https://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html" target="_blank" rel="noopener">官方文档</a>。在这先简单介绍一下标准表达式功能：</p><ul><li>简单表达式<ul><li>变量表达式: <strong>${…}</strong></li><li>选择表达式: <strong>*{…}</strong></li><li>消息表达式: <strong>#{…}</strong></li><li>链接URL表达式: <strong>@{…}</strong></li></ul></li><li>文字<ul><li>文本文字: <code>&#39;one text&#39;</code>，…</li><li>号码文字: <code>0</code>，<code>34</code>，<code>3.2</code>，…</li><li>布尔文字: <code>true</code>，<code>false</code></li><li>空文字: <code>null</code></li><li>文字标记: <code>one</code>，<code>sometext</code>，…</li></ul></li><li>文字操作<ul><li>字符串串联: <code>+</code></li><li>文字替换: <code>|The name is ${naem}|</code></li></ul></li><li>算数运算<ul><li>二元运算符: <code>+</code>，<code>-</code>，<code>*</code>，<code>/</code>，<code>%</code></li><li>减号(一元运算符): <code>-</code></li></ul></li><li>布尔运算<ul><li>二元运算符: <code>and</code>，<code>or</code></li><li>布尔否定(一元运算符): <code>!</code>，<code>not</code></li></ul></li><li>比较和平等<ul><li>比较: <code>&gt;</code>，<code>&lt;</code>，<code>&gt;=</code>，<code>&lt;=</code> <code>（gt，lt，ge，le）</code></li><li>等号运算符: <code>==</code>，<code>!=</code> <code>(eq，ne)</code></li></ul></li><li>条件运算符<ul><li>如果-则: <code>(if) ? (then)</code></li><li>如果-则-否则: <code>(if) ? (then) : (else)</code></li><li>默认: <code>(value) ?: (defautvalue)</code></li></ul></li></ul><blockquote><p>以上所有的这些功能都可以进行组合和嵌套。<br><code>&#39;User is of type &#39; + (${user.isAdmin()} ? &#39;Administrator&#39; : (${user.type} ?: &#39;Unknown&#39;))</code></p></blockquote><h4 id="3-3-2-赋值、字符串的拼接"><a href="#3-3-2-赋值、字符串的拼接" class="headerlink" title="3.3.2 赋值、字符串的拼接"></a>3.3.2 赋值、字符串的拼接</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 直接取值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>  <span class="attr">th:text</span>=<span class="string">"$&#123;collect.description&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 标签内赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello，[[$&#123;collect.description&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 取值拼接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"'Welcome to our application, ' + $&#123;user.name&#125; + '!'"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;字符串拼接还有另外一种简洁的写法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"|Welcome to our application, $&#123;user.name&#125;!|"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-3-3-条件判断If-Unless"><a href="#3-3-3-条件判断If-Unless" class="headerlink" title="3.3.3 条件判断If/Unless"></a>3.3.3 条件判断If/Unless</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thymeleaf中使用<code>th:if</code>和<code>th:unless</code>属性进行条件判断，下面的例子中，<code>&lt;a&gt;</code>标签只有在th:if中条件成立时才显示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:if</span>=<span class="string">"$&#123;myself=='yes'&#125;"</span> &gt;</span> <span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:unless</span>=<span class="string">$&#123;session.user</span> != <span class="string">null&#125;</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/login&#125;"</span> &gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>th:unless于th:if恰好相反，只有表达式中的条件不成立，才会显示其内容。<br>也可以使用 (if) ? (then) : (else) 这种语法来判断显示的内容。</p></blockquote><h4 id="3-3-4-for循环"><a href="#3-3-4-for循环" class="headerlink" title="3.3.4 for循环"></a>3.3.4 for循环</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>  <span class="attr">th:each</span>=<span class="string">"item,iterStat : $&#123;list&#125;"</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">"row"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;collect.id&#125;"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">td</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">"$&#123;item.webLogo&#125;"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.url&#125;"</span>&gt;</span>Mark<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.title&#125;"</span>&gt;</span>Otto<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.description&#125;"</span>&gt;</span>@mdo<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.index&#125;"</span>&gt;</span>index<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>list是后台传入的数据，item是设置每次循环的对象名(自定义)。</p></blockquote><p>iterStat称作状态变量，属性有:</p><ul><li>index: 当前迭代对象的index(从0开始计算)</li><li>count: 当前迭代对象的index(从1开始计算)</li><li>size: 被迭代对象的大小</li><li>current: 当前迭代变量</li><li>even/odd: 布尔值，当前循环是否是偶数/奇数(从0开始计算)</li><li>first: 布尔值，当前循环是否是第一个</li><li>last: 布尔值，当前循环是否是最后一个</li></ul><h4 id="3-3-5-URL"><a href="#3-3-5-URL" class="headerlink" title="3.3.5 URL"></a>3.3.5 URL</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URL在Web应用模板中占据着十分重要的地位，需要特别注意的是Thymeleaf对于URL的处理是通过语法 <strong>@{…}</strong>来处理的。如果需要Thymeleaf对URL进行渲染，那么务必使用<code>th:href</code>，<code>th:src</code>等属性，也可以用来引入css、js、图片等文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 超链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/order/&#123;orderId&#125;/details(orderId=$&#123;o.id&#125;)&#125;"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入css --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/css/bootstrap.min.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置背景 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:style</span>=<span class="string">"'background:url(' + @&#123;/&lt;path-to-image&gt;&#125; + ');'"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根据属性值改变背景 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media-object resource-card-image"</span>  <span class="attr">th:style</span>=<span class="string">"'background:url(' + @&#123;($&#123;collect.webLogo&#125;=='' ? 'img/favicon.png' : $&#123;collect.webLogo&#125;)&#125; + ')'"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>几点说明：</p><ul><li>上列中URL最后的(orderId=${o.id})表示将括号内的内容作为URL参数处理，该语法避免使用字符串拼接，大大提高了可读性。</li><li>@{…}表达式中可以通过{orderId}访问COntext中的orderId变量。</li><li>@{/order}是Context相关的相对路径，在渲染时会自动添加上当前Web应用的Context名字。例如contest名字为app，那么解析的结果就是/app/order。</li></ul><h4 id="3-3-6-内联JS"><a href="#3-3-6-内联JS" class="headerlink" title="3.3.6 内联JS"></a>3.3.6 内联JS</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;内联文本：<strong>[[…]]</strong>内联文本的表示方式，<strong>[[…]]</strong>之间的内容可以被赋值。为了使其生效，必须在此标签或者任何父标签上有<strong>th:inline</strong>属性。此属性有三种值(<code>text</code>、<code>javascript</code>、<code>none</code>)。<strong>th:inline</strong>也可以在父标签上使用，比如作为body上的标签。表达式在javascript中使用时，先用属性声明一下：th:inline=”javascript”，然后我们开始在js中声明变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script th:inline=<span class="string">"javascript"</span>&gt;</span><br><span class="line">    <span class="comment">/*&lt;![CDATA[*/</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">var</span> username = <span class="comment">/*[[$&#123;session.user.name&#125;]]*/</span> <span class="string">'Sebastian'</span>;</span><br><span class="line">        ...</span><br><span class="line">    <span class="comment">/*]]&gt;*/</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>/*[[…]]*/</strong>表达式的理解如下;</p><ul><li>/*…*/中的内容子啊浏览器打开静态网页时会被忽略。</li><li>‘Sebastian’ 会在浏览器中显示。(静态时)。</li><li>Thymeleaf解析时，会解析/*[[…]]*/的内容，并把获得的值替换掉/*[[…]]*/后面的内容。</li></ul><p>所以执行的结果如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script th:inline=<span class="string">"javascript"</span>&gt;</span><br><span class="line">    <span class="comment">/*&lt;![CDATA[*/</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">var</span> username = <span class="string">'John Apricot'</span>;</span><br><span class="line">        ...</span><br><span class="line">    <span class="comment">/*]]&gt;*/</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>当然，你也可以不用注释，就像下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script th:inline=<span class="string">"javascript"</span>&gt;</span><br><span class="line">    <span class="comment">/*&lt;![CDATA[*/</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">var</span> username = [[$&#123;session.user.name&#125;]];</span><br><span class="line">        ...</span><br><span class="line">    <span class="comment">/*]]&gt;*/</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>这会让它在静态显示时出现错误。</p><blockquote><p>注意：引擎求值后注入式是智能的，它可以赋值以下类型的数据：<code>String</code>、<code>Numbers</code>、<code>Booleans</code>、<code>Arrays</code>、<code>Collections</code>、<code>Maps</code>、<code>Beans (objects with getter and setter methods)</code>。</p></blockquote><p>举个栗子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">script th:inline=<span class="string">"javascript"</span>&gt;</span><br><span class="line">    <span class="comment">/*&lt;![CDATA[*/</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">var</span> user = <span class="comment">/*[[$&#123;session.user&#125;]]*/</span> <span class="literal">null</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/*]]&gt;*/</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>${session.user}会获取一个user对象。写入如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script th:inline=<span class="string">"javascript"</span>&gt;</span><br><span class="line">    <span class="comment">/*&lt;![CDATA[*/</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">var</span> user = &#123;<span class="string">'age'</span>:<span class="literal">null</span>,<span class="string">'firstName'</span>:<span class="string">'John'</span>,<span class="string">'lastName'</span>:<span class="string">'Apricot'</span>,</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'John Apricot'</span>,<span class="string">'nationality'</span>:<span class="string">'Antarctica'</span>&#125;;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/*]]&gt;*/</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>引擎同样允许增加和删除代码块。增加代码块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">23</span>;</span><br><span class="line"><span class="comment">/*[+</span></span><br><span class="line"><span class="comment">var msg = 'This is a working application';</span></span><br><span class="line"><span class="comment">+]*/</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>解析如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">23</span>;</span><br><span class="line"><span class="keyword">var</span> msg = <span class="string">'This is a working application'</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>删除代码块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">23</span>;</span><br><span class="line"><span class="comment">/*[- */</span></span><br><span class="line"><span class="keyword">var</span> msg = <span class="string">'This is a non-working template'</span>;</span><br><span class="line"><span class="comment">/* -]*/</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>解析如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">23</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>增加和删除代码块只是有这一块的知识点，所以暂时先写上了，但是具体是干啥的，我也不清楚，反正我是没用到。</p></blockquote><h4 id="3-3-7-信息表达式"><a href="#3-3-7-信息表达式" class="headerlink" title="3.3.7 信息表达式"></a>3.3.7 信息表达式</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;先举个简单的栗子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p th:utext=<span class="string">"#&#123;home.welcome&#125;"</span>&gt;Welcome to our grocery store!<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>其中<code>home.welcome=欢迎光临本店</code>。<br>如果消息文本不完全是静态的会发生什么？有时候我们需要在消息中增加变量，比如输出访问者的名字怎么办？可以这样办：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p th:utext=<span class="string">"#&#123;home.welcome($&#123;session.user.name&#125;)&#125;"</span>&gt;</span><br><span class="line">Bienvenido a nuestra tienda de comestibles, 木鱼!</span><br><span class="line">&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>home.welcome=欢迎光临本店, {0}!</code><br>在这里，参数可以是字符型也可是树数值型或者日期型。当然如果我们需要多个参数的话，类推即可，并且我们也可以内嵌表达式替换字符串，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p th:utext=<span class="string">"#&#123;$&#123;welcomeMsgKey&#125;($&#123;session.user.name&#125;)&#125;"</span>&gt;</span><br><span class="line">Welcome to our grocery store, 木鱼!</span><br><span class="line">&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-3-8-选择表达式"><a href="#3-3-8-选择表达式" class="headerlink" title="3.3.8 选择表达式"></a>3.3.8 选择表达式</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;变量不仅能用在#{ }上，还能用在* { }上。两者的区别在于* { }上的的变量首先是选定对象的变量。如果不选定对象，那么是整个上下文环境中的变量和#{ }相同。选择对象用什么呢?<code>th:object</code>标签属性。我们使用它在我们的用户配置文件(userprofile.html)页面:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div th:object=<span class="string">"$&#123;session.user&#125;"</span>&gt;</span><br><span class="line">    &lt;p&gt;Name: <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;firstName&#125;"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;Surname: &lt;span th:text="*&#123;lastName&#125;"&gt;Pepper&lt;/</span>span&gt;.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;Nationality: &lt;span th:text="*&#123;nationality&#125;"&gt;Saturn&lt;/</span>span&gt;.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>这个语法等同于以下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;p&gt;Name: <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;session.user.firstName&#125;"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;Surname: &lt;span th:text="$&#123;session.user.lastName&#125;"&gt;Pepper&lt;/</span>span&gt;.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;Nationality: &lt;span th:text="$&#123;session.user.nationality&#125;"&gt;Saturn&lt;/</span>span&gt;.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>当然了，这两种用法是可以混合的:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div th:object=<span class="string">"$&#123;session.user&#125;"</span>&gt;</span><br><span class="line">    &lt;p&gt;Name: <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;firstName&#125;"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;Surname: &lt;span th:text="$&#123;session.user.lastName&#125;"&gt;Pepper&lt;/</span>span&gt;.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;Nationality: &lt;span th:text="*&#123;nationality&#125;"&gt;Saturn&lt;/</span>span&gt;.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>如果一个对象已经被选择，即th:object=”${session.user}”。那么我们也可以使用#object对象去引用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div th:object=<span class="string">"$&#123;session.user&#125;"</span>&gt;</span><br><span class="line">    &lt;p&gt;Name: <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#object.firstName&#125;"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;Surname: &lt;span th:text="$&#123;session.user.lastName&#125;"&gt;Pepper&lt;/</span>span&gt;.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;Nationality: &lt;span th:text="*&#123;nationality&#125;"&gt;Saturn&lt;/</span>span&gt;.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>就像之前说的，如果没有对象被选中，那么<code>#{}</code>和<code>*{}</code>表达式的意义是相同的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;p&gt;Name: <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;session.user.name&#125;"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;Surname: &lt;span th:text="*&#123;session.user.surname&#125;"&gt;Pepper&lt;/</span>span&gt;.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;Nationality: &lt;span th:text="*&#123;session.user.nationality&#125;"&gt;Saturn&lt;/</span>span&gt;.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-基本对象"><a href="#3-4-基本对象" class="headerlink" title="3.4 基本对象"></a>3.4 基本对象</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在上下文变量上评估OGNL表达式时，某些对象可用于表达式，以提高灵活性。这些对象（根据OGNL标准）将以#符号开头进行引用。</p><h4 id="3-4-1-基础对象"><a href="#3-4-1-基础对象" class="headerlink" title="3.4.1 基础对象"></a>3.4.1 基础对象</h4><ul><li><strong>#ctx</strong>: 上下文对象。</li><li><strong>#vars</strong>: 上下文变量。</li><li><strong>#locale</strong>: 上下文语言环境。</li><li><strong>#httpSession</strong>: HttpSession对象(仅在Web上下文中)。</li><li><strong>#httpServletRequest</strong>: HttpServletRequest对象(仅在Web上下文中)。</li></ul><p>可以通过以下方式引用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Established locale country: <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#locale.country&#125;"</span>&gt;</span>US<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>.</span><br></pre></td></tr></table></figure><h4 id="3-4-2-请求-会话属性等Web上下文名称空间"><a href="#3-4-2-请求-会话属性等Web上下文名称空间" class="headerlink" title="3.4.2 请求/会话属性等Web上下文名称空间"></a>3.4.2 请求/会话属性等Web上下文名称空间</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Web环境中使用Thymeleaf时，我们可以使用一系列快捷方式来访问请求参数，会话属性和应用程序属性。</p><blockquote><p>请注意，这些不是上下文对象，而是作为变量添加到上下文中的映射，因此我们不使用即可访问它们#。因此，它们以某种方式充当命名空间。</p></blockquote><ul><li><strong>param</strong>: 用于检索请求参数。${param.foo}是String[]带有foorequest参数值的a ，因此${param.foo[0]}通常用于获取第一个值。</li><li><strong>session</strong>: 用于获取会话属性。例如<code>${session.user.name}</code>。</li><li><strong>application</strong>: 用于检索应用程序/ servlet上下文属性。</li></ul><h4 id="3-4-3-Web上下文对象"><a href="#3-4-3-Web上下文对象" class="headerlink" title="3.4.3 Web上下文对象"></a>3.4.3 Web上下文对象</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Web环境中，还可以直接访问以下对象(请注意，这些是对象，而不是映射/命名空间)。</p><ul><li><strong>#httpServletRequest</strong>: 直接访问<code>javax.servlet.http.HttpServletRequest</code>与当前请求关联的对象。</li><li><strong>#httpSession</strong>: 直接访问<code>javax.servlet.http.HttpSession</code>与当前请求关联的对象。</li></ul><blockquote><p>这里只是简单说一下这些对象，因为我也没有用过，想要深入使用的可以在<a href="https://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html#appendix-a-expression-basic-objects" target="_blank" rel="noopener">官网附录A</a>中阅读这些对象的完整参考。 </p></blockquote><h3 id="3-5-Thymeleaf对象"><a href="#3-5-Thymeleaf对象" class="headerlink" title="3.5 Thymeleaf对象"></a>3.5 Thymeleaf对象</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除了这些基本的对象,Thymeleaf将为我们提供一套实用的对象。来帮助我们我们执行常见的任务。</p><ul><li><strong>#dates</strong> : 为 java.util.Date对象提供工具方法,比如：格式化,提取年月日等.</li><li><strong>#calendars</strong> : 类似于#dates , 但是只针对java.util.Calendar对象.</li><li><strong>#numbers</strong> : 为数值型对象提供工具方法。</li><li><strong>#strings</strong> :为String 对象提供工具方法。如: contains, startsWith, prepending/appending等。</li><li><strong>#objects</strong> : 为object 对象提供常用的工具方法。</li><li><strong>#bools</strong> : 为boolean 对象提供常用的工具方法。</li><li><strong>#arrays</strong> : 为arrays 对象提供常用的工具方法。</li><li><strong>#lists</strong> :为lists对象提供常用的工具方法。</li><li><strong>#sets</strong> : 为sets对象提供常用的工具方法。</li><li><strong>#maps</strong> : 为maps对象提供常用的工具方法。</li><li><strong>#aggregates</strong> :为创造一个arrays 或者 collections聚集函数提供常用的工具方法。</li><li><strong>#messages</strong> : 用于获取变量表达式内的外部化消息，其方式与使用<code>#{...}</code>语法获得消息的方式相同。</li><li><strong>#ids</strong> : 处理id可能重复的属性的实用方法(例如，由于迭代的结果)。</li></ul><blockquote><p>这里只是简单说一下这些对象，因为我也没有用过，想要深入使用的可以在<a href="https://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html#appendix-b-expression-utility-objects" target="_blank" rel="noopener">官网附录B</a>中阅读这些对象的完整参考。</p></blockquote><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再写这篇博客之前关于Thyemleaf模板引擎我也就用过一次，踩过的坑也不少，所以写这篇博客时才各种百度、官网文档等等的去搜集相关知识，整理个也算比较详细了。用的比较多的那些给的都有示例代码，其他的先暂时当作了解，日后开发项目有需要了再来过看。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;学习完SpringBoot之后，以后写web项目就用它了，以前开发web项目使用的还是JSP页面，但是SpringBoot官方是不支持JSP的，它默认支持的模板是Thymeleaf，既然学习了SpringBoot，怎么的也要学习一下人家的官方”原配”啊。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SpootBoot-项目搭建</title>
    <link href="http://yoursite.com/2019/10/22/SpootBoot-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2019/10/22/SpootBoot-项目搭建/</id>
    <published>2019-10-22T01:34:32.000Z</published>
    <updated>2020-02-07T04:55:40.398Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近有一个项目用到了SpringBoot框架，这也是我第一次用这个框架，对于新手小白来说，不是怎么友好，但是一旦搭建好了，确实上手很快，不用管底层是怎么实现的，也不用问某些东西是干嘛的，问就是去百度。因为人家的规定的就是让那么写，咱就是个使用者，跟着写就对了。emmmmmmm，好了，不在这瞎白活了，下面进入正题，开始搭建一个SpringBoot项目。</p><a id="more"></a><h1 id="SpringBoot项目搭建"><a href="#SpringBoot项目搭建" class="headerlink" title="SpringBoot项目搭建"></a>SpringBoot项目搭建</h1><h2 id="1-SpringBoot"><a href="#1-SpringBoot" class="headerlink" title="1. SpringBoot"></a>1. SpringBoot</h2><h3 id="1-1-什么是SpringBoot"><a href="#1-1-什么是SpringBoot" class="headerlink" title="1.1 什么是SpringBoot"></a>1.1 什么是SpringBoot</h3><blockquote><p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.<br>We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need very little Spring configuration.</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这段话是摘自官网的介绍，大致意思就是使用SpringBoot可以轻松快速的创建独立的、生产级别的基于Spring的应用程序。</p><h3 id="1-2-优势"><a href="#1-2-优势" class="headerlink" title="1.2 优势"></a>1.2 优势</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringBoot对开发效率的提升是全方位的，在没有使用SpringBoot之前开发一个web项目需要做那些工作</p><ul><li>配置web.xml，加载Spring和SpringMVC</li><li>配置数据库连接、配置Spring事务</li><li>配置加载配置文件的读取、开启注解</li><li>配置日志文件</li><li>部署tomcat调试</li><li>……</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而且还要添加一大堆记不住名字的jar包，有可能还要考虑各个版本的兼容性、冲突性等各种可行性。是不是感觉很复杂？就这步骤还是使用SSM(Spring+SpringMVC+MyBatis)整合搭建的。不说以前的JavaBean+servlet+Jsp的模式，就拿SSH(Struts+Spring+Hibernate)来说比这还要复杂，各种xml搞的让人头大。这个时候再来看一下SpringBoot搭建项目，就简单明了的几个配置文件，而且大多还都是自动配置，而且内置的有tomcat，使用idea创建更是方便，idea内置的各种工具可以实现全部全部框架的自动生成。</p><blockquote><p><strong>突出优势：</strong><br>简单、快速、方便的搭建项目<br>主流开发框架无配置集成<br>提高开发效率、部署效率</p></blockquote><h2 id="2-项目搭建"><a href="#2-项目搭建" class="headerlink" title="2. 项目搭建"></a>2. 项目搭建</h2><h3 id="2-1-开发环境"><a href="#2-1-开发环境" class="headerlink" title="2.1 开发环境"></a>2.1 开发环境</h3><blockquote><p>os:Windows 10<br>ide:IDEA 2019.2.3<br>jdk:1.8.0<br>maven:3.6.1<br>tomcat:9.0(框架自带)</p></blockquote><h3 id="2-2-创建项目"><a href="#2-2-创建项目" class="headerlink" title="2.2 创建项目"></a>2.2 创建项目</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用idea新建项目时，选择左侧的Spring Initializr，这是idea提供的快速创建，然后点击next。<br><img src="%E6%96%B0%E5%BB%BA.png" alt="新建"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下一个页面是配置项目信息。Group是域；Artifact一般代表公司名称；这两个参数都是提供给Maven的；下面的Name和Package会自动补全，Package是项目总包名；Type一般都选择Mavne；Language一般选择Java，也可以使用其他虚拟机语言，比如Kotlin、Groovy；Packaging是项目打包方式，可以选择打成jar包或者war包。Java Version对于JDK选择8。配置完成之后点击next。</p><blockquote><ul><li>坐标Group ID是项目组织唯一的标识符，实际对应项目中的package包。</li><li>坐标Artifact ID是项目的唯一的标识符，实际对应项目的project name名称，Artifact不可包含大写字母。</li></ul></blockquote><p><img src="%E9%85%8D%E7%BD%AE.png" alt="配置"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接下来是Dependencies初始化依赖，此处勾选Web–&gt;Spring Web。<br><img src="Dependencies.png" alt="Dependencies"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;选择项目路径。然后Finish。<br><img src="%E8%B7%AF%E5%BE%84.png" alt="路径"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为项目是依托于Maven的，第一次加载时间较长，是因为所有的配置都需要在网络上请求下来，下载完毕后项目目录如下所示。<br><img src="%E7%9B%AE%E5%BD%95.png" alt="目录"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简单介绍一下目录，大致可以分成三块。</p><blockquote><ul><li>java: 代码的源文件，逻辑代码都在这个里面存放着，里面的DemoApplication.java是系统的启动文件。</li><li>resource: 资源文件夹，存放的是所有静态资源和配置文件。application.properties是主要配置文件，可以添加其他配置，不够我一般习惯将其改为application.yaml格式，这个看个人习惯。有一点就是static文件夹西下的静态文件可以直接通过url访问到。templates文件夹下的不能通过url访问，需要通过controller跳转进行访问。</li><li>test: 测试模块。用于项目发布前的测试，里卖弄内置一个Junit测试。</li></ul></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在文件夹最外面有一个pom.xml文件，这个是引入外部依赖的文件。下面会说明。</p><h3 id="2-3-测试运行"><a href="#2-3-测试运行" class="headerlink" title="2.3 测试运行"></a>2.3 测试运行</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;项目创建出来之后，先写个简单的controller进行测试一下。在之前的<code>com.example.demo</code>下新建一个controller文件夹，创建编写HelloWorldController类进行测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: fby</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/10/23 下午5:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloworldController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!恭喜你，测试成功!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里的controller还是和SpringMVC很像的，唯一不同的一点就是<code>@RestController</code>这个注解，他就相当于是<code>@Controller</code>和<code>@ResponseBody</code>这两个注解的合体版。将这个注解打在类上的话，那么这个controller类里的所有方法都等于打上了<code>@ResponseBody</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后就开始运行了，点击右上角的运行箭头或者直接启动DemoApplication.java类。<br><img src="%E6%B5%8B%E8%AF%95.png" alt="测试"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后你就会看到控制台输出SpringBoot了。这个时候就意味着项目已经启动成功了，然后访问<a href="localhost:8080/hello.do" target="_blank" rel="noopener">localhost:8080/hello.do</a><br><img src="%E6%B5%8B%E8%AF%95%E6%88%90%E5%8A%9F.png" alt="测试成功"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以看到信息已经返回，测试成功。</p><h2 id="3-项目分析"><a href="#3-项目分析" class="headerlink" title="3. 项目分析"></a>3. 项目分析</h2><h3 id="3-1-pom-xml文件"><a href="#3-1-pom-xml文件" class="headerlink" title="3.1 pom.xml文件"></a>3.1 pom.xml文件</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在创建SpringBoot项目的时候会自动生成一个pom.xml文件。如下所示。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个相比于一般的pom.xml文件多了一个<code>&lt;parent&gt;</code>标签，这个标签是配置在SpringBoot的父级依赖，有了这个，当前的项目才是SpringBoot项目，<code>spring-boot-starter-parent</code>是一个特殊的’starter’，它用来提供maven默认依赖，使用它之后常用的包依赖就可以省去<code>version</code>标签。</p><h3 id="3-2-入口类"><a href="#3-2-入口类" class="headerlink" title="3.2 入口类"></a>3.2 入口类</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringBoot项目通常有一个名为*Applicaton的入口类，入口类里面就只有一个<code>main</code>方法，这个<code>main</code>方法其实就是一个标准的Java应用的入口方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>@SpringBootApplication</code>是SpringBoot的核心注解，它是一个组合注解，该注解组合了：<code>@Configuration</code>、<code>@EnableAutoConfiguration</code>、<code>@ComponenScan</code>。若不使用<code>@SpringBootApplication</code>注解也可以使用这三个注解代替。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>@Configuration</code>注解和它的搭档<code>@Bean</code>在一起使用就可以创建一个简单的Spring配置类，可以用来代替相应的xml配置文件。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>@EnableAutoConfiguration</code>让SpringBoot根据类路径中的jar包依赖为当前项目进行自动配置Spring的上下文。例如，添加了<code>spring-boot-starter-web</code>依赖，会自动添加Tomcat和SpringMVC的依赖，那么SpringBoot会对Tomcat和SpringMVC进行自动配置。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>@ComponenScan</code>会自动扫描指定包下的全部标有<code>@Component</code>的类，并注册成Bean，当然包括<code>@Component</code>下的子注解<code>@Service</code>、<code>@Repository</code>、<code>@Controller</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringBoot还会自动扫描<code>@SpringBootApplication</code>所在类的同级包以及子包里的Bean，所以入口类建议就配置在grounpID+arctifactID组合的包名下(这里为<code>com.example.demo</code>包)，使用idea自动创建项目的话idea会自动在这里创建。如果其他包没有和入口启动类在同一级的话，需要配置包扫描注解，<code>@EntityScan(&quot;xx.xx.entity&quot;)</code>:扫描实体类包；<code>@EnableJpaRepositories(basePackages = {&quot;xx.xx.jpa&quot;})</code>：扫描jpa包；<code>@ComponentScan(basePackages = {&quot;xx.xx.controller&quot;, &quot;xx.xx.service&quot;, &quot;xx.xx.service.Impl&quot;})</code>：扫描controller包、service包和Impl包。</p><h3 id="3-3-配置文件"><a href="#3-3-配置文件" class="headerlink" title="3.3 配置文件"></a>3.3 配置文件</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringBoot使用一个全局配置文件<code>application.properties</code>，它的作用是对一些默认配置的配置进行修改，放置在<code>src/main/resources</code>目录或者类路径的<code>/config</code>下。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringBoot不仅支持常规的properties配置文件，还支持yaml语言的配置文件。yaml是以数据为中心的语言，在配置数据的时候具有面向对象的特征。</p><h2 id="4-使用SpringBoot"><a href="#4-使用SpringBoot" class="headerlink" title="4. 使用SpringBoot"></a>4. 使用SpringBoot</h2><h3 id="4-1-集成JSP"><a href="#4-1-集成JSP" class="headerlink" title="4.1 集成JSP"></a>4.1 集成JSP</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringBot默认视图支持是Thymeleaf模板引擎，但是现在掌握的还不是很深，所以还是先来看看怎么集成JSP吧。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.在pom.xml文件中集成JSP，向pom.xlm添加以下依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.在<code>application.yml</code>文件中配置视图解析器，将我们的JSP文件重定向到/WEB-INF/views/目录下。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line"><span class="attr">  mvc:</span> </span><br><span class="line"><span class="attr">    view:</span> </span><br><span class="line"><span class="attr">      prefix:</span> <span class="string">/WEB-INF/views/</span></span><br><span class="line"><span class="attr">      suffix:</span> <span class="string">.jsp</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.编写一个controller，注解要用<code>@Controller</code>,不能用<code>@RestController</code>注解，不然不能写jsp。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: fby</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/10/23 下午5:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloworldController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"hello2.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"str"</span>,<span class="string">"Hello World!恭喜你，测试成功!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.在<code>src/main</code>目录下一次创建’webapp/WEB-INF/views’目录，并创建一个hello.jsp文件。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span> %&gt;</span><br><span class="line">猜猜会输出什么？&lt;br&gt;</span><br><span class="line">$&#123;str&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后在浏览器输入<a href="localhost:8080/hello2.do" target="_blank" rel="noopener">localhost:8080/hello2.do</a>就可以看到以下效果了。<br><img src="%E6%B5%8B%E8%AF%95JSP%E6%88%90%E5%8A%9F.png" alt="测试JSP"></p><h3 id="4-2-集成MyBatis"><a href="#4-2-集成MyBatis" class="headerlink" title="4.2 集成MyBatis"></a>4.2 集成MyBatis</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;是不是看到这就已经可以自己使用SpringBoot和JSP开发一个静态网页呢？开不开心？不要激动，下面还有数据库没连接呢，接下来就来看看怎么集成MyBatis吧。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.在<code>pom.xml</code>中添加对MySql和Mybatis的依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mysql --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.在application.yml配置文件添加配置。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  mvc:</span></span><br><span class="line"><span class="attr">    view:</span></span><br><span class="line"><span class="attr">      prefix:</span> <span class="string">/WEB-INF/views/</span></span><br><span class="line"><span class="attr">      suffix:</span> <span class="string">.jsp</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3306/test?characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.先在<code>com.example.demo</code>下创建<code>domain</code>和<code>mapper</code>包，再创建<code>User</code>实体类和<code>UserMapper</code>映射类分别放在<code>domain</code>和<code>mapper</code>包下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: fby</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/10/23 下午6:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: fby</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/10/23 下午6:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.然后在<code>controller</code>包下创建<code>UserController</code>类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: fby</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/10/23 下午6:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/userList.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">userList</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = userMapper.findAll();</span><br><span class="line">        model.addAttribute(<span class="string">"list"</span>,list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.编写一个<code>list.jsp</code>文件，用来显示数据库中准备好的数据。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;table border=<span class="string">'1'</span> cellspacing=<span class="string">'0'</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;id&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;name&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;age&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;list&#125;"</span> <span class="keyword">var</span>=<span class="string">"u"</span> varStatus=<span class="string">"user"</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123;u.id&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;u.name&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;u.age&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.在浏览器访问<a href="localhost:8080/userList.do" target="_blank" rel="noopener">localhost:8080/userList.do</a>即可看到数据库里数据。<br><img src="%E6%B5%8B%E8%AF%95MyBatis.png" alt="测试Mybatis"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以上就是使用SpringBoot搭建项目的全部内容，并且集成了JSP和MyBatis，按照上面的步骤一步一步的来，就可以搭建一个基于SpringBoot的web项目了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近有一个项目用到了SpringBoot框架，这也是我第一次用这个框架，对于新手小白来说，不是怎么友好，但是一旦搭建好了，确实上手很快，不用管底层是怎么实现的，也不用问某些东西是干嘛的，问就是去百度。因为人家的规定的就是让那么写，咱就是个使用者，跟着写就对了。emmmmmmm，好了，不在这瞎白活了，下面进入正题，开始搭建一个SpringBoot项目。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat服务器部署SSL证书</title>
    <link href="http://yoursite.com/2019/10/06/Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2SSL%E8%AF%81%E4%B9%A6/"/>
    <id>http://yoursite.com/2019/10/06/Tomcat服务器部署SSL证书/</id>
    <published>2019-10-06T10:00:32.000Z</published>
    <updated>2019-12-20T10:12:51.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tomcat服务器部署SSL证书"><a href="#Tomcat服务器部署SSL证书" class="headerlink" title="Tomcat服务器部署SSL证书"></a>Tomcat服务器部署SSL证书</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有时候项目需要服务器的协议是<code>https</code>协议，比如微信小程序的后台接口；这个时候就不得不把服务器协议修改为<code>https</code>。<code>https</code>和<code>http</code>有什么区别呢？区别就在于<code>https</code>比<code>http</code>多一个SSL证书，下面就是怎么获取SSL证书和怎么部署到服务器上。(唉，这也是当年自己踩了两个小时坑踩出来的啊！)</p><a id="more"></a><h2 id="1-获取SSL证书"><a href="#1-获取SSL证书" class="headerlink" title="1. 获取SSL证书"></a>1. 获取SSL证书</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为当初我是服务器是在阿里云上租的，所以SSL证书也是在阿里云上面获取的，当然，不要想着我会用钱去买这玩意，主要是太贵了，不过阿里云也算良心，能在上面免费获取一个一年的SSL证书。在这免费获取<a href="https://www.aliyun.com/product/cas?spm=5176.12825654.eofdhaal5.19.3dbd2c4ayD5k2Q&aly_as=nsmL9Pxx" target="_blank" rel="noopener">阿里云SSL证书</a>，打开连接之后选择<strong>证书对比</strong>，里面有一个免费证书可以立即购买。购买之后在SSL证书控制台进行查看自己的证书，然后提交审核，有时很几分钟就审核完了，有时候要好几天，这就要看运气了。审核通过之后在SSL证书列表最后面点击下载，然后选择自己对应的服务器类型。下载下来的是一个压缩包，里面有两个文件，一个是<code>.pfx</code>文件，这个就是我们的SSL证书；一个是<code>.txt</code>文件，这个是证书所对应的密码。此时SSL证书就到手了，接下来就可以进行部署了。</p><h2 id="2-部署到Tomcat"><a href="#2-部署到Tomcat" class="headerlink" title="2. 部署到Tomcat"></a>2. 部署到Tomcat</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将我们下载的证书部署到Tomcat上，首先需要通过Java jdk将<strong>pfx</strong>证书转换为<strong>jks</strong>证书，先将我们的<strong>prx</strong>证书放到jdk的bin目录下。然后通过cmd打开命令行窗口，进入到jdk的bin目录下，假设我们的证书是<strong>a.pfx</strong>，输入以下命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -importkeystore -srckeystore a.pfx -destkeystore a.jks -srcstoretype PKCS12 -deststoretype JKS</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;回车后输入JKS证书密码和PFX证书密码，强烈推荐将JKS密码与PFX证书密码相同，否则可能会导致Tomcat启动失败。<br>运行截图如下：<br><img src="jks.png" alt=""></p><blockquote><p><strong>注意</strong>: pfx文件必须放到你的jdk的 bin目录下面哦，并且它生成的jks文件也会在此目录下面的哦。</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有了jks文件之后，下面就是对Tomcat的操作了，首先将刚刚获得的<strong>jks</strong>文件放到Tomcat的<strong>conf</strong>目录下，然后打开Tomcat的<strong>server.xml</strong>文件，也是在conf目录下，需要修改以下三个地方。<br>1.把</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">address</span>=<span class="string">"0.0.0.0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">redirectPort</span>=<span class="string">"8443"</span>  /&gt;</span></span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"80"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">address</span>=<span class="string">"0.0.0.0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">redirectPort</span>=<span class="string">"443"</span>  /&gt;</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中第一个80端口是为HTTP(HyperText Transport Protocol)即超文本传输协议开放的，此为上网冲浪使用次数最多的协议，第二个443端口是SSL的专用端口。<br>2.把</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8009"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8009"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attr">redirectPort</span>=<span class="string">"443"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>使用443端口的理由同上。<br>3.把</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;Connector port="443" protocol="org.apache.coyote.http11.Http11NioProtocol"</span></span><br><span class="line"><span class="comment">               maxThreads="150" SSLEnabled="true"&gt;</span></span><br><span class="line"><span class="comment">        &lt;SSLHostConfig&gt;</span></span><br><span class="line"><span class="comment">            &lt;Certificate certificateKeystoreFile="conf/localhost-rsa.jks"</span></span><br><span class="line"><span class="comment">                    type="RSA" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;/SSLHostConfig&gt;</span></span><br><span class="line"><span class="comment">    &lt;/Connector&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"443"</span> <span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">maxThreads</span>=<span class="string">"150"</span> <span class="attr">SSLEnabled</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SSLHostConfig</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Certificate</span> <span class="attr">certificateKeystoreFile</span>=<span class="string">"conf/a.jks"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">certificateKeystorePassword</span>=<span class="string">"IBdiYc8W"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">type</span>=<span class="string">"RSA"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">SSLHostConfig</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Connector</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先去掉注释，然后certificateKeystoreFile属性是让你告诉服务器需要哪个SSL证书，后面就填复制过去的那个jks文件的名字（记得带上jks后缀），然后加上certificateKeystorePassword这个属性，后面的属性值填秘钥。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;到这，关于server.xml文件的配置就完成了。</p><h2 id="3-附加：开启SSL443端口"><a href="#3-附加：开启SSL443端口" class="headerlink" title="3.附加：开启SSL443端口"></a>3.附加：开启SSL443端口</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有时候我们完成以上工作之后，启动服务器依然没有办法访问到，这可能是因为云服务器的SSL端口没有打开。<br>1.打开”控制面板”–&gt;”系统和安全”–&gt;”Windows防火墙”</p><p>2.选择打开活关闭防火墙<br><img src="1.png" alt="开启防火墙" title="开启防火墙"></p><p>3.启用Windows防火墙<br><img src="2.png" alt="启用防火墙" title="启用防火墙"></p><p>4.选择”高级设置”<br><img src="3.png" alt="高级设置" title="高级设置"></p><p>5.依次点击”入站规则”–&gt;”新建规则”</p><p>6.选择”端口”，然后”下一步”<br><img src="4.png" alt="新建规则" title="新建规则"></p><p>7.选择”特定本地端口”，然后再后面的框中填入443(当然选择所有本地端口也可以开启443端口，但是端口全部开放可能会造成一定隐患，不建议)，然后”下一步”<br><img src="5.png" alt=""></p><p>8.选择”允许连接”，继续”下一步”<br><img src="6.png" alt=""></p><p>9.默认三个全部勾选，下一步<br><img src="7.png" alt=""></p><p>10.填写规则名称，建议填一个容易辨识的名字，描述可填可不填，点击完成<br><img src="8.png" alt=""></p><p>11.此时端口启用成功<br><img src="9.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;至此，所有配置和部署就已经全部完成了，接下来就可以通过<strong>https</strong>访问网站了。<br><img src="10.png" alt="https访问"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Tomcat服务器部署SSL证书&quot;&gt;&lt;a href=&quot;#Tomcat服务器部署SSL证书&quot; class=&quot;headerlink&quot; title=&quot;Tomcat服务器部署SSL证书&quot;&gt;&lt;/a&gt;Tomcat服务器部署SSL证书&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;有时候项目需要服务器的协议是&lt;code&gt;https&lt;/code&gt;协议，比如微信小程序的后台接口；这个时候就不得不把服务器协议修改为&lt;code&gt;https&lt;/code&gt;。&lt;code&gt;https&lt;/code&gt;和&lt;code&gt;http&lt;/code&gt;有什么区别呢？区别就在于&lt;code&gt;https&lt;/code&gt;比&lt;code&gt;http&lt;/code&gt;多一个SSL证书，下面就是怎么获取SSL证书和怎么部署到服务器上。(唉，这也是当年自己踩了两个小时坑踩出来的啊！)&lt;/p&gt;
    
    </summary>
    
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Mybatis小知识点</title>
    <link href="http://yoursite.com/2019/09/03/Mybatis%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2019/09/03/Mybatis小知识点/</id>
    <published>2019-09-03T15:32:32.000Z</published>
    <updated>2020-02-07T04:55:30.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis小知识点"><a href="#Mybatis小知识点" class="headerlink" title="Mybatis小知识点"></a>Mybatis小知识点</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这简单介绍了一下mybatis里的几个小知识点，分别是<code>parameterMap</code>与<code>parameterTyppe</code>、<code>resultMap</code>与<code>resultType</code>的区别，以及在xml文件中获取传递过来的值。同时讲解了一下怎么自定义多参数进行传值等。</p><a id="more"></a><h2 id="1-parameterMap与parameterTyppe详解"><a href="#1-parameterMap与parameterTyppe详解" class="headerlink" title="1. parameterMap与parameterTyppe详解"></a>1. parameterMap与parameterTyppe详解</h2><h3 id="1-1-parameterMap类型"><a href="#1-1-parameterMap类型" class="headerlink" title="1.1 parameterMap类型"></a>1.1 parameterMap类型</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>parameterMap</code>和<code>resuletMap</code>类似，表示将查询结果集中列值的类型一一映射到Java对象属性的类型，在开发过程中不推荐这种方式。</p><h3 id="1-2-parameterType类型"><a href="#1-2-parameterType类型" class="headerlink" title="1.2 parameterType类型"></a>1.2 parameterType类型</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>parameterType</code>声明输入参数的类型，将会传入这条语句中的参数类的完全限定名或别名，这个属性是可选的，因为Mybatis可以通过类型处理器<code>(TypeHandler)</code>推断出具体传入语句的参数，默认值为未设置<code>(unset)</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果SQL语句接收的参数是一个JavaBean对象，要在里面写该JavaBean对象的类的全名，即<code>包名.类名</code>，如果再开头mapper中已经配置了<code>namespace</code>别名，那么只要接收参数是这个mapper包下的，就可以直接写文件名。如果接受的是基本类型，那么久可以直接写基本类型，因为基本类型在这里已经自动被扫描了，所以不需要再写包名。如果传参的参数是集合，那么只需要写集合中的对象的类型即可,而不是集合本身。</p><h2 id="2-resultMap与resultType详解"><a href="#2-resultMap与resultType详解" class="headerlink" title="2. resultMap与resultType详解"></a>2. resultMap与resultType详解</h2><h3 id="2-1-resultMap类型"><a href="#2-1-resultMap类型" class="headerlink" title="2.1 resultMap类型"></a>2.1 resultMap类型</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;外部<code>resultMap</code>的命名引用。表示将查询结果集中的列一一映射到bean对象的各个属性。映射的查询结果集中的列标签可以根据需要灵活变化，并且，在映射关系中，还可以通过typeHandler设置实现查询结果值的类型转换，比如布尔型与0/1的类型转换。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在外部可以自定义一个<code>resultMap</code>。注入返回值类型 ,自定义结果集映射规则，自定义某个JavaBean的封装规则.如以下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- id：唯一id，方便引用。</span></span><br><span class="line"><span class="comment">    type：自定义规则的Java类。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Orders"</span> <span class="attr">id</span>=<span class="string">"orders"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- result：定义普通列封装规则 </span></span><br><span class="line"><span class="comment">            column：指定数据库中的哪一列列名</span></span><br><span class="line"><span class="comment">            property：指定对应的javaBean中的属性名</span></span><br><span class="line"><span class="comment">            jdbcType：指定对应数据库中属性的类型</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"User_id"</span> <span class="attr">property</span>=<span class="string">"userId"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"User_name"</span> <span class="attr">property</span>=<span class="string">"userName"</span>  <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--其他不指定的列会自动封装：我们只要写resultMap，就尽量把所有的列都写上 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在写SQL的返回值时在resultMap="orders",你想返回哪个自定义的mapper，你就把自定义哪个的id写上。--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-resultType类型"><a href="#2-2-resultType类型" class="headerlink" title="2.2 resultType类型"></a>2.2 resultType类型</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用resultType时我们应该注意:sql查询的列名要和resultType指定pojo的属性名相同，指定相同属性方可映射成功，如果sql查询的列名要和resultType指定pojo的属性名全部不相同(或是部分不相同)，则映射到pojo对象中的对应属性为null。例如有时候我们不需要查询<code>select * from user where id = ?</code>而是<code>select username,address _address where id = ?</code> 此时我们给查询的<code>address</code>列名给了一个别名<code>_address</code>，这样我们通过查询表中<code>address</code>的数据然后在将它映射到User对象时，该对象的<code>address</code>属性就为<code>null</code>，即没将从表中查询到的<code>address</code>数据映射到user对象的<code>address</code>属性中。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从这条语句中返回的期望类型的类的完全限定名或别名。 注意如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身。可以使用 <code>resultType</code> 或 <code>resultMap</code>，但不能同时使用。</p><h2 id="3-与-详解"><a href="#3-与-详解" class="headerlink" title="3. #{}与${}详解"></a>3. #{}与${}详解</h2><h3 id="3-1-取值"><a href="#3-1-取值" class="headerlink" title="3.1 #{}取值"></a>3.1 #{}取值</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>#{}</code>输入参数的占位符，#将传入的数据都当成一个字符串，会对传入的数据自动加上引号。在取值的时候mybatis会进行预编译。如果入参只有一个值，那么大括号中写什么多无所谓，如果传参有多个，还是写入参属性名写。最好规范一点都按入参属性名写，这样能一眼看出入参是什么。示例(ID=6)如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="comment">#&#123;ID&#125;</span></span><br></pre></td></tr></table></figure><p>会被先编译成</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span>=?</span><br></pre></td></tr></table></figure><p>然后再用ID的值(6)去替代<code>?</code>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>\#{}</code>因为有预编译，显得更安全。如果传入参数值中有<code>#</code>使用<code>#{}</code>,<em>(<code>#</code>在sql中表示注释)</em>，不会使<code>#</code>后面的sql失效。当入参的name=’hh#’，示例如下：<br>用<code>\#{}</code>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="comment">#&#123;name&#125; and id=#&#123;ID&#125;</span></span><br></pre></td></tr></table></figure><p>执行的sql为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'hh#'</span> <span class="keyword">and</span> <span class="keyword">id</span>=<span class="number">6</span></span><br></pre></td></tr></table></figure><p>用<code>\${}</code>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=$&#123;<span class="keyword">name</span>&#125; <span class="keyword">and</span> <span class="keyword">id</span>=$&#123;<span class="keyword">ID</span>&#125;</span><br></pre></td></tr></table></figure><p>执行的sql为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'hh'</span> <span class="comment"># and id=6</span></span><br></pre></td></tr></table></figure><p>因为<code>#</code>表示注释，所以执行效果相当于</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'hh'</span></span><br></pre></td></tr></table></figure><p><strong><code>#{}</code>可以指定其他属性</strong><br>        如果name传入参数的值为null，mybatis会默认name值为other类型，但是oracle数据库不能处理other类型，因为会报不能识别的错误。此使就可以用jdbcType属性指定类型。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="comment">#&#123;name,jdbcType=null&#125; and id=$&#123;ID&#125;</span></span><br></pre></td></tr></table></figure><p>当然也可以在mybatis配置文件中进行配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"jdbcTypeForNull"</span> <span class="attr">value</span>=<span class="string">"NULL"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-取值"><a href="#3-2-取值" class="headerlink" title="3.2 ${}取值"></a>3.2 ${}取值</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>${}</code>使直接进行编译，将传入的数据直接显示生成在SQL中，使用它可能会导致SQL注入攻击，能用<code>#{}</code>的地方就不用<code>${}</code>，但是写<code>order by</code>句子的时候一定用<code>${}</code>。如果入参只有一个值，那么大括号中要写<code>value</code>，如果传参有多个，还是写入参属性名写。示例如下(ID=6)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">id</span>=$&#123;<span class="keyword">ID</span>&#125;</span><br></pre></td></tr></table></figure><p>执行的sql为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">id</span>=<span class="number">6</span></span><br></pre></td></tr></table></figure><p>用<code>${}</code>模糊查询时(name=张)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">'%$&#123;value&#125;%'</span></span><br></pre></td></tr></table></figure><p>字符串拼接之后编译成</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">'%张%'</span></span><br></pre></td></tr></table></figure><p>jdbc不支持占位符的地方可以用<code>${}</code>进行取值，比如表名和排序字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> $&#123;<span class="keyword">user</span>&#125; <span class="keyword">where</span> <span class="keyword">name</span>=<span class="comment">#&#123;name&#125; and id=#&#123;ID&#125; order by $&#123;name&#125;</span></span><br></pre></td></tr></table></figure><h2 id="4-sql语句接收多个参数"><a href="#4-sql语句接收多个参数" class="headerlink" title="4. sql语句接收多个参数"></a>4. sql语句接收多个参数</h2><h3 id="4-1-JavaBean方法传值"><a href="#4-1-JavaBean方法传值" class="headerlink" title="4.1 JavaBean方法传值"></a>4.1 JavaBean方法传值</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当要向后台sql语句传入的参数个数是多个时，可以将要传入的参数封装成一个JavaBean，然后将这个JavaBean对象传入到mapper接口，在xml文件的sql语句通过属性名来进行取值。</p><h3 id="4-2-Map方法传值"><a href="#4-2-Map方法传值" class="headerlink" title="4.2 Map方法传值"></a>4.2 Map方法传值</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;向后台sql语句传递参数多于一个，又不方便封装成JavaBean是，可以将参数封装成Map集合，以键值对<code>(key-value)</code>的形式存储，然后将该Map集合传入后台xml文件。在xml文件中，执行该语句的接收参数属性设置为<code>parameterType=&quot;Map&quot;</code>，然后在sql中取值的属性名要和map中的键值对的键<code>(key)</code>一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Mapper mapper；</span><br><span class="line">Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">map.put(<span class="string">"id"</span>,<span class="number">1</span>);</span><br><span class="line">map.put(<span class="string">"name"</span>,<span class="string">"张三"</span>);</span><br><span class="line"><span class="comment">//调用mapper接口</span></span><br><span class="line">mapper.insert(map);</span><br></pre></td></tr></table></figure><p>下面是mapper中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure><p>下面是xml中的方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span><span class="attr">parameterType</span>=<span class="string">"Map"</span>&gt;</span></span><br><span class="line">    insert into user (id,name) values(#&#123;id&#125;,#&#123;name&#125;)  </span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-Param方法传值"><a href="#4-3-Param方法传值" class="headerlink" title="4.3 @Param方法传值"></a>4.3 @Param方法传值</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当参数较少时，也可以通过在接口的方法里注解<code>@Prama</code>，可以同时注解多个参数。<br><strong>创建接口方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据姓名和性别模糊查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Param</span> username 用户姓名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Param</span> sex 用户性别</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> User对象集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">select</span><span class="params">(@Param(<span class="string">"name"</span>)</span>String username,@<span class="title">Param</span><span class="params">(<span class="string">"sex"</span>)</span>String sex)</span>;</span><br></pre></td></tr></table></figure><p>@Param(“name”)就是告诉mybatis，参数username在SQL语句中用name作为key，也就是说，mybatis帮我们完成了调用时，类似param.put(“name”,username);</p><p><strong>配置SQl语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">    select * from user where name like '%$&#123;name&#125;%' and sex=#&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此处的<code>#{name}</code>对应的是@Param(“name”)中的name，需要完全一致。</p><p><strong>调用</strong><br>最后在调用时只需要按参数提示直接传入对应的实际参数即可。</p><h2 id="5-打印SQL语句"><a href="#5-打印SQL语句" class="headerlink" title="5. 打印SQL语句"></a>5. 打印SQL语句</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在项目测试阶段，有时候我们需要查看调用的SQL语句是那一句，可以通过log4j进行输出SQL语句，mybatis只需要配置一下配置文件就行了，在mybatis.xml文件中添加以下两行代码就可以，这样在调用到那句SQL语句的时候就可以对该语句进行输出在控制台，以方便查看。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mybatis小知识点&quot;&gt;&lt;a href=&quot;#Mybatis小知识点&quot; class=&quot;headerlink&quot; title=&quot;Mybatis小知识点&quot;&gt;&lt;/a&gt;Mybatis小知识点&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在这简单介绍了一下mybatis里的几个小知识点，分别是&lt;code&gt;parameterMap&lt;/code&gt;与&lt;code&gt;parameterTyppe&lt;/code&gt;、&lt;code&gt;resultMap&lt;/code&gt;与&lt;code&gt;resultType&lt;/code&gt;的区别，以及在xml文件中获取传递过来的值。同时讲解了一下怎么自定义多参数进行传值等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/categories/Mybatis/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring定时任务-@Scheduled注解</title>
    <link href="http://yoursite.com/2019/09/02/Spring%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-@Scheduled%E6%B3%A8%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/09/02/Spring定时任务-@Scheduled注解/</id>
    <published>2019-09-02T14:13:32.000Z</published>
    <updated>2020-02-07T04:55:55.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scheduled注解详解"><a href="#Scheduled注解详解" class="headerlink" title="@Scheduled注解详解"></a>@Scheduled注解详解</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有时候项目中需要用到定时任务，在某个时间点执行特定的任务，这时我们就可以使用spring中的定时任务——<strong>@Scheduled注解</strong>。下面就简单介绍一下<code>@Scheduledd</code>注解的使用。在springMVC项目中使用spring的定时任务步骤如下。</p><a id="more"></a><h2 id="1-配置springMVC-xml文件"><a href="#1-配置springMVC-xml文件" class="headerlink" title="1. 配置springMVC.xml文件"></a>1. 配置springMVC.xml文件</h2><p>加入tesk的命名空间:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:task = &quot;http://www.springframework.org/schema/task&quot;</span><br></pre></td></tr></table></figure><p>在xsi:schemaLocation中添加以下依赖:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//www.springframework.org/schema/task</span></span><br><span class="line">http:<span class="comment">//www.springframework.org/schema/task/spring-task-4.0.xsd"</span></span><br></pre></td></tr></table></figure><h2 id="2-配置定时任务的线程池"><a href="#2-配置定时任务的线程池" class="headerlink" title="2. 配置定时任务的线程池"></a>2. 配置定时任务的线程池</h2><p>推荐配置线程池，若不配置，多任务下会有问题。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">task:scheduler</span> <span class="attr">id</span>=<span class="string">"myScheduler"</span> <span class="attr">pool-size</span>=<span class="string">"5"</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>id是该线程池的唯一标识，用于启动该线程池的注解驱动。poo-size是线程池的容量。</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;spring的定时任务默认是单线程，多个任务执行起来时间会有问题。在下面定时任务的示例代码中，A任务中设置的有<code>TimeUnit.SECONDS.sleep(20);</code>那么如存在B任务，B任务会因为A任务执行起来需要20s二被延后20s执行。当我们配置了线程池之后，多线程下B任务就不会因为A任务执行起来要20s而别延后执行了。</p><h2 id="3-启动注解驱动的定时任务"><a href="#3-启动注解驱动的定时任务" class="headerlink" title="3. 启动注解驱动的定时任务"></a>3. 启动注解驱动的定时任务</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">task:annotation-driven</span> <span class="attr">scheduler</span>=<span class="string">"myScheduler"</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>scheduler指的是我们配置线程池的id名称，如果没有配置线程池，那么该元素可以不写。</p></blockquote><h2 id="4-配置扫描包"><a href="#4-配置扫描包" class="headerlink" title="4. 配置扫描包"></a>4. 配置扫描包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"test"</span>/&gt;</span>--&gt;</span><br></pre></td></tr></table></figure><blockquote><p>base-package元素是配置定时任务所在的包名。</p></blockquote><h2 id="5-编写定时任务"><a href="#5-编写定时任务" class="headerlink" title="5. 编写定时任务"></a>5. 编写定时任务</h2><p><code>@Scheduled</code>注解为定时任务，<code>cron</code>表达式里写执行的时机。以下代码是示例代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.DateTime;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ATask</span></span>&#123;</span><br><span class="line">       <span class="meta">@Scheduled</span>(cron=<span class="string">"0/10 * *  * * ? "</span>)   <span class="comment">//每10秒执行一次  </span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aTask</span><span class="params">()</span></span>&#123; </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">20</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            DateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);  </span><br><span class="line">            System.out.println(sdf.format(DateTime.now().toDate())+<span class="string">"*********A任务每10秒执行一次进入测试"</span>);    </span><br><span class="line">       &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。    </p></blockquote><blockquote><p>有时候启动web项目发现随着服务器启动的定时任务没有执行，这是因为xml的头文件<code>&lt;beans&gt;</code>里面的一个配置default-lazy-init=”true”。此处配置为懒加载，所以所有的bean都是懒加载，导致定时任务所在的bean根本没有实例化，里面的定时任务也没有执行，修改为default-lazy-init=”false”即可。 </p></blockquote><h2 id="6-Scheduled注解各参数详解"><a href="#6-Scheduled注解各参数详解" class="headerlink" title="6. @Scheduled注解各参数详解"></a>6. @Scheduled注解各参数详解</h2><h3 id="6-1-cron表达式详解"><a href="#6-1-cron表达式详解" class="headerlink" title="6.1 cron表达式详解"></a>6.1 cron表达式详解</h3><p>该参数接收一个<code>cron表达式</code>，<code>cron表达式</code>是一个字符串，字符串以5个或6个空格隔开，分开共6个或7个域，每个域代表一个含义</p><h4 id="6-1-1-cron表达式语法"><a href="#6-1-1-cron表达式语法" class="headerlink" title="6.1.1 cron表达式语法"></a>6.1.1 cron表达式语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[秒] [分] [时] [日] [月] [周] [年]</span><br></pre></td></tr></table></figure><blockquote><p>注：[年]不是必须的域，可以省略年，则一共6个域。</p></blockquote><table><thead><tr><th align="center">序号</th><th align="center">说明</th><th align="center">必填</th><th align="center">允许填写的值</th><th align="center">允许的通配符</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">秒</td><td align="center">是</td><td align="center">0-59</td><td align="center">, - * /</td></tr><tr><td align="center">2</td><td align="center">分</td><td align="center">是</td><td align="center">0-59</td><td align="center">, - * /</td></tr><tr><td align="center">3</td><td align="center">时</td><td align="center">是</td><td align="center">0-23</td><td align="center">, - * /</td></tr><tr><td align="center">4</td><td align="center">日</td><td align="center">是</td><td align="center">1-31</td><td align="center">, - * / L W</td></tr><tr><td align="center">5</td><td align="center">月</td><td align="center">是</td><td align="center">1-12/JAN-DEC</td><td align="center">, - * /</td></tr><tr><td align="center">6</td><td align="center">周</td><td align="center">是</td><td align="center">1-7/SUN-SAT</td><td align="center">, - * / L #</td></tr><tr><td align="center">7</td><td align="center">年</td><td align="center">否</td><td align="center">1970-2099</td><td align="center">, - * /</td></tr></tbody></table><h4 id="6-1-2-通配符说明"><a href="#6-1-2-通配符说明" class="headerlink" title="6.1.2 通配符说明"></a>6.1.2 通配符说明</h4><ul><li><code>*</code> 表示所有值。 例如:在分的字段上设置 *,表示每一分钟都会触发。</li><li><code>?</code> 表示不指定值。使用的场景为不需要关心当前设置这个字段的值。例如:要在每月的10号触发一个操作，但不关心是周几，所以需要周位置的那个字段设置为”?” 具体设置为 0 0 0 10 * ?</li><li><code>-</code> 表示区间。例如 在小时上设置 “10-12”,表示 10,11,12点都会触发。</li><li><code>,</code> 表示指定多个值，例如在周字段上设置 “MON,WED,FRI” 表示周一，周三和周五触发</li><li><code>/</code> 用于递增触发。如在秒上面设置”5/15” 表示从5秒开始，每增15秒触发(5,20,35,50)。 在月字段上设置’1/3’所示每月1号开始，每隔三天触发一次。</li><li><code>L</code> 表示最后的意思。在日字段设置上，表示当月的最后一天(依据当前月份，如果是二月还会依据是否是润年[leap]), 在周字段上表示星期六，相当于“7”或“SAT”。如果在“L”前加上数字，则表示该数据的最后一个。例如在周字段上设置“6L”这样的格式,则表示“本月最后一个星期五”</li><li><code>W</code> 表示离指定日期的最近那个工作日(周一至周五). 例如在日字段上置“15W”，表示离每月15号最近的那个工作日触发。如果15号正好是周六，则找最近的周五(14号)触发, 如果15号是周未，则找最近的下周一(16号)触发.如果15号正好在工作日(周一至周五)，则就在该天触发。如果指定格式为 “1W”,它则表示每月1号往后最近的工作日触发。如果1号正是周六，则将在3号下周一触发。(注，“W”前只能设置具体的数字,不允许区间“-”)。</li><li><code>#</code> 序号(表示每月的第几个周几)，例如在周字段上设置“6#3”表示在每月的第三个周六.注意如果指定“#5”,正好第五周没有周六，则不会触发该配置(用在母亲节和父亲节再合适不过了) ；小提示：‘L’和 ‘W’可以一组合使用。如果在日字段上设置“LW”,则表示在本月的最后一个工作日触发；周字段的设置，若使用英文字母是不区分大小写的，即MON与mon相同。</li></ul><p><strong>示例:</strong></p><ul><li><p>每隔5秒执行一次：*/5 * * * * ?</p></li><li><p>每隔1分钟执行一次：0 */1 * * * ?</p></li><li><p>每天23点执行一次：0 0 23 * * ?</p></li><li><p>每天凌晨1点执行一次：0 0 1 * * ?</p></li><li><p>每月1号凌晨1点执行一次：0 0 1 1 * ?</p></li><li><p>每月最后一天23点执行一次：0 0 23 L * ?</p></li><li><p>每周星期天凌晨1点实行一次：0 0 1 ? * L</p></li><li><p>在26分、29分、33分执行一次：0 26,29,33 * * * ?</p></li><li><p>每天的0点、13点、18点、21点都执行一次：0 0 0,13,18,21 * * ?</p></li></ul><h3 id="6-2-zone"><a href="#6-2-zone" class="headerlink" title="6.2 zone"></a>6.2 zone</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;时区。接收一个<code>java.util.TimeZone#ID</code>。<code>cron表达式</code>会基于该时区解析。默认是一个空字符串，即取服务器所在地的时区。比如我们一般使用的时区<code>Asia/Shanghai</code>。该字段我们一般留空。</p><h3 id="6-3-fixedDelay"><a href="#6-3-fixedDelay" class="headerlink" title="6.3 fixedDelay"></a>6.3 fixedDelay</h3><p>上一次执行完毕时间点之后多长时间再执行。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scheduled</span>(fixedDelay = <span class="number">5000</span>) <span class="comment">//上一次执行完毕时间点之后5秒再执行</span></span><br></pre></td></tr></table></figure><h3 id="6-4-fixedDelayString"><a href="#6-4-fixedDelayString" class="headerlink" title="6.4 fixedDelayString"></a>6.4 fixedDelayString</h3><p>与<code>fixedDelay</code>意思相同，只是使用字符串的形式。唯一不同的是支持占位符。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scheduled</span>(fixedDelayString = <span class="string">"5000"</span>) <span class="comment">//上一次执行完毕时间点之后5秒再执行</span></span><br></pre></td></tr></table></figure><p>占位符的使用(配置文件中有配置：time.fixedDelay=5000)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scheduled</span>(fixedDelayString = <span class="string">"$&#123;time.fixedDelay&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFixedDelayString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Execute at "</span> + System.currentTimeMillis());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-5-fixedRate"><a href="#6-5-fixedRate" class="headerlink" title="6.5 fixedRate"></a>6.5 fixedRate</h3><p>上一次开始执行时间点之后多长时间再执行。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scheduled</span>(fixedRate = <span class="number">5000</span>) <span class="comment">//上一次开始执行时间点之后5秒再执行</span></span><br></pre></td></tr></table></figure><h3 id="6-6-fixedRateString"><a href="#6-6-fixedRateString" class="headerlink" title="6.6 fixedRateString"></a>6.6 fixedRateString</h3><p>与<code>fixedRate</code>意思相同，只是使用字符串的形式。唯一不同的是支持占位符。</p><h3 id="6-7-initialDelay"><a href="#6-7-initialDelay" class="headerlink" title="6.7 initialDelay"></a>6.7 initialDelay</h3><p>第一次延迟多长时间后再执行。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scheduled</span>(initialDelay=<span class="number">1000</span>, fixedRate=<span class="number">5000</span>) <span class="comment">//第一次延迟1秒后执行，之后按fixedRate的规则每5秒执行一次</span></span><br></pre></td></tr></table></figure><h3 id="6-8-initialDelayString"><a href="#6-8-initialDelayString" class="headerlink" title="6.8 initialDelayString"></a>6.8 initialDelayString</h3><p>与<code>initialDelay</code>意思相同，只是使用字符串的形式。唯一不同的是支持占位符。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Scheduled注解详解&quot;&gt;&lt;a href=&quot;#Scheduled注解详解&quot; class=&quot;headerlink&quot; title=&quot;@Scheduled注解详解&quot;&gt;&lt;/a&gt;@Scheduled注解详解&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;有时候项目中需要用到定时任务，在某个时间点执行特定的任务，这时我们就可以使用spring中的定时任务——&lt;strong&gt;@Scheduled注解&lt;/strong&gt;。下面就简单介绍一下&lt;code&gt;@Scheduledd&lt;/code&gt;注解的使用。在springMVC项目中使用spring的定时任务步骤如下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-@RequestMapping注解</title>
    <link href="http://yoursite.com/2019/09/01/Spring-@RequestMapping%E6%B3%A8%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/09/01/Spring-@RequestMapping注解/</id>
    <published>2019-09-01T10:00:32.000Z</published>
    <updated>2020-02-07T04:55:49.596Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="@RequestMapping注解"></a>@RequestMapping注解</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping 是 Spring Web 应用程序中最常被用到的注解之一。这个注解会将 HTTP 请求映射到 MVC 和 REST 控制器的处理方法上。</p><a id="more"></a><h2 id="1-基础用法"><a href="#1-基础用法" class="headerlink" title="1. 基础用法"></a>1. 基础用法</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping是配置web请求的映射，该注解可以在控制器类的级别和/或其中的方法的级别上使用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在类的级别上的注解会将一个特定请求或者请求模式映射到一个控制器之上。之后还可以另外添加方法级别的注解来进一步值定到处理方法的映射关系。<br>下面是一个同时在类和方法上应用了@RequestMapping注解示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/home"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)  </span><br><span class="line">    <span class="function">String <span class="title">get</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="comment">//mapped to hostname:port/home/  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello from get"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)  </span><br><span class="line">    <span class="function">String <span class="title">index</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="comment">//mapped to hostname:port/home/index/  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello from index"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如上述代码所示，到/home的请求会由get()方法来处理，而到/home/index的请求会有index()方法处理。</p><h2 id="2-处理多个URL"><a href="#2-处理多个URL" class="headerlink" title="2. 处理多个URL"></a>2. 处理多个URL</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以将多个请求映射到一个方法上面，只需要添加一个带有请求路径值列表的@RequestMapping注解就行了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/home"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = &#123;  </span><br><span class="line">        <span class="string">""</span>,  </span><br><span class="line">        <span class="string">"/page"</span>,  </span><br><span class="line">        <span class="string">"page*"</span>,  </span><br><span class="line">        <span class="string">"view/*,**/msg"</span>  </span><br><span class="line">    &#125;)  </span><br><span class="line">    <span class="function">String <span class="title">indexMultipleMapping</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello from index multiple mapping."</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping支持通配符以及ANT风格的路径。上述示例代码中，以下的的URL都会由indexMultipleMapping()来处理:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">localhost:<span class="number">8080</span>/home</span><br><span class="line">localhost:<span class="number">8080</span>/home/</span><br><span class="line">localhost:<span class="number">8080</span>/home/page</span><br><span class="line">localhost:<span class="number">8080</span>/home/pageabc</span><br><span class="line">localhost:<span class="number">8080</span>/home/view/</span><br><span class="line">localhost:<span class="number">8080</span>/home/view/view</span><br></pre></td></tr></table></figure><h2 id="3-处理动态URI"><a href="#3-处理动态URI" class="headerlink" title="3. 处理动态URI"></a>3. 处理动态URI</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping 注解可以同 @PathVaraible 注解一起使用，用来处理动态的 URI，URI 的值可以作为控制器中处理方法的参数。你也可以使用正则表达式来只处理可以匹配到正则表达式的动态 URI。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/home"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/fetch/&#123;id&#125;"</span>, method = RequestMethod.GET)  </span><br><span class="line">    <span class="function">String <span class="title">getDynamicUriValue</span><span class="params">(@PathVariable String id)</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"ID is "</span> + id);  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dynamic URI parameter fetched"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/fetch/&#123;id:[a-z]+&#125;/&#123;name&#125;"</span>, method = RequestMethod.GET)  </span><br><span class="line">    <span class="function">String <span class="title">getDynamicUriValueRegex</span><span class="params">(@PathVariable(<span class="string">"name"</span>)</span> String name) </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"Name is "</span> + name);  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dynamic URI parameter fetched using regex"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这段代码中，方法 getDynamicUriValue() 会在发起到localhost:8080/home/fetch/10 的请求时执行。这里 getDynamicUriValue() 方法 id 参数也会动态地被填充为 10 这个值。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;方法 getDynamicUriValueRegex() 会在发起到localhost:8080/home/fetch/category/shirt 的请求时执行。不过，如果发起的请求是 /home/fetch/10/shirt 的话，会抛出异常，因为这个URI并不能匹配正则表达式。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@PathVariable 同 @RequestParam的运行方式不同。你使用 @PathVariable 是为了从 URI 里取到查询参数值。换言之，你使用 @RequestParam 是为了从 URI 模板中获取参数值。 </p><h2 id="4-带有-RequestParam参数"><a href="#4-带有-RequestParam参数" class="headerlink" title="4. 带有@RequestParam参数"></a>4. 带有@RequestParam参数</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@RequestParam 注解配合 @RequestMapping 一起使用，可以将请求的参数同处理方法的参数绑定在一起。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@RequestParam 注解使用的时候可以有一个值，也可以没有值。这个值指定了需要被映射到处理方法参数的请求参数, 代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span> </span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/home"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;   </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/id"</span>)  </span><br><span class="line">    <span class="function">String <span class="title">getIdByValue</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> String personId) </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"ID is "</span> + personId);  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Get ID from query string of URL with value element"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/personId"</span>)  </span><br><span class="line">    <span class="function">String <span class="title">getId</span><span class="params">(@RequestParam String personId)</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"ID is "</span> + personId);  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Get ID from query string of URL without value element"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在代码的第5行，id这个请求参数被映射到了getIdByValue() 这个处理方法的参数 personId 上。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果请求参数和处理方法参数的名称一样的话，@RequestParam注解的value这个参数就可以省略掉了，如代码的第10行所示。</p><p>@RequestParam注解的<strong>required</strong>这个参数定义了参数值是否是必须要传的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/home"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/name"</span>)  </span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">(@RequestParam(value = <span class="string">"person"</span>, required = <span class="keyword">false</span>)</span> String personName) </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Required element of request param"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这段代码中，因为 required 被指定为 false，所以 getName() 处理方法对于如下两个 URL 都会进行处理：</p><blockquote><p>/home/name/person=xyz<br>/home/name</p></blockquote><p>@RequestParam的<strong>defaultValue</strong>取值就是用来给取值为空的请求参数提供一个默认值的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/home"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/name"</span>)  </span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">(@RequestParam(value = <span class="string">"person"</span>, defaultValue = <span class="string">"John"</span>)</span> String personName) </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Required element of request param"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这段代码中，如果person这个请求参数为空，那么getName()处理方法就会接收”John”这个默认值作为其参数；如果person请求参数不为空，那么方法接收的personName参数就是person。</p><h2 id="5-处理请求参数"><a href="#5-处理请求参数" class="headerlink" title="5. 处理请求参数"></a>5. 处理请求参数</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping直径二的params元素可以进一步缩小请求映射的定位范围。使用params元素，可以让多个处理方法处理到同一个URL的请求，而这些请求是不一样的。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以用<code>myParams=myValue</code>这种格式来定义参数，也可以使用通配符来指定特定的参数值在请求中是不是受支持的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/home"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/fetch"</span>, params = &#123;  </span><br><span class="line">        <span class="string">"personId=10"</span>  </span><br><span class="line">    &#125;)  </span><br><span class="line">    <span class="function">String <span class="title">getParams</span><span class="params">(@RequestParam(<span class="string">"personId"</span>)</span> String id) </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Fetched parameter using params attribute = "</span> + id;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/fetch"</span>, params = &#123;  </span><br><span class="line">        <span class="string">"personId=20"</span>  </span><br><span class="line">    &#125;)  </span><br><span class="line">    <span class="function">String <span class="title">getParamsDifferent</span><span class="params">(@RequestParam(<span class="string">"personId"</span>)</span> String id) </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Fetched parameter using params attribute = "</span> + id;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这段代码中，getParams() 和 getParamsDifferent() 两个方法都能处理相同的一个 URL (/home/fetch) ，但是会根据 params 元素的配置不同而决定具体来执行哪一个方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例如，当 URL 是 /home/fetch?id=10 的时候, getParams() 会执行，因为 id 的值是10,。对于 localhost:8080/home/fetch?personId=20 这个URL, getParamsDifferent() 处理方法会得到执行，因为 id 值是 20。 </p><h2 id="6-处理HTTP得各种方法"><a href="#6-处理HTTP得各种方法" class="headerlink" title="6. 处理HTTP得各种方法"></a>6. 处理HTTP得各种方法</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Spring MVC的@RequestMapping注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以及 PATCH。所有的请求默认都会是 HTTP\GET 类型的。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了能将一个请求映射到一个特定的 HTTP 方法，你需要在 @RequestMapping 中使用<strong>method</strong>来声明 HTTP 请求所使用的方法类型，如下所示： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/home"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)  </span><br><span class="line">    <span class="function">String <span class="title">get</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello from get"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.DELETE)  </span><br><span class="line">    <span class="function">String <span class="title">delete</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello from delete"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST)  </span><br><span class="line">    <span class="function">String <span class="title">post</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello from post"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.PUT)  </span><br><span class="line">    <span class="function">String <span class="title">put</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello from put"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.PATCH)  </span><br><span class="line">    <span class="function">String <span class="title">patch</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello from patch"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面得代码中，@RequestMapping注解中的method元素声明了HTTP请求方法的HTTP请求类型。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所有的请求处理方法都会处理从”/home”这个同一URL进来的请求，但是要看指定的HTTP方法是什么来决定用哪个方法来处理。例如一个POST类型的请求/home会交给post()方法来处理。</p><h2 id="7-默认的处理方法"><a href="#7-默认的处理方法" class="headerlink" title="7. 默认的处理方法"></a>7. 默认的处理方法</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在控制器中，你可以有一个默认的处理方法，它可以在有一个向默认URL发起请求时被执行。下面时默认处理方法的示例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/home"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@RequestMapping</span>()  </span><br><span class="line">    String  </span><br><span class="line">    <span class="keyword">default</span> () &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is a default method for the class"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这段代码中，向/home发起的一个请求将会有default()来处理，因为注解没有指向任何值。</p><h2 id="8-快捷方式"><a href="#8-快捷方式" class="headerlink" title="8. 快捷方式"></a>8. 快捷方式</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Spring 4.3 引入了方法级注解的变体，也被叫做 @RequestMapping 的组合注解。组合注解可以更好的表达被注解方法的语义。它们所扮演的角色就是针对 @RequestMapping 的封装，而且成了定义端点的标准方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例如，@GetMapping 是一个组合注解，它所扮演的是 @RequestMapping(method =RequestMethod.GET) 的一个快捷方式。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;方法级别的注解变体有如下几个：</p><ul><li>@GetMapping</li><li>@PostMapping</li><li>@PutMapping</li><li>@DeleteMapping</li><li>@PatchMapping<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如下代码展示了如何使用组合注解。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/home"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/person"</span>)  </span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> ResponseEntity &lt; String &gt; getPerson() &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity &lt; String &gt; (<span class="string">"Response from GET"</span>, HttpStatus.OK);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/person/&#123;id&#125;"</span>)  </span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> ResponseEntity &lt; String &gt; getPersonById(<span class="meta">@PathVariable</span> String id) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity &lt; String &gt; (<span class="string">"Response from GET with id "</span> + id, HttpStatus.OK);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/person"</span>)  </span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> ResponseEntity &lt; String &gt; postPerson() &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity &lt; String &gt; (<span class="string">"Response from POST method"</span>, HttpStatus.OK);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/person"</span>)  </span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> ResponseEntity &lt; String &gt; putPerson() &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity &lt; String &gt; (<span class="string">"Response from PUT method"</span>, HttpStatus.OK);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/person"</span>)  </span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> ResponseEntity &lt; String &gt; deletePerson() &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity &lt; String &gt; (<span class="string">"Response from DELETE method"</span>, HttpStatus.OK);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@PatchMapping</span>(<span class="string">"/person"</span>)  </span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> ResponseEntity &lt; String &gt; patchPerson() &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity &lt; String &gt; (<span class="string">"Response from PATCH method"</span>, HttpStatus.OK);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这段代码中，每一个处理方法都使用 @RequestMapping 的组合变体进行了注解。尽管每个变体都可以使用带有方法属性的 @RequestMapping 注解来互换实现, 但组合变体仍然是一种最佳的实践 — 这主要是因为组合注解减少了在应用程序上要配置的元数据，并且代码也更易读。 </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RequestMapping注解&quot;&gt;&lt;a href=&quot;#RequestMapping注解&quot; class=&quot;headerlink&quot; title=&quot;@RequestMapping注解&quot;&gt;&lt;/a&gt;@RequestMapping注解&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@RequestMapping 是 Spring Web 应用程序中最常被用到的注解之一。这个注解会将 HTTP 请求映射到 MVC 和 REST 控制器的处理方法上。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
  </entry>
  
</feed>
