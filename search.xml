<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2019/10/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
        <tag>随手</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Thymeleaf</title>
    <url>/2019/10/24/SpringBoot%E6%95%B4%E5%90%88Thymeleaf/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学习完SpringBoot之后，以后写web项目就用它了，以前开发web项目使用的还是JSP页面，但是SpringBoot官方是不支持JSP的，它默认支持的模板是Thymeleaf，既然学习了SpringBoot，怎么的也要学习一下人家的官方”原配”啊。</p>
<a id="more"></a>
<h1 id="SpringBoot整合Thymeleaf"><a href="#SpringBoot整合Thymeleaf" class="headerlink" title="SpringBoot整合Thymeleaf"></a>SpringBoot整合Thymeleaf</h1><h2 id="1-Thymeleaf"><a href="#1-Thymeleaf" class="headerlink" title="1. Thymeleaf"></a>1. Thymeleaf</h2><h3 id="1-1-模板引擎"><a href="#1-1-模板引擎" class="headerlink" title="1.1 模板引擎"></a>1.1 模板引擎</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;市面上主流的 Java 模板引擎有：JSP、Velocity、Freemarker、Thymeleaf。JSP 本质也是模板引擎，SpringBoot官方推荐使用<strong>Thymeleaf</strong>模板引擎。模板引擎原理图如下，模板引擎的作用都是将模板(页面)和数据进行整合然后输出显示，区别在于不同的模板使用不同的语法，如JSP的JSTL表达式，以及JSP自己的表达式和语法，同理Thymeleaf也有自己的语法。<br><img src="%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E.png" alt="模板引擎"></p>
<h3 id="1-2-简述Thymeleaf"><a href="#1-2-简述Thymeleaf" class="headerlink" title="1.2 简述Thymeleaf"></a>1.2 简述Thymeleaf</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thymeleaf是适用于Web和独立环境的现代服务器端Java模板引擎。简单说， Thymeleaf 是一个跟 Velocity、FreeMarker 类似的模板引擎，它可以完全替代JSP。Thymeleaf的主要目标是为开发工作流程带来优雅的自然模板 -HTML可以在浏览器中正确显示，也可以作为静态原型工作，从而可以在开发团队中加强协作。</p>
<h3 id="1-3-Thymeleaf优势"><a href="#1-3-Thymeleaf优势" class="headerlink" title="1.3 Thymeleaf优势"></a>1.3 Thymeleaf优势</h3><ul>
<li>1、Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。</li>
<li>2、Thymeleaf 开箱即用的特性。它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、该jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</li>
<li>3、Thymeleaf 提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</li>
</ul>
<h2 id="2-SpringBoot使用Thymeleaf"><a href="#2-SpringBoot使用Thymeleaf" class="headerlink" title="2. SpringBoot使用Thymeleaf"></a>2. SpringBoot使用Thymeleaf</h2><h3 id="2-1-配置Thymeleaf"><a href="#2-1-配置Thymeleaf" class="headerlink" title="2.1 配置Thymeleaf"></a>2.1 配置Thymeleaf</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.在pom.xml文件引入thymeleaf模板引擎依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- thymeleaf依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.在application.yml中配置thymeleaf模板解析器属性。thymeleaf配置是在spring配置下的。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">    thymeleaf:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span>                           <span class="comment"># 是否为Web框架启用Thymeleaf视图解析</span></span><br><span class="line"><span class="attr">        prefix:</span> <span class="attr">classpath:/templates/</span>           <span class="comment"># 配置视图解析器前缀</span></span><br><span class="line"><span class="attr">        suffix:</span> <span class="string">.html</span>                           <span class="comment"># 配置试图解析器后缀</span></span><br><span class="line"><span class="attr">        mode:</span> <span class="string">HTML</span>                              <span class="comment"># 应用于模板的html模式</span></span><br><span class="line"><span class="attr">        encoding:</span> <span class="string">utf-8</span>                         <span class="comment"># 编码格式 </span></span><br><span class="line">        <span class="string">servlet.content-type:</span> <span class="string">text/html</span>         <span class="comment"># 指定请求信息格式</span></span><br><span class="line"><span class="attr">        cache:</span> <span class="literal">false</span>                            <span class="comment"># 模板缓存。开发时关闭缓存,不然没法看到实时页面</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-使用Thymeleaf"><a href="#2-2-使用Thymeleaf" class="headerlink" title="2.2 使用Thymeleaf"></a>2.2 使用Thymeleaf</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.在templates文件夹下创建thymeleaf.html模板文件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>亲爱的<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>，你好！<span class="tag">&lt;/<span class="name">h4</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.创建一个controller类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: fby</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/10/24 下午7:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/thymeleaf.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">thymeleaf</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"name"</span>,<span class="string">"fanfan"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"thymeleaf"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.然后启动项目，在浏览器中输入<a href="localhost:8080/thymeleaf.do" target="_blank" rel="noopener">localhost:8080/thymeleaf.do</a>，成功的页面显示如下。<br><img src="%E6%B5%8B%E8%AF%95.png" alt="测试"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>注意:</strong>这里需要说明一下，html5创建的模板里<code>&lt;meta&gt;</code>标签是下面这样的。这个一开始是没有结束符号的，springboot默认使用的版本是<code>thymeleaf2.0</code>，如果使用<code>3.0</code>的话需要将其改写为带有结束标语的。要么就删掉，因为在<code>yml</code>文件中已经设置了编码(一般不建议)。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">html5模板：</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">thymeleaf3.0版本改写为</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-Thymeleaf详解"><a href="#3-Thymeleaf详解" class="headerlink" title="3. Thymeleaf详解"></a>3. Thymeleaf详解</h2><h3 id="3-1-引入"><a href="#3-1-引入" class="headerlink" title="3.1 引入"></a>3.1 引入</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要想在html文件里使用thymeleaf的语法，首先要现在文件里引入<code>th</code>标签的命名空间。<code>xmlns</code>属性可以在文档里定义一个或多个可供选择的命名空间。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-常用th标签"><a href="#3-2-常用th标签" class="headerlink" title="3.2 常用th标签"></a>3.2 常用th标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">关键字          功能介绍                                           示例</span><br><span class="line">th:id           替换id                              <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:id</span>=<span class="string">"'xxx' + $&#123;collect.id&#125;"</span>/&gt;</span></span><br><span class="line">th:text         文本替换                            <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;collect.description&#125;"</span>&gt;</span>description<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">th:utext        支持html的文本替换                  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:utext</span>=<span class="string">"$&#123;htmlcontent&#125;"</span>&gt;</span>conten<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">th:object       替换对象                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">"$&#123;session.user&#125;"</span>&gt;</span></span><br><span class="line">th:value        属性赋值                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">"$&#123;user.name&#125;"</span> /&gt;</span></span><br><span class="line">th:with         变量赋值运算                         <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:with</span>=<span class="string">"isEven=$&#123;prodStat.count&#125;%2==0"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">th:style        设置样式                            <span class="tag">&lt;<span class="name">th:style="'display:'</span> + @&#123;($&#123;<span class="attr">sitrue</span>&#125; ? '<span class="attr">none</span>' <span class="attr">:</span> '<span class="attr">inline-block</span>')&#125; + ''"&gt;</span></span><br><span class="line">th:onclick      点击事件                            <span class="tag">&lt;<span class="name">th:οnclick="'getCollect()'"</span>&gt;</span></span><br><span class="line">th:each         属性赋值                            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"user,userStat:$&#123;users&#125;"</span>&gt;</span></span><br><span class="line">th:if           判断条件                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:if</span>=<span class="string">"$&#123;userId == collect.userId&#125;"</span> &gt;</span></span><br><span class="line">th:unless       和th:if判断相反                     <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/login&#125;"</span> <span class="attr">th:unless</span>=<span class="string">$&#123;session.user</span> != <span class="string">null&#125;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">th:href         链接地址                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/login&#125;"</span> <span class="attr">th:unless</span>=<span class="string">$&#123;session.user</span> != <span class="string">null&#125;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span> /&gt;</span><br><span class="line">th:switch       多路选择 配合th:case 使用            <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;user.role&#125;"</span>&gt;</span></span><br><span class="line">th:case         th:switch的一个分支                  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'admin'"</span>&gt;</span>User is an administrator<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">th:fragment     布局标签，定义一个代码片段，          <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"alert"</span>&gt;</span></span><br><span class="line">                方便其它地方引用   </span><br><span class="line">th:include      布局标签，替换内容到引入的文件        <span class="tag">&lt;<span class="name">head</span> <span class="attr">th:include</span>=<span class="string">"layout :: htmlhead"</span> <span class="attr">th:with</span>=<span class="string">"title='xx'"</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span> /&gt;</span><br><span class="line">th:replace      布局标签，替换整个标签到引入的文件     <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"fragments/header :: title"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">th:selected     selected选择框 选中                  th:selected="($&#123;xxx.id&#125; == $&#123;configObj.dd&#125;)"</span><br><span class="line">th:src          图片类地址引入                       <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"img-responsive"</span> <span class="attr">alt</span>=<span class="string">"App Logo"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/img/logo.png&#125;"</span> /&gt;</span></span><br><span class="line">th:inline       定义js脚本可以使用变量               <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">th:action       表单提交的地址                       <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"subscribe.html"</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/subscribe&#125;"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">th:attr         设置标签属性，多个属性可以用比如       <span class="tag">&lt;<span class="name">th:attr="src=@&#123;</span>/<span class="attr">image</span>/<span class="attr">aa.jpg</span>&#125;,<span class="attr">title</span>=<span class="string">#&#123;logo&#125;</span>"&gt;</span></span></span></span><br><span class="line">                逗号分隔 </span><br><span class="line"><span class="handlebars"><span class="xml">th:remove       删除某个属性                         <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:remove</span>=<span class="string">"all"</span>&gt;</span></span></span></span><br><span class="line">　　　　　　　　　　　　　　　　　　　　			   1.all:删除包含标签和所有的孩子。</span><br><span class="line">　　　　　　　　　　　　　　　　　　　　			   2.body:不包含标记删除,但删除其所有的孩子。</span><br><span class="line">　　　　　　　　　　　　　　　　　　　　			   3.tag:包含标记的删除,但不删除它的孩子。</span><br><span class="line">　　　　　　　　　　　　　　　　　　　　			   4.all-but-first:删除所有包含标签的孩子,除了第一个。</span><br><span class="line">　　　　　　　　　　　　　　　　　　　　			   5.none:什么也不做。这个值是有用的动态评估。</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;还有非常多的标签，这里只列出最常用的几个,由于一个标签内可以包含多个th:x属性，其生效的优先级顺序为:<br>include,each,if/unless/switch/case,with,attr/attrprepend/attrappend,value/href,src ,etc,text/utext,fragment,remove。</p>
<h3 id="3-3-常用语法"><a href="#3-3-常用语法" class="headerlink" title="3.3 常用语法"></a>3.3 常用语法</h3><h4 id="3-3-1-标准表达式"><a href="#3-3-1-标准表达式" class="headerlink" title="3.3.1 标准表达式"></a>3.3.1 标准表达式</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thymeleaf语法有很多，想更深入了解的话可以去看<a href="https://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html" target="_blank" rel="noopener">官方文档</a>。在这先简单介绍一下标准表达式功能：</p>
<ul>
<li>简单表达式<ul>
<li>变量表达式: <strong>${…}</strong></li>
<li>选择表达式: <strong>*{…}</strong></li>
<li>消息表达式: <strong>#{…}</strong></li>
<li>链接URL表达式: <strong>@{…}</strong></li>
</ul>
</li>
<li>文字<ul>
<li>文本文字: <code>&#39;one text&#39;</code>，…</li>
<li>号码文字: <code>0</code>，<code>34</code>，<code>3.2</code>，…</li>
<li>布尔文字: <code>true</code>，<code>false</code></li>
<li>空文字: <code>null</code></li>
<li>文字标记: <code>one</code>，<code>sometext</code>，…</li>
</ul>
</li>
<li>文字操作<ul>
<li>字符串串联: <code>+</code></li>
<li>文字替换: <code>|The name is ${naem}|</code></li>
</ul>
</li>
<li>算数运算<ul>
<li>二元运算符: <code>+</code>，<code>-</code>，<code>*</code>，<code>/</code>，<code>%</code></li>
<li>减号(一元运算符): <code>-</code></li>
</ul>
</li>
<li>布尔运算<ul>
<li>二元运算符: <code>and</code>，<code>or</code></li>
<li>布尔否定(一元运算符): <code>!</code>，<code>not</code></li>
</ul>
</li>
<li>比较和平等<ul>
<li>比较: <code>&gt;</code>，<code>&lt;</code>，<code>&gt;=</code>，<code>&lt;=</code> <code>（gt，lt，ge，le）</code></li>
<li>等号运算符: <code>==</code>，<code>!=</code> <code>(eq，ne)</code></li>
</ul>
</li>
<li>条件运算符<ul>
<li>如果-则: <code>(if) ? (then)</code></li>
<li>如果-则-否则: <code>(if) ? (then) : (else)</code></li>
<li>默认: <code>(value) ?: (defautvalue)</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>以上所有的这些功能都可以进行组合和嵌套。<br><code>&#39;User is of type &#39; + (${user.isAdmin()} ? &#39;Administrator&#39; : (${user.type} ?: &#39;Unknown&#39;))</code></p>
</blockquote>
<h4 id="3-3-2-赋值、字符串的拼接"><a href="#3-3-2-赋值、字符串的拼接" class="headerlink" title="3.3.2 赋值、字符串的拼接"></a>3.3.2 赋值、字符串的拼接</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 直接取值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>  <span class="attr">th:text</span>=<span class="string">"$&#123;collect.description&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 标签内赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello，[[$&#123;collect.description&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 取值拼接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"'Welcome to our application, ' + $&#123;user.name&#125; + '!'"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;字符串拼接还有另外一种简洁的写法。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"|Welcome to our application, $&#123;user.name&#125;!|"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-3-条件判断If-Unless"><a href="#3-3-3-条件判断If-Unless" class="headerlink" title="3.3.3 条件判断If/Unless"></a>3.3.3 条件判断If/Unless</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thymeleaf中使用<code>th:if</code>和<code>th:unless</code>属性进行条件判断，下面的例子中，<code>&lt;a&gt;</code>标签只有在th:if中条件成立时才显示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:if</span>=<span class="string">"$&#123;myself=='yes'&#125;"</span> &gt;</span> <span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:unless</span>=<span class="string">$&#123;session.user</span> != <span class="string">null&#125;</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/login&#125;"</span> &gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>th:unless于th:if恰好相反，只有表达式中的条件不成立，才会显示其内容。<br>也可以使用 (if) ? (then) : (else) 这种语法来判断显示的内容。</p>
</blockquote>
<h4 id="3-3-4-for循环"><a href="#3-3-4-for循环" class="headerlink" title="3.3.4 for循环"></a>3.3.4 for循环</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>  <span class="attr">th:each</span>=<span class="string">"item,iterStat : $&#123;list&#125;"</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">"row"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;collect.id&#125;"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">td</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">"$&#123;item.webLogo&#125;"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.url&#125;"</span>&gt;</span>Mark<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.title&#125;"</span>&gt;</span>Otto<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.description&#125;"</span>&gt;</span>@mdo<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.index&#125;"</span>&gt;</span>index<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>list是后台传入的数据，item是设置每次循环的对象名(自定义)。</p>
</blockquote>
<p>iterStat称作状态变量，属性有:</p>
<ul>
<li>index: 当前迭代对象的index(从0开始计算)</li>
<li>count: 当前迭代对象的index(从1开始计算)</li>
<li>size: 被迭代对象的大小</li>
<li>current: 当前迭代变量</li>
<li>even/odd: 布尔值，当前循环是否是偶数/奇数(从0开始计算)</li>
<li>first: 布尔值，当前循环是否是第一个</li>
<li>last: 布尔值，当前循环是否是最后一个</li>
</ul>
<h4 id="3-3-5-URL"><a href="#3-3-5-URL" class="headerlink" title="3.3.5 URL"></a>3.3.5 URL</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URL在Web应用模板中占据着十分重要的地位，需要特别注意的是Thymeleaf对于URL的处理是通过语法 <strong>@{…}</strong>来处理的。如果需要Thymeleaf对URL进行渲染，那么务必使用<code>th:href</code>，<code>th:src</code>等属性，也可以用来引入css、js、图片等文件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 超链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/order/&#123;orderId&#125;/details(orderId=$&#123;o.id&#125;)&#125;"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入css --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/css/bootstrap.min.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置背景 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:style</span>=<span class="string">"'background:url(' + @&#123;/&lt;path-to-image&gt;&#125; + ');'"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根据属性值改变背景 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media-object resource-card-image"</span>  <span class="attr">th:style</span>=<span class="string">"'background:url(' + @&#123;($&#123;collect.webLogo&#125;=='' ? 'img/favicon.png' : $&#123;collect.webLogo&#125;)&#125; + ')'"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>几点说明：</p>
<ul>
<li>上列中URL最后的(orderId=${o.id})表示将括号内的内容作为URL参数处理，该语法避免使用字符串拼接，大大提高了可读性。</li>
<li>@{…}表达式中可以通过{orderId}访问COntext中的orderId变量。</li>
<li>@{/order}是Context相关的相对路径，在渲染时会自动添加上当前Web应用的Context名字。例如contest名字为app，那么解析的结果就是/app/order。</li>
</ul>
<h4 id="3-3-6-内联JS"><a href="#3-3-6-内联JS" class="headerlink" title="3.3.6 内联JS"></a>3.3.6 内联JS</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;内联文本：<strong>[[…]]</strong>内联文本的表示方式，<strong>[[…]]</strong>之间的内容可以被赋值。为了使其生效，必须在此标签或者任何父标签上有<strong>th:inline</strong>属性。此属性有三种值(<code>text</code>、<code>javascript</code>、<code>none</code>)。<strong>th:inline</strong>也可以在父标签上使用，比如作为body上的标签。表达式在javascript中使用时，先用属性声明一下：th:inline=”javascript”，然后我们开始在js中声明变量：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script th:inline=<span class="string">"javascript"</span>&gt;</span><br><span class="line">    <span class="comment">/*&lt;![CDATA[*/</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">var</span> username = <span class="comment">/*[[$&#123;session.user.name&#125;]]*/</span> <span class="string">'Sebastian'</span>;</span><br><span class="line">        ...</span><br><span class="line">    <span class="comment">/*]]&gt;*/</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>/*[[…]]*/</strong>表达式的理解如下;</p>
<ul>
<li>/*…*/中的内容子啊浏览器打开静态网页时会被忽略。</li>
<li>‘Sebastian’ 会在浏览器中显示。(静态时)。</li>
<li>Thymeleaf解析时，会解析/*[[…]]*/的内容，并把获得的值替换掉/*[[…]]*/后面的内容。</li>
</ul>
<p>所以执行的结果如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script th:inline=<span class="string">"javascript"</span>&gt;</span><br><span class="line">    <span class="comment">/*&lt;![CDATA[*/</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">var</span> username = <span class="string">'John Apricot'</span>;</span><br><span class="line">        ...</span><br><span class="line">    <span class="comment">/*]]&gt;*/</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>当然，你也可以不用注释，就像下面这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script th:inline=<span class="string">"javascript"</span>&gt;</span><br><span class="line">    <span class="comment">/*&lt;![CDATA[*/</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">var</span> username = [[$&#123;session.user.name&#125;]];</span><br><span class="line">        ...</span><br><span class="line">    <span class="comment">/*]]&gt;*/</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>这会让它在静态显示时出现错误。</p>
<blockquote>
<p>注意：引擎求值后注入式是智能的，它可以赋值以下类型的数据：<code>String</code>、<code>Numbers</code>、<code>Booleans</code>、<code>Arrays</code>、<code>Collections</code>、<code>Maps</code>、<code>Beans (objects with getter and setter methods)</code>。</p>
</blockquote>
<p>举个栗子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">script th:inline=<span class="string">"javascript"</span>&gt;</span><br><span class="line">    <span class="comment">/*&lt;![CDATA[*/</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">var</span> user = <span class="comment">/*[[$&#123;session.user&#125;]]*/</span> <span class="literal">null</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/*]]&gt;*/</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>${session.user}会获取一个user对象。写入如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script th:inline=<span class="string">"javascript"</span>&gt;</span><br><span class="line">    <span class="comment">/*&lt;![CDATA[*/</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">var</span> user = &#123;<span class="string">'age'</span>:<span class="literal">null</span>,<span class="string">'firstName'</span>:<span class="string">'John'</span>,<span class="string">'lastName'</span>:<span class="string">'Apricot'</span>,</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'John Apricot'</span>,<span class="string">'nationality'</span>:<span class="string">'Antarctica'</span>&#125;;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/*]]&gt;*/</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>引擎同样允许增加和删除代码块。增加代码块：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">23</span>;</span><br><span class="line"><span class="comment">/*[+</span></span><br><span class="line"><span class="comment">var msg = 'This is a working application';</span></span><br><span class="line"><span class="comment">+]*/</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>解析如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">23</span>;</span><br><span class="line"><span class="keyword">var</span> msg = <span class="string">'This is a working application'</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>删除代码块：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">23</span>;</span><br><span class="line"><span class="comment">/*[- */</span></span><br><span class="line"><span class="keyword">var</span> msg = <span class="string">'This is a non-working template'</span>;</span><br><span class="line"><span class="comment">/* -]*/</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>解析如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">23</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<blockquote>
<p>增加和删除代码块只是有这一块的知识点，所以暂时先写上了，但是具体是干啥的，我也不清楚，反正我是没用到。</p>
</blockquote>
<h4 id="3-3-7-信息表达式"><a href="#3-3-7-信息表达式" class="headerlink" title="3.3.7 信息表达式"></a>3.3.7 信息表达式</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;先举个简单的栗子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;p th:utext=<span class="string">"#&#123;home.welcome&#125;"</span>&gt;Welcome to our grocery store!<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>其中<code>home.welcome=欢迎光临本店</code>。<br>如果消息文本不完全是静态的会发生什么？有时候我们需要在消息中增加变量，比如输出访问者的名字怎么办？可以这样办：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;p th:utext=<span class="string">"#&#123;home.welcome($&#123;session.user.name&#125;)&#125;"</span>&gt;</span><br><span class="line">Bienvenido a nuestra tienda de comestibles, 木鱼!</span><br><span class="line">&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中<code>home.welcome=欢迎光临本店, {0}!</code><br>在这里，参数可以是字符型也可是树数值型或者日期型。当然如果我们需要多个参数的话，类推即可，并且我们也可以内嵌表达式替换字符串，比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;p th:utext=<span class="string">"#&#123;$&#123;welcomeMsgKey&#125;($&#123;session.user.name&#125;)&#125;"</span>&gt;</span><br><span class="line">Welcome to our grocery store, 木鱼!</span><br><span class="line">&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-8-选择表达式"><a href="#3-3-8-选择表达式" class="headerlink" title="3.3.8 选择表达式"></a>3.3.8 选择表达式</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;变量不仅能用在#{ }上，还能用在* { }上。两者的区别在于* { }上的的变量首先是选定对象的变量。如果不选定对象，那么是整个上下文环境中的变量和#{ }相同。选择对象用什么呢?<code>th:object</code>标签属性。我们使用它在我们的用户配置文件(userprofile.html)页面:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div th:object=<span class="string">"$&#123;session.user&#125;"</span>&gt;</span><br><span class="line">    &lt;p&gt;Name: <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;firstName&#125;"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;Surname: &lt;span th:text="*&#123;lastName&#125;"&gt;Pepper&lt;/</span>span&gt;.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;Nationality: &lt;span th:text="*&#123;nationality&#125;"&gt;Saturn&lt;/</span>span&gt;.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>
<p>这个语法等同于以下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;p&gt;Name: <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;session.user.firstName&#125;"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;Surname: &lt;span th:text="$&#123;session.user.lastName&#125;"&gt;Pepper&lt;/</span>span&gt;.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;Nationality: &lt;span th:text="$&#123;session.user.nationality&#125;"&gt;Saturn&lt;/</span>span&gt;.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>
<p>当然了，这两种用法是可以混合的:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div th:object=<span class="string">"$&#123;session.user&#125;"</span>&gt;</span><br><span class="line">    &lt;p&gt;Name: <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;firstName&#125;"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;Surname: &lt;span th:text="$&#123;session.user.lastName&#125;"&gt;Pepper&lt;/</span>span&gt;.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;Nationality: &lt;span th:text="*&#123;nationality&#125;"&gt;Saturn&lt;/</span>span&gt;.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>
<p>如果一个对象已经被选择，即th:object=”${session.user}”。那么我们也可以使用#object对象去引用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div th:object=<span class="string">"$&#123;session.user&#125;"</span>&gt;</span><br><span class="line">    &lt;p&gt;Name: <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#object.firstName&#125;"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;Surname: &lt;span th:text="$&#123;session.user.lastName&#125;"&gt;Pepper&lt;/</span>span&gt;.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;Nationality: &lt;span th:text="*&#123;nationality&#125;"&gt;Saturn&lt;/</span>span&gt;.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>
<p>就像之前说的，如果没有对象被选中，那么<code>#{}</code>和<code>*{}</code>表达式的意义是相同的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;p&gt;Name: <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;session.user.name&#125;"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;Surname: &lt;span th:text="*&#123;session.user.surname&#125;"&gt;Pepper&lt;/</span>span&gt;.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;Nationality: &lt;span th:text="*&#123;session.user.nationality&#125;"&gt;Saturn&lt;/</span>span&gt;.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-基本对象"><a href="#3-4-基本对象" class="headerlink" title="3.4 基本对象"></a>3.4 基本对象</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在上下文变量上评估OGNL表达式时，某些对象可用于表达式，以提高灵活性。这些对象（根据OGNL标准）将以#符号开头进行引用。</p>
<h4 id="3-4-1-基础对象"><a href="#3-4-1-基础对象" class="headerlink" title="3.4.1 基础对象"></a>3.4.1 基础对象</h4><ul>
<li><strong>#ctx</strong>: 上下文对象。</li>
<li><strong>#vars</strong>: 上下文变量。</li>
<li><strong>#locale</strong>: 上下文语言环境。</li>
<li><strong>#httpSession</strong>: HttpSession对象(仅在Web上下文中)。</li>
<li><strong>#httpServletRequest</strong>: HttpServletRequest对象(仅在Web上下文中)。</li>
</ul>
<p>可以通过以下方式引用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Established locale country: <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#locale.country&#125;"</span>&gt;</span>US<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>.</span><br></pre></td></tr></table></figure>

<h4 id="3-4-2-请求-会话属性等Web上下文名称空间"><a href="#3-4-2-请求-会话属性等Web上下文名称空间" class="headerlink" title="3.4.2 请求/会话属性等Web上下文名称空间"></a>3.4.2 请求/会话属性等Web上下文名称空间</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Web环境中使用Thymeleaf时，我们可以使用一系列快捷方式来访问请求参数，会话属性和应用程序属性。</p>
<blockquote>
<p>请注意，这些不是上下文对象，而是作为变量添加到上下文中的映射，因此我们不使用即可访问它们#。因此，它们以某种方式充当命名空间。</p>
</blockquote>
<ul>
<li><strong>param</strong>: 用于检索请求参数。${param.foo}是String[]带有foorequest参数值的a ，因此${param.foo[0]}通常用于获取第一个值。</li>
<li><strong>session</strong>: 用于获取会话属性。例如<code>${session.user.name}</code>。</li>
<li><strong>application</strong>: 用于检索应用程序/ servlet上下文属性。</li>
</ul>
<h4 id="3-4-3-Web上下文对象"><a href="#3-4-3-Web上下文对象" class="headerlink" title="3.4.3 Web上下文对象"></a>3.4.3 Web上下文对象</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Web环境中，还可以直接访问以下对象(请注意，这些是对象，而不是映射/命名空间)。</p>
<ul>
<li><strong>#httpServletRequest</strong>: 直接访问<code>javax.servlet.http.HttpServletRequest</code>与当前请求关联的对象。</li>
<li><strong>#httpSession</strong>: 直接访问<code>javax.servlet.http.HttpSession</code>与当前请求关联的对象。</li>
</ul>
<blockquote>
<p>这里只是简单说一下这些对象，因为我也没有用过，想要深入使用的可以在<a href="https://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html#appendix-a-expression-basic-objects" target="_blank" rel="noopener">官网附录A</a>中阅读这些对象的完整参考。 </p>
</blockquote>
<h3 id="3-5-Thymeleaf对象"><a href="#3-5-Thymeleaf对象" class="headerlink" title="3.5 Thymeleaf对象"></a>3.5 Thymeleaf对象</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除了这些基本的对象,Thymeleaf将为我们提供一套实用的对象。来帮助我们我们执行常见的任务。</p>
<ul>
<li><strong>#dates</strong> : 为 java.util.Date对象提供工具方法,比如：格式化,提取年月日等.</li>
<li><strong>#calendars</strong> : 类似于#dates , 但是只针对java.util.Calendar对象.</li>
<li><strong>#numbers</strong> : 为数值型对象提供工具方法。</li>
<li><strong>#strings</strong> :为String 对象提供工具方法。如: contains, startsWith, prepending/appending等。</li>
<li><strong>#objects</strong> : 为object 对象提供常用的工具方法。</li>
<li><strong>#bools</strong> : 为boolean 对象提供常用的工具方法。</li>
<li><strong>#arrays</strong> : 为arrays 对象提供常用的工具方法。</li>
<li><strong>#lists</strong> :为lists对象提供常用的工具方法。</li>
<li><strong>#sets</strong> : 为sets对象提供常用的工具方法。</li>
<li><strong>#maps</strong> : 为maps对象提供常用的工具方法。</li>
<li><strong>#aggregates</strong> :为创造一个arrays 或者 collections聚集函数提供常用的工具方法。</li>
<li><strong>#messages</strong> : 用于获取变量表达式内的外部化消息，其方式与使用<code>#{...}</code>语法获得消息的方式相同。</li>
<li><strong>#ids</strong> : 处理id可能重复的属性的实用方法(例如，由于迭代的结果)。</li>
</ul>
<blockquote>
<p>这里只是简单说一下这些对象，因为我也没有用过，想要深入使用的可以在<a href="https://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html#appendix-b-expression-utility-objects" target="_blank" rel="noopener">官网附录B</a>中阅读这些对象的完整参考。</p>
</blockquote>
<h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再写这篇博客之前关于Thyemleaf模板引擎我也就用过一次，踩过的坑也不少，所以写这篇博客时才各种百度、官网文档等等的去搜集相关知识，整理个也算比较详细了。用的比较多的那些给的都有示例代码，其他的先暂时当作了解，日后开发项目有需要了再来过看。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpootBoot搭建</title>
    <url>/2019/10/22/SpootBoot%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近有一个项目用到了SpringBoot框架，这也是我第一次用这个框架，对于新手小白来说，不是怎么友好，但是一旦搭建好了，确实上手很快，不用管底层是怎么实现的，也不用问某些东西是干嘛的，问就是去百度。因为人家的规定的就是让那么写，咱就是个使用者，跟着写就对了。emmmmmmm，好了，不在这瞎白活了，下面进入正题，开始搭建一个SpringBoot项目。</p>
<a id="more"></a>
<h1 id="SpringBoot项目搭建"><a href="#SpringBoot项目搭建" class="headerlink" title="SpringBoot项目搭建"></a>SpringBoot项目搭建</h1><h2 id="1-SpringBoot"><a href="#1-SpringBoot" class="headerlink" title="1. SpringBoot"></a>1. SpringBoot</h2><h3 id="1-1-什么是SpringBoot"><a href="#1-1-什么是SpringBoot" class="headerlink" title="1.1 什么是SpringBoot"></a>1.1 什么是SpringBoot</h3><blockquote>
<p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.<br>We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need very little Spring configuration.</p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这段话是摘自官网的介绍，大致意思就是使用SpringBoot可以轻松快速的创建独立的、生产级别的基于Spring的应用程序。</p>
<h3 id="1-2-优势"><a href="#1-2-优势" class="headerlink" title="1.2 优势"></a>1.2 优势</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringBoot对开发效率的提升是全方位的，在没有使用SpringBoot之前开发一个web项目需要做那些工作</p>
<ul>
<li>配置web.xml，加载Spring和SpringMVC</li>
<li>配置数据库连接、配置Spring事务</li>
<li>配置加载配置文件的读取、开启注解</li>
<li>配置日志文件</li>
<li>部署tomcat调试</li>
<li>……</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而且还要添加一大堆记不住名字的jar包，有可能还要考虑各个版本的兼容性、冲突性等各种可行性。是不是感觉很复杂？就这步骤还是使用SSM(Spring+SpringMVC+MyBatis)整合搭建的。不说以前的JavaBean+servlet+Jsp的模式，就拿SSH(Struts+Spring+Hibernate)来说比这还要复杂，各种xml搞的让人头大。这个时候再来看一下SpringBoot搭建项目，就简单明了的几个配置文件，而且大多还都是自动配置，而且内置的有tomcat，使用idea创建更是方便，idea内置的各种工具可以实现全部全部框架的自动生成。</p>
<blockquote>
<p><strong>突出优势：</strong><br>简单、快速、方便的搭建项目<br>主流开发框架无配置集成<br>提高开发效率、部署效率</p>
</blockquote>
<h2 id="2-项目搭建"><a href="#2-项目搭建" class="headerlink" title="2. 项目搭建"></a>2. 项目搭建</h2><h3 id="2-1-开发环境"><a href="#2-1-开发环境" class="headerlink" title="2.1 开发环境"></a>2.1 开发环境</h3><blockquote>
<p>os:Windows 10<br>ide:IDEA 2019.2.3<br>jdk:1.8.0<br>maven:3.6.1<br>tomcat:9.0(框架自带)</p>
</blockquote>
<h3 id="2-2-创建项目"><a href="#2-2-创建项目" class="headerlink" title="2.2 创建项目"></a>2.2 创建项目</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用idea新建项目时，选择左侧的Spring Initializr，这是idea提供的快速创建，然后点击next。<br><img src="%E6%96%B0%E5%BB%BA.png" alt="新建"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下一个页面是配置项目信息。Group是域；Artifact一般代表公司名称；这两个参数都是提供给Maven的；下面的Name和Package会自动补全，Package是项目总包名；Type一般都选择Mavne；Language一般选择Java，也可以使用其他虚拟机语言，比如Kotlin、Groovy；Packaging是项目打包方式，可以选择打成jar包或者war包。Java Version对于JDK选择8。配置完成之后点击next。</p>
<blockquote>
<ul>
<li>坐标Group ID是项目组织唯一的标识符，实际对应项目中的package包。</li>
<li>坐标Artifact ID是项目的唯一的标识符，实际对应项目的project name名称，Artifact不可包含大写字母。</li>
</ul>
</blockquote>
<p><img src="%E9%85%8D%E7%BD%AE.png" alt="配置"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接下来是Dependencies初始化依赖，此处勾选Web–&gt;Spring Web。<br><img src="Dependencies.png" alt="Dependencies"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;选择项目路径。然后Finish。<br><img src="%E8%B7%AF%E5%BE%84.png" alt="路径"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为项目是依托于Maven的，第一次加载时间较长，是因为所有的配置都需要在网络上请求下来，下载完毕后项目目录如下所示。<br><img src="%E7%9B%AE%E5%BD%95.png" alt="目录"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简单介绍一下目录，大致可以分成三块。</p>
<blockquote>
<ul>
<li>java: 代码的源文件，逻辑代码都在这个里面存放着，里面的DemoApplication.java是系统的启动文件。</li>
<li>resource: 资源文件夹，存放的是所有静态资源和配置文件。application.properties是主要配置文件，可以添加其他配置，不够我一般习惯将其改为application.yaml格式，这个看个人习惯。有一点就是static文件夹西下的静态文件可以直接通过url访问到。templates文件夹下的不能通过url访问，需要通过controller跳转进行访问。</li>
<li>test: 测试模块。用于项目发布前的测试，里卖弄内置一个Junit测试。</li>
</ul>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在文件夹最外面有一个pom.xml文件，这个是引入外部依赖的文件。下面会说明。</p>
<h3 id="2-3-测试运行"><a href="#2-3-测试运行" class="headerlink" title="2.3 测试运行"></a>2.3 测试运行</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;项目创建出来之后，先写个简单的controller进行测试一下。在之前的<code>com.example.demo</code>下新建一个controller文件夹，创建编写HelloWorldController类进行测试。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: fby</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/10/23 下午5:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloworldController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!恭喜你，测试成功!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里的controller还是和SpringMVC很像的，唯一不同的一点就是<code>@RestController</code>这个注解，他就相当于是<code>@Controller</code>和<code>@ResponseBody</code>这两个注解的合体版。将这个注解打在类上的话，那么这个controller类里的所有方法都等于打上了<code>@ResponseBody</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后就开始运行了，点击右上角的运行箭头或者直接启动DemoApplication.java类。<br><img src="%E6%B5%8B%E8%AF%95.png" alt="测试"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后你就会看到控制台输出SpringBoot了。这个时候就意味着项目已经启动成功了，然后访问<a href="localhost:8080/hello.do" target="_blank" rel="noopener">localhost:8080/hello.do</a><br><img src="%E6%B5%8B%E8%AF%95%E6%88%90%E5%8A%9F.png" alt="测试成功"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以看到信息已经返回，测试成功。</p>
<h2 id="3-项目分析"><a href="#3-项目分析" class="headerlink" title="3. 项目分析"></a>3. 项目分析</h2><h3 id="3-1-pom-xml文件"><a href="#3-1-pom-xml文件" class="headerlink" title="3.1 pom.xml文件"></a>3.1 pom.xml文件</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在创建SpringBoot项目的时候会自动生成一个pom.xml文件。如下所示。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个相比于一般的pom.xml文件多了一个<code>&lt;parent&gt;</code>标签，这个标签是配置在SpringBoot的父级依赖，有了这个，当前的项目才是SpringBoot项目，<code>spring-boot-starter-parent</code>是一个特殊的’starter’，它用来提供maven默认依赖，使用它之后常用的包依赖就可以省去<code>version</code>标签。</p>
<h3 id="3-2-入口类"><a href="#3-2-入口类" class="headerlink" title="3.2 入口类"></a>3.2 入口类</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringBoot项目通常有一个名为*Applicaton的入口类，入口类里面就只有一个<code>main</code>方法，这个<code>main</code>方法其实就是一个标准的Java应用的入口方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>@SpringBootApplication</code>是SpringBoot的核心注解，它是一个组合注解，该注解组合了：<code>@Configuration</code>、<code>@EnableAutoConfiguration</code>、<code>@ComponenScan</code>。若不使用<code>@SpringBootApplication</code>注解也可以使用这三个注解代替。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>@Configuration</code>注解和它的搭档<code>@Bean</code>在一起使用就可以创建一个简单的Spring配置类，可以用来代替相应的xml配置文件。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>@EnableAutoConfiguration</code>让SpringBoot根据类路径中的jar包依赖为当前项目进行自动配置Spring的上下文。例如，添加了<code>spring-boot-starter-web</code>依赖，会自动添加Tomcat和SpringMVC的依赖，那么SpringBoot会对Tomcat和SpringMVC进行自动配置。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>@ComponenScan</code>会自动扫描指定包下的全部标有<code>@Component</code>的类，并注册成Bean，当然包括<code>@Component</code>下的子注解<code>@Service</code>、<code>@Repository</code>、<code>@Controller</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringBoot还会自动扫描<code>@SpringBootApplication</code>所在类的同级包以及子包里的Bean，所以入口类建议就配置在grounpID+arctifactID组合的包名下(这里为<code>com.example.demo</code>包)，使用idea自动创建项目的话idea会自动在这里创建。如果其他包没有和入口启动类在同一级的话，需要配置包扫描注解，<code>@EntityScan(&quot;xx.xx.entity&quot;)</code>:扫描实体类包；<code>@EnableJpaRepositories(basePackages = {&quot;xx.xx.jpa&quot;})</code>：扫描jpa包；<code>@ComponentScan(basePackages = {&quot;xx.xx.controller&quot;, &quot;xx.xx.service&quot;, &quot;xx.xx.service.Impl&quot;})</code>：扫描controller包、service包和Impl包。</p>
<h3 id="3-3-配置文件"><a href="#3-3-配置文件" class="headerlink" title="3.3 配置文件"></a>3.3 配置文件</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringBoot使用一个全局配置文件<code>application.properties</code>，它的作用是对一些默认配置的配置进行修改，放置在<code>src/main/resources</code>目录或者类路径的<code>/config</code>下。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringBoot不仅支持常规的properties配置文件，还支持yaml语言的配置文件。yaml是以数据为中心的语言，在配置数据的时候具有面向对象的特征。</p>
<h2 id="4-使用SpringBoot"><a href="#4-使用SpringBoot" class="headerlink" title="4. 使用SpringBoot"></a>4. 使用SpringBoot</h2><h3 id="4-1-集成JSP"><a href="#4-1-集成JSP" class="headerlink" title="4.1 集成JSP"></a>4.1 集成JSP</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringBot默认视图支持是Thymeleaf模板引擎，但是现在掌握的还不是很深，所以还是先来看看怎么集成JSP吧。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.在pom.xml文件中集成JSP，向pom.xlm添加以下依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.在<code>application.yml</code>文件中配置视图解析器，将我们的JSP文件重定向到/WEB-INF/views/目录下。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line"><span class="attr">  mvc:</span> </span><br><span class="line"><span class="attr">    view:</span> </span><br><span class="line"><span class="attr">      prefix:</span> <span class="string">/WEB-INF/views/</span></span><br><span class="line"><span class="attr">      suffix:</span> <span class="string">.jsp</span></span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.编写一个controller，注解要用<code>@Controller</code>,不能用<code>@RestController</code>注解，不然不能写jsp。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: fby</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/10/23 下午5:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloworldController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"hello2.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"str"</span>,<span class="string">"Hello World!恭喜你，测试成功!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.在<code>src/main</code>目录下一次创建’webapp/WEB-INF/views’目录，并创建一个hello.jsp文件。</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span> %&gt;</span><br><span class="line">猜猜会输出什么？&lt;br&gt;</span><br><span class="line">$&#123;str&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后在浏览器输入<a href="localhost:8080/hello2.do" target="_blank" rel="noopener">localhost:8080/hello2.do</a>就可以看到以下效果了。<br><img src="%E6%B5%8B%E8%AF%95JSP%E6%88%90%E5%8A%9F.png" alt="测试JSP"></p>
<h3 id="4-2-集成MyBatis"><a href="#4-2-集成MyBatis" class="headerlink" title="4.2 集成MyBatis"></a>4.2 集成MyBatis</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;是不是看到这就已经可以自己使用SpringBoot和JSP开发一个静态网页呢？开不开心？不要激动，下面还有数据库没连接呢，接下来就来看看怎么集成MyBatis吧。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.在<code>pom.xml</code>中添加对MySql和Mybatis的依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mysql --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.在application.yml配置文件添加配置。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  mvc:</span></span><br><span class="line"><span class="attr">    view:</span></span><br><span class="line"><span class="attr">      prefix:</span> <span class="string">/WEB-INF/views/</span></span><br><span class="line"><span class="attr">      suffix:</span> <span class="string">.jsp</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3306/test?characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.先在<code>com.example.demo</code>下创建<code>domain</code>和<code>mapper</code>包，再创建<code>User</code>实体类和<code>UserMapper</code>映射类分别放在<code>domain</code>和<code>mapper</code>包下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: fby</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/10/23 下午6:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: fby</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/10/23 下午6:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.然后在<code>controller</code>包下创建<code>UserController</code>类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: fby</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/10/23 下午6:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/userList.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">userList</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = userMapper.findAll();</span><br><span class="line">        model.addAttribute(<span class="string">"list"</span>,list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.编写一个<code>list.jsp</code>文件，用来显示数据库中准备好的数据。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;table border=<span class="string">'1'</span> cellspacing=<span class="string">'0'</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;id&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;name&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;age&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;list&#125;"</span> <span class="keyword">var</span>=<span class="string">"u"</span> varStatus=<span class="string">"user"</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123;u.id&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;u.name&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;u.age&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.在浏览器访问<a href="localhost:8080/userList.do" target="_blank" rel="noopener">localhost:8080/userList.do</a>即可看到数据库里数据。<br><img src="%E6%B5%8B%E8%AF%95MyBatis.png" alt="测试Mybatis"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以上就是使用SpringBoot搭建项目的全部内容，并且集成了JSP和MyBatis，按照上面的步骤一步一步的来，就可以搭建一个基于SpringBoot的web项目了。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
</search>
